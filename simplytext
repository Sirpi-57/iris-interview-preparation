index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IRIS - Interview Readiness & Improvement System</title>
    <!-- External Libraries -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Application Styles -->
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Error Messages Container -->
    <div id="error-messages" class="position-fixed top-0 end-0 p-3" style="z-index: 11000;"></div>

    <!-- Public View (Shown when not logged in) -->
    <div id="public-view">
        <!-- Public Navbar -->
        <nav class="navbar navbar-expand-lg navbar-dark" id="public-navbar">
            <div class="container">
                <a class="navbar-brand" href="#">
                    <i class="fas fa-comments iris-logo-sm me-2"></i>
                    IRIS
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link tab-button active" data-tab="welcome-tab" href="#">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link tab-button" data-tab="features-tab" href="#">Features</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link tab-button" data-tab="pricing-tab" href="#">Pricing</a>
                        </li>
                    </ul>
                    <div class="d-flex">
                        <button class="btn btn-outline-light me-2" data-auth="signin">Sign In</button>
                        <button class="btn btn-primary" data-auth="signup">Get Started</button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Public Content Tabs -->
        <div class="public-tabs-container">
            <!-- Welcome Tab -->
            <div id="welcome-tab" class="public-tab active">
                <div class="hero-section">
                    <div class="container text-center">
                        <div class="logo-container">
                            <i class="fas fa-comments iris-logo"></i>
                        </div>
                        <h1>Welcome to IRIS</h1>
                        <h2>Interview Readiness & Improvement System</h2>
                        <p class="lead">Your AI-powered interview coach that helps you prepare, practice, and perform better in job interviews.</p>
                        <button class="btn btn-primary btn-lg get-started-btn mb-5" data-auth="signup">Get Started for Free</button> 
            
                        <div class="features-grid mb-5">
                            <div class="feature-card">
                                <i class="fas fa-file-alt"></i>
                                <h3>Resume Analysis</h3>
                                <p>Get insights on how your resume matches specific job requirements</p>
                            </div>
                            <div class="feature-card">
                                <i class="fas fa-tasks"></i>
                                <h3>Personalized Prep</h3>
                                <p>Receive a customized study plan based on your skills and the job</p>
                            </div>
                            <div class="feature-card">
                                <i class="fas fa-video"></i>
                                <h3>Mock Interviews</h3>
                                <p>Practice with our AI interviewer in a realistic setting</p>
                            </div>
                            <div class="feature-card">
                                <i class="fas fa-chart-bar"></i>
                                <h3>Performance Analysis</h3>
                                <p>Get detailed feedback and track your improvement over time</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="container py-5">
                    <div class="row align-items-center">
                        <div class="col-lg-6 mb-4 mb-lg-0">
                            <img src="images/whyiris.png" alt="Student preparing for interview" class="img-fluid rounded shadow">
                            </div>
                        <div class="col-lg-6">
                            <h2 class="mb-4">Stop Guessing, Start Preparing Smarter</h2>
                            <p class="text-secondary mb-4">Landing your first job or internship in today's market is tough. Generic advice isn't enough. IRIS gives you the personalized edge you need.</p>
                            <ul>
                                <li><i class="fas fa-times-circle text-danger me-2"></i> **Problem:** Struggling to get relevant interview practice?</li>
                                <li><i class="fas fa-check-circle text-success me-2"></i> **IRIS Solution:** Practice anytime, anywhere with an AI interviewer that asks relevant questions based on real job descriptions.</li>
                                <li class="mt-3"><i class="fas fa-times-circle text-danger me-2"></i> **Problem:** Not sure if your resume will even pass the first screening?</li>
                                <li><i class="fas fa-check-circle text-success me-2"></i> **IRIS Solution:** Get instant feedback on how well your resume matches a specific job and learn how to beat Applicant Tracking Systems (ATS).</li>
                                <li class="mt-3"><i class="fas fa-times-circle text-danger me-2"></i> **Problem:** Receiving generic feedback that doesn't help you improve?</li>
                                <li><i class="fas fa-check-circle text-success me-2"></i> **IRIS Solution:** Get detailed, actionable insights on your answers, communication style (based on analysis), and areas to focus on.</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="bg-light py-5">
                    <div class="container">
                        <h2 class="text-center mb-5">Practice Makes Perfect (Especially with AI!)</h2>
                        <div class="row text-center">
                            <div class="col-md-4 mb-4">
                                <div class="p-4 h-100">
                                    <i class="fas fa-comments fa-3x text-primary mb-3"></i>
                                    <h4>Build Confidence</h4>
                                    <p class="text-secondary">Reduce interview anxiety by practicing in a safe, realistic environment. Get comfortable answering common and unexpected questions.</p>
                                </div>
                            </div>
                            <div class="col-md-4 mb-4">
                                 <div class="p-4 h-100">
                                    <i class="fas fa-crosshairs fa-3x text-primary mb-3"></i>
                                    <h4>Targeted Practice</h4>
                                    <p class="text-secondary">Focus your preparation. IRIS tailors questions based on your resume and the specific job description you're targeting.</p>
                                </div>
                            </div>
                            <div class="col-md-4 mb-4">
                                 <div class="p-4 h-100">
                                    <i class="fas fa-chart-line fa-3x text-primary mb-3"></i>
                                    <h4>Actionable Feedback</h4>
                                    <p class="text-secondary">Go beyond "good job". Get detailed scores, analysis of your answers, and specific suggestions for improvement after every mock interview.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="container py-5">
                    <h2 class="text-center mb-5">Beat the ATS, Impress Recruiters</h2>
                    <div class="row align-items-center">
                         <div class="col-lg-7">
                            <p class="text-secondary mb-3">Did you know most large companies use Applicant Tracking Systems (ATS) to filter resumes? A generic resume often gets rejected before a human even sees it.</p>
                            <p class="text-secondary mb-3">Every job description has specific keywords and requirements. Your resume needs to reflect these to get noticed.</p>
                            <p class="text-secondary fw-bold mb-3">IRIS helps you:</p>
                            <ul>
                                <li><i class="fas fa-check text-success me-2"></i> Analyze your resume against ANY job description.</li>
                                <li><i class="fas fa-check text-success me-2"></i> Identify missing keywords and skill gaps relevant to the ATS.</li>
                                <li><i class="fas fa-check text-success me-2"></i> Get suggestions to tailor your resume effectively for each application.</li>
                                <li><i class="fas fa-check text-success me-2"></i> Increase your chances of passing the initial screening.</li>
                            </ul>
                         </div>
                         <div class="col-lg-5">
                             <img src="images/ats.png" alt="Resume passing through ATS scan" class="img-fluid rounded shadow">
                             </div>
                    </div>
                </div>
                 <div class="bg-light py-5">
                    <div class="container">
                        <h2 class="text-center mb-5">Get Started in 3 Simple Steps</h2>
                        <div class="row text-center">
                            <div class="col-md-4 mb-4">
                                <div class="p-3">
                                    <div class="step-number">1</div>
                                    <i class="fas fa-upload fa-3x text-primary my-3"></i>
                                    <h4>Upload</h4>
                                    <p class="text-secondary">Upload your resume (PDF) and paste the job description you're targeting.</p>
                                </div>
                            </div>
                            <div class="col-md-4 mb-4">
                                 <div class="p-3">
                                     <div class="step-number">2</div>
                                    <i class="fas fa-cogs fa-3x text-primary my-3"></i>
                                    <h4>Analyze & Prepare</h4>
                                    <p class="text-secondary">IRIS analyzes the match, generates a prep plan, and identifies likely questions.</p>
                                </div>
                            </div>
                            <div class="col-md-4 mb-4">
                                 <div class="p-3">
                                    <div class="step-number">3</div>
                                    <i class="fas fa-video fa-3x text-primary my-3"></i>
                                    <h4>Practice & Improve</h4>
                                    <p class="text-secondary">Take mock interviews with AI, get detailed feedback, and track your progress.</p>
                                </div>
                            </div>
                        </div>
                         <div class="text-center mt-4">
                             <button class="btn btn-primary btn-lg get-started-btn" data-auth="signup">Start Your Free Analysis</button>
                         </div>
                    </div>
                </div>
            </div>

            <!-- Features Tab -->
            <div id="features-tab" class="public-tab">
                <div class="container py-5">
                    <h1 class="text-center mb-5">Powerful Features to Ace Your Interviews</h1>
                    
                    <div class="row align-items-center mb-5">
                        <div class="col-md-6">
                            <h2>Resume Analysis</h2>
                            <p>Our AI-powered system analyzes your resume against specific job descriptions to:</p>
                            <ul>
                                <li>Identify skill matches and gaps</li>
                                <li>Calculate a comprehensive match score</li>
                                <li>Suggest targeted improvements to your resume</li>
                                <li>Highlight your strengths relevant to the position</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <img src="images/resumeanalysis.png" alt="Resume Analysis" class="img-fluid rounded shadow">
                        </div>
                    </div>
                    
                    <div class="row align-items-center mb-5">
                        <div class="col-md-6 order-md-2">
                            <h2>Personalized Preparation Plans</h2>
                            <p>Get a customized interview preparation plan including:</p>
                            <ul>
                                <li>Focused study topics based on job requirements</li>
                                <li>Most likely interview questions with guidance</li>
                                <li>Strategies to address potential skill gaps</li>
                                <li>Dynamic timeline that adjusts to your interview date</li>
                            </ul>
                        </div>
                        <div class="col-md-6 order-md-1">
                            <img src="images/prepplan.png" alt="Preparation Plans" class="img-fluid rounded shadow">
                        </div>
                    </div>
                    
                    <div class="row align-items-center mb-5">
                        <div class="col-md-6">
                            <h2>Interactive Mock Interviews</h2>
                            <p>Practice with our AI interviewer, which provides:</p>
                            <ul>
                                <li>Realistic interview experiences with voice interaction</li>
                                <li>Different interview types (General, Technical, Behavioral)</li>
                                <li>Questions tailored to your resume and target job</li>
                                <li>Natural conversations with follow-up questions</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <img src="images/mockinterview.png" alt="Mock Interviews" class="img-fluid rounded shadow">
                        </div>
                    </div>
                    
                    <div class="row align-items-center">
                        <div class="col-md-6 order-md-2">
                            <h2>Performance Analysis & Improvement</h2>
                            <p>After each mock interview, receive:</p>
                            <ul>
                                <li>Detailed scoring across technical, communication, and behavioral dimensions</li>
                                <li>Alternative answer suggestions for each question</li>
                                <li>Specific improvement recommendations</li>
                                <li>Progress tracking across multiple practice sessions</li>
                            </ul>
                        </div>
                        <div class="col-md-6 order-md-1">
                            <img src="images/report.png" alt="Performance Analysis" class="img-fluid rounded shadow">
                        </div>
                    </div>
                    
                    <div class="text-center mt-5">
                        <button class="btn btn-primary btn-lg" data-auth="signup">Start Your Interview Preparation</button>
                    </div>
                </div>
            </div>

            <!-- Pricing Tab -->
            <div id="pricing-tab" class="public-tab">
                <div class="container py-5">
                    <h1 class="text-center mb-5">Choose Your Preparation Pack</h1>
                    <p class="text-center text-muted mb-5">One-time purchases designed for students. Get interview-ready without recurring subscriptions.</p>

                    <div class="row justify-content-center">

                        <div class="col-lg-3 col-md-6 mb-4 d-flex">
                            <div class="card pricing-card w-100" data-plan="free" data-resume-limit="2" data-interview-limit="0">
                                <div class="card-header">
                                    <h3 class="my-0 font-weight-normal">Free</h3>
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h2 class="card-title pricing-card-title text-center">₹0</h2>
                                    <ul class="list-unstyled mt-3 mb-4 flex-grow-1">
                                        <li><i class="fas fa-check text-success me-2"></i> 2 Resume Analyses (Basic Score & Keywords)</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Basic Prep Plan Access</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                        <li class="text-muted"><i class="fas fa-times me-2"></i> No Mock Interviews</li>
                                        <li class="text-muted"><i class="fas fa-times me-2"></i> Basic Feedback Only</li>
                                        <li class="text-muted"><i class="fas fa-times me-2"></i> No Suggested Answers</li>
                                    </ul>
                                    <button type="button" class="btn btn-lg btn-block btn-outline-primary w-100 mt-auto plan-select-btn" data-plan="free" data-auth="signup">Sign Up Free</button>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3 col-md-6 mb-4 d-flex">
                            <div class="card pricing-card w-100" data-plan="starter" data-resume-limit="5" data-interview-limit="1">
                                <div class="card-header">
                                    <h3 class="my-0 font-weight-normal">Starter Pack</h3>
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h2 class="card-title pricing-card-title text-center">₹299</h2>
                                    <ul class="list-unstyled mt-3 mb-4 flex-grow-1">
                                        <li><i class="fas fa-check text-success me-2"></i> 5 Resume Analyses (Full)</li>
                                        <li><i class="fas fa-check text-success me-2"></i> 1 Full Mock Interview</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Report</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                        <li class="text-muted"><i class="fas fa-times me-2"></i> Suggested Answers Library</li>
                                    </ul>
                                    <button type="button" class="btn btn-lg btn-block btn-primary w-100 mt-auto plan-select-btn" data-plan="starter">Get Started</button>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3 col-md-6 mb-4 d-flex">
                            <div class="card pricing-card highlight-card w-100" data-plan="standard" data-resume-limit="10" data-interview-limit="3">
                                <div class="card-header">
                                    <h3 class="my-0 font-weight-normal">Standard Pack</h3>
                                    <span class="badge bg-warning text-dark position-absolute top-0 start-50 translate-middle mt-2">Popular</span>
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h2 class="card-title pricing-card-title text-center">₹499</h2>
                                    <ul class="list-unstyled mt-3 mb-4 flex-grow-1">
                                        <li><i class="fas fa-check text-success me-2"></i> 10 Resume Analyses (Full)</li> 
                                        <li><i class="fas fa-check text-success me-2"></i> 3 Full Mock Interviews</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Reports</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Suggested Answers Library</li>
                                    </ul>
                                    <button type="button" class="btn btn-lg btn-block btn-primary w-100 mt-auto plan-select-btn" data-plan="standard">Choose Standard</button>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3 col-md-6 mb-4 d-flex">
                            <div class="card pricing-card w-100" data-plan="pro" data-resume-limit="10" data-interview-limit="5">
                                <div class="card-header">
                                    <h3 class="my-0 font-weight-normal">Pro Pack</h3>
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h2 class="card-title pricing-card-title text-center">₹899</h2>
                                    <ul class="list-unstyled mt-3 mb-4 flex-grow-1">
                                        <li><i class="fas fa-check text-success me-2"></i> 10 Resume Analyses (Full)</li>
                                        <li><i class="fas fa-check text-success me-2"></i> 5 Full Mock Interviews</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Reports</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                        <li><i class="fas fa-check text-success me-2"></i> Suggested Answers Library</li>
                                    </ul>
                                    <button type="button" class="btn btn-lg btn-block btn-primary w-100 mt-auto plan-select-btn" data-plan="pro">Go Pro</button>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="text-center mt-4 text-muted">
                        <p><small>Need just a bit more? Individual Mock Interviews (₹79) and Resume Analyses (₹9) available after signup.</small></p> 
                    </div>

                    <div class="mt-5 pt-5 border-top text-center">
                        <h2>For Colleges & Institutions</h2>
                        <p class="lead">Partner with IRIS to provide comprehensive placement preparation for your students.</p>
                        <p>Offer includes bulk access to the Pro Pack features (10 Resume Analyses, 5 Mock Interviews per student) at special institutional pricing (Starting at ₹799 per student for 300+).</p>
                        <button type="button" class="btn btn-lg btn-outline-primary" onclick="window.location.href='mailto:info@irisapp.co?subject=Institutional Partnership Inquiry'">Contact Us for Bulk Pricing</button>
                    </div>

                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="public-footer">
            <div class="container">
                <div class="row">
                    <div class="col-md-4 mb-4">
                        <h5><i class="fas fa-comments iris-logo-sm me-2"></i> IRIS</h5>
                        <p>Your AI-powered interview coach that helps you prepare, practice, and perform better in job interviews.</p>
                    </div>
                    <div class="col-md-2 mb-4">
                        <h5>Product</h5>
                        <ul class="list-unstyled">
                            <li><a href="#" class="tab-button" data-tab="features-tab">Features</a></li>
                            <li><a href="#" class="tab-button" data-tab="pricing-tab">Pricing</a></li>
                        </ul>
                    </div>
                    <div class="col-md-2 mb-4">
                        <h5>Company</h5>
                        <ul class="list-unstyled">
                            <li><a href="#">About Us</a></li>
                            <li><a href="#">Contact</a></li>
                        </ul>
                    </div>
                    <div class="col-md-2 mb-4">
                        <h5>Legal</h5>
                        <ul class="list-unstyled">
                            <li><a href="#">Privacy Policy</a></li>
                            <li><a href="#">Terms of Service</a></li>
                        </ul>
                    </div>
                    <div class="col-md-2 mb-4">
                        <h5>Connect</h5>
                        <div class="social-icons">
                            <a href="#"><i class="fab fa-twitter"></i></a>
                            <a href="#"><i class="fab fa-linkedin"></i></a>
                            <a href="#"><i class="fab fa-github"></i></a>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 text-center mt-4">
                        <p class="mb-0">&copy; 2025 IRIS Interview Prep. All rights reserved.</p>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <!-- App View (Shown when logged in) -->
    <div id="app-view" style="display: none;">
        <div class="app-container">
            <!-- Sidebar Navigation -->
            <nav id="sidebar">
                <div class="sidebar-header">
                    <h3>IRIS</h3>
                    <p>Interview Readiness & Improvement System</p>
                </div>
                <ul class="nav-items">
                    <li class="nav-item active" data-target="landing">
                        <i class="fas fa-home"></i> Home
                    </li>
                    <li class="nav-item" data-target="upload">
                        <i class="fas fa-upload"></i> Upload
                    </li>
                    <li class="nav-item" data-target="analysis" id="nav-analysis">
                        <i class="fas fa-chart-pie"></i> Analysis
                        <span class="status-indicator locked"><i class="fas fa-lock"></i></span>
                    </li>
                    <li class="nav-item" data-target="prep-plan" id="nav-prep-plan">
                        <i class="fas fa-clipboard-list"></i> Prep Plan
                        <span class="status-indicator locked"><i class="fas fa-lock"></i></span>
                    </li>
                    <li class="nav-item" data-target="mock-interview" id="nav-interview">
                        <i class="fas fa-video"></i> Mock Interview
                        <span class="status-indicator locked"><i class="fas fa-lock"></i></span>
                    </li>
                    <li class="nav-item" data-target="performance" id="nav-performance">
                        <i class="fas fa-chart-line"></i> Performance
                        <span class="status-indicator locked"><i class="fas fa-lock"></i></span>
                    </li>
                    <li class="nav-item" data-target="history" id="nav-history">
                        <i class="fas fa-history"></i> History
                        <span class="status-indicator locked"><i class="fas fa-lock"></i></span>
                    </li>
                    <!-- New: User Profile Section -->
                    <li class="nav-item" data-target="user-profile" id="nav-user-profile">
                        <i class="fas fa-user-circle"></i> My Profile
                    </li>
                </ul>
                
                <!-- User Info in Sidebar -->
                <div class="sidebar-user-info">
                    <div class="user-avatar-container">
                        <img src="https://i.stack.imgur.com/34AD2.jpg" alt="User" class="user-avatar rounded-circle">
                        <span class="user-plan-badge">Free</span>
                    </div>
                    <div class="user-details">
                        <span class="user-display-name">User Name</span>
                        <span class="user-email small">user@example.com</span>
                    </div>
                    <button class="btn btn-sm btn-outline-light signout-button mt-2">
                        <i class="fas fa-sign-out-alt"></i> Sign Out
                    </button>
                </div>

                <div class="sidebar-footer">
                    <p>&copy; 2025 IRIS</p>
                </div>
            </nav>

            <!-- Main Content Area -->
            <main id="content">
                <!-- Landing Page -->
                <section id="landing" class="content-section active">
                    <div class="hero-section">
                        <div class="container text-center">
                            <div class="logo-container">
                                <i class="fas fa-comments iris-logo"></i>
                            </div>
                            <h1>Welcome to IRIS</h1>
                            <h2>Interview Readiness & Improvement System</h2>
                            <p class="lead">Your AI-powered interview coach that helps you prepare, practice, and perform better in job interviews.</p>
                            <div class="features-grid">
                                <div class="feature-card">
                                    <i class="fas fa-file-alt"></i>
                                    <h3>Resume Analysis</h3>
                                    <p>Get insights on how your resume matches specific job requirements</p>
                                </div>
                                <div class="feature-card">
                                    <i class="fas fa-tasks"></i>
                                    <h3>Personalized Prep</h3>
                                    <p>Receive a customized study plan based on your skills and the job</p>
                                </div>
                                <div class="feature-card">
                                    <i class="fas fa-video"></i>
                                    <h3>Mock Interviews</h3>
                                    <p>Practice with our AI interviewer in a realistic setting</p>
                                </div>
                                <div class="feature-card">
                                    <i class="fas fa-chart-bar"></i>
                                    <h3>Performance Analysis</h3>
                                    <p>Get detailed feedback and track your improvement over time</p>
                                </div>
                            </div>
                            <button class="btn btn-primary btn-lg get-started-btn" id="getStartedBtn">Get Started</button>
                        </div>
                    </div>
                </section>

                <!-- Upload Resume & Job Description -->
                <section id="upload" class="content-section">
                    <div class="container">
                        <h2>Upload Your Resume & Job Description</h2>
                        <p class="section-description">Let's analyze your resume against a specific job to create a personalized interview preparation plan.</p>
                        
                        <div class="card">
                            <div class="card-body">
                                <form id="resumeUploadForm" enctype="multipart/form-data">
                                    <div class="mb-3">
                                        <label for="resumeFile" class="form-label">Upload Your Resume (PDF)</label>
                                        <input type="file" class="form-control" id="resumeFile" name="resumeFile" accept=".pdf" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="jobDescription" class="form-label">Job Description</label>
                                        <textarea class="form-control" id="jobDescription" name="jobDescription" rows="6" placeholder="Paste the complete job description here..." required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-primary" id="analyzeBtn">Analyze Resume</button>
                                </form>
                            </div>
                        </div>

                        <div id="uploadProgress" class="progress-container mt-4" style="display: none;">
                            <h4>Analyzing Your Resume...</h4>
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                            </div>
                            <p id="progressMessage">Uploading files...</p>
                        </div>
                    </div>
                </section>

                <!-- User Profile Section (New) -->
                <section id="user-profile" class="content-section">
                    <div class="container">
                        <h2>My Profile</h2>
                        <p class="section-description">Manage your account information and subscription</p>
                        
                        <div class="row">
                            <!-- Profile Details -->
                            <div class="col-md-8">
                                <div class="card mb-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h3 class="mb-0">Account Information</h3>
                                        <button class="btn btn-sm btn-primary" id="editProfileBtn">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <!-- View Mode -->
                                        <div id="profileViewMode">
                                            <div class="row mb-3">
                                                <div class="col-md-3 fw-bold">Name:</div>
                                                <div class="col-md-9 user-display-name">Loading...</div>
                                            </div>
                                            <div class="row mb-3">
                                                <div class="col-md-3 fw-bold">Email:</div>
                                                <div class="col-md-9 user-email">Loading...</div>
                                            </div>
                                            <div class="row mb-3">
                                                <div class="col-md-3 fw-bold">Account Created:</div>
                                                <div class="col-md-9" id="accountCreatedDate">Loading...</div>
                                            </div>
                                        </div>
                                        
                                        <!-- Edit Mode (initially hidden) -->
                                        <form id="profileEditForm" style="display: none;">
                                            <div class="mb-3">
                                                <label for="profileName" class="form-label">Name</label>
                                                <input type="text" class="form-control" id="profileName" required>
                                            </div>
                                            <div class="mb-3">
                                                <label for="profileEmail" class="form-label">Email (readonly)</label>
                                                <input type="email" class="form-control" id="profileEmail" readonly>
                                            </div>
                                            <div class="d-flex justify-content-end">
                                                <button type="button" class="btn btn-secondary me-2" id="cancelEditBtn">Cancel</button>
                                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3 class="mb-0">Security</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-grid gap-3">
                                            <button class="btn btn-outline-primary" id="changePasswordBtn" style="display: none;">
                                                <i class="fas fa-lock me-2"></i> Change Password
                                            </button>
                                            <button class="btn btn-outline-secondary" id="addPasswordBtn" style="display: none;">
                                                 <i class="fas fa-key me-2"></i> Enable Email/Password Sign-in
                                            </button>
                                            <button class="btn btn-outline-secondary" id="twoFactorBtn">
                                                <i class="fas fa-shield-alt me-2"></i> Enable Two-Factor Authentication
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3 class="mb-0">Data & Privacy</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-grid gap-3">
                                            <button class="btn btn-outline-primary" id="downloadDataBtn">
                                                <i class="fas fa-download me-2"></i> Download My Data
                                            </button>
                                            <button class="btn btn-outline-danger" id="deleteAccountBtn">
                                                <i class="fas fa-trash-alt me-2"></i> Delete My Account
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Subscription Details -->
                            <div class="col-md-4">
                                <div class="card mb-4">
                                    <div class="card-header bg-primary text-white">
                                        <h3 class="mb-0">Subscription</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="subscription-details">
                                            <div class="current-plan mb-3">
                                                <h4>Current Plan</h4>
                                                <div class="d-flex align-items-center mb-2">
                                                    <span class="badge rounded-pill bg-primary me-2 p-2 user-plan">Free</span>
                                                    <span class="text-muted" id="planExpiryDate"></span>
                                                </div>
                                                <p class="plan-description" id="planDescription">
                                                    Your free plan includes 2 resume analyses and 0 mock interviews.
                                                </p>
                                            </div>
                                            
                                            <div class="usage-section mb-3">
                                                <h5>Usage</h5>
                                                <div class="mb-3">
                                                    <div class="d-flex justify-content-between mb-1">
                                                        <span>Resume Analyses</span>
                                                        <span id="resumeAnalysesCount">0/2</span>
                                                    </div>
                                                    <div class="progress" style="height: 8px;">
                                                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <div class="d-flex justify-content-between mb-1">
                                                        <span>Mock Interviews</span>
                                                        <span id="mockInterviewsCount">0/0</span>
                                                    </div>
                                                    <div class="progress" style="height: 8px;">
                                                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="plan-upgrade">
                                                <h5>Upgrade Your Plan</h5>
                                                <ul class="list-unstyled mb-3">
                                                    <li><i class="fas fa-check text-success me-2"></i> More resume analyses</li>
                                                    <li><i class="fas fa-check text-success me-2"></i> Unlock mock interviews</li>
                                                    <li><i class="fas fa-check text-success me-2"></i> Advanced analytics</li>
                                                    <li><i class="fas fa-check text-success me-2"></i> Suggested answers for all questions</li>
                                                </ul>
                                                <button class="btn btn-success w-100" id="upgradePlanBtn">
                                                    <i class="fas fa-crown me-2"></i> Upgrade Now
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3 class="mb-0">Need Help?</h3>
                                    </div>
                                    <div class="card-body">
                                        <p>If you have any questions or need assistance with your account:</p>
                                        <div class="d-grid">
                                            <a href="mailto:support@irisapp.co" class="btn btn-outline-primary">
                                                <i class="fas fa-envelope me-2"></i> Contact Support
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <section id="analysis" class="content-section">
                    <div class="container">
                        <h2>Resume Analysis Results</h2>
                        <p class="section-description">Here's how your resume matches with the job requirements</p>
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card mb-4">
                                    <div class="card-body text-center">
                                        <h3>Match Score</h3>
                                        <div class="match-score-circle">
                                            <span id="matchScore">--</span><span>%</span>
                                        </div>
                                        <p id="matchScoreDescription">Loading analysis...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h3>Match Analysis</h3>
                                        <p id="matchAnalysis">Loading analysis...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3>Key Strengths</h3>
                                    </div>
                                    <div class="card-body">
                                        <ul id="keyStrengthsList" class="list-group list-group-flush">
                                            <li class="list-group-item text-center">Loading strengths...</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3>Skill Gaps</h3>
                                    </div>
                                    <div class="card-body">
                                        <ul id="skillGapsList" class="list-group list-group-flush">
                                            <li class="list-group-item text-center">Loading gaps...</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3>Resume Improvement Suggestions</h3>
                            </div>
                            <div class="card-body">
                                <div id="resumeImprovements">
                                    <p class="text-center">Loading suggestions...</p>
                                </div>
                            </div>
                        </div>
    
                        <div class="card mb-4">
                            <div class="card-header"><h3>Resume Resources</h3></div>
                            <div class="card-body">
                                <p>Consider these external resources for professional resume templates and examples:</p>
                                <ul>
                                    <li><a href="https://flowcv.com/" target="_blank" rel="noopener noreferrer">FlowCV Resume Builder</a></li>
                                    <li><a href="https://resumake.io/" target="_blank" rel="noopener noreferrer">Resumake.io (Free Templates)</a></li>
                                    <li><a href="https://www.canva.com/resumes/templates/" target="_blank" rel="noopener noreferrer">Canva Resume Templates</a></li>
                                    <li><a href="https://zety.com/resume-templates" target="_blank" rel="noopener noreferrer">Zety Resume Templates</a></li>
                                    <li><a href="https://enhancv.com/resume-examples/" target="_blank" rel="noopener noreferrer">Enhancv Examples</a></li>
                                </ul>
                            </div>
                        </div>
    
                        <div class="text-center mt-4">
                            <button class="btn btn-primary" id="viewPrepPlanBtn">View Preparation Plan</button>
                        </div>
                    </div>
                </section>
    
                <!-- Interview Preparation Plan -->
                <section id="prep-plan" class="content-section">
                    <div class="container">
                        <h2>Your Interview Preparation Plan</h2>
                        <p class="section-description">Based on your resume analysis, here's a personalized plan to help you prepare</p>
    
                        <div class="card mb-4">
                            <div class="card-header"><h3>Focus Areas</h3></div>
                            <div class="card-body"><ul id="focusAreasList" class="focus-areas-list"><li>Loading...</li></ul></div>
                        </div>
    
                        <div class="card mb-4">
                            <div class="card-header"><h3>Likely Interview Questions</h3></div>
                            <div class="card-body"><div id="likelyQuestions" class="accordion"><p class="text-center">Loading...</p></div></div>
                        </div>
    
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header"><h3>Concepts to Study</h3></div>
                                    <div class="card-body"><div id="conceptsToStudy"><p class="text-center">Loading...</p></div></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header"><h3><i class="fas fa-exclamation-triangle text-warning me-2"></i> Addressing Potential Gaps</h3></div>
                                    <div class="card-body">
                                        <p class="text-muted small">Advice on how to positively frame areas where your profile might differ from the JD.</p>
                                        <div id="gapStrategies"><p class="text-center">Loading...</p></div>
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3><i class="fas fa-calendar-alt me-2"></i> Dynamic Preparation Timeline</h3>
                            </div>
                            <div class="card-body">
                                <div id="dynamicTimelineControls" style="display: none;" class="mb-3 p-3 border rounded bg-light">
                                    <label for="daysUntilInterview" class="form-label fw-bold">Generate a schedule:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">Days until interview:</span>
                                        <input type="number" class="form-control" id="daysUntilInterview" placeholder="e.g., 7" min="1" max="90" aria-label="Number of days until interview">
                                        <button class="btn btn-success" type="button" id="generateDynamicTimelineBtn">
                                            <i class="fas fa-cogs me-1"></i> Generate Timeline
                                        </button>
                                    </div>
                                    <div class="form-text">Enter the number of full days you have left to prepare (1-90 recommended).</div>
                                </div>
                                <div id="dynamicTimelineArea" class="mt-3">
                                    <p class="text-center text-muted">Enter the number of days above and click generate to create your personalized timeline.</p>
                                </div>
                            </div>
                        </div>
                        <div class="text-center mt-4">
                            <button class="btn btn-primary btn-lg" id="startInterviewBtn">Start Mock Interview Now</button>
                        </div>
                    </div>
                </section>
    
                <!-- Mock Interview Interface -->
                <section id="mock-interview" class="content-section">
                    <div class="container-fluid">
                        <h2>Mock Interview</h2>
                        <p class="section-description">Practice with our AI interviewer in a realistic interview setting</p>
                        
                        <div class="interview-type-selector mb-4" id="interviewTypeSelector">
                            <button class="btn btn-outline-primary active" data-type="general">General</button>
                            <button class="btn btn-outline-primary" data-type="technical">Technical</button>
                            <button class="btn btn-outline-primary" data-type="behavioral">Behavioral</button>
                        </div>
    
                        <div class="interview-container">
                            <div class="row">
                                <!-- Candidate Video Feed -->
                                <div class="col-md-6">
                                    <div class="card video-card">
                                        <div class="card-body p-0">
                                            <div class="video-container">
                                                <video id="candidateVideo" autoplay muted></video>
                                                <!-- Face detection canvas will be inserted here by JS -->
                                                <div class="video-controls">
                                                    <button id="toggleCameraBtn" class="btn btn-sm btn-light">
                                                        <i class="fas fa-video"></i>
                                                    </button>
                                                    <button id="toggleMicBtn" class="btn btn-sm btn-light">
                                                        <i class="fas fa-microphone"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <div class="candidate-speaking-indicator">
                                                <div class="audio-waves">
                                                    <span></span><span></span><span></span><span></span>
                                                </div>
                                                <span>You</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
    
                                <!-- AI Interviewer Avatar -->
                                <div class="col-md-6">
                                    <div class="card avatar-card">
                                        <div class="card-body">
                                            <div class="avatar-container">
                                                <div class="avatar-circle" id="interviewerAvatar">
                                                    <i class="fas fa-user-tie"></i>
                                                </div>
                                                <div class="avatar-pulse-rings">
                                                    <div class="pulse-ring"></div>
                                                    <div class="pulse-ring"></div>
                                                    <div class="pulse-ring"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <div class="interviewer-speaking-indicator">
                                                <div class="audio-waves active" id="interviewerSpeakingWaves">
                                                    <span></span><span></span><span></span><span></span>
                                                </div>
                                                <span>IRIS</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
    
                            <!-- Interview Conversation -->
                            <div class="card mt-4 conversation-card">
                                <div class="card-header">
                                    <h3>Interview Conversation</h3>
                                </div>
                                <div class="card-body">
                                    <div id="conversationContainer" class="conversation-container">
                                        <!-- Messages will be added here -->
                                    </div>
                                    <div class="reply-container mt-3">
                                        <div class="input-group">
                                            <input type="text" id="userReplyInput" class="form-control" placeholder="Type your response or use microphone...">
                                            <button class="btn btn-primary" id="sendReplyBtn">
                                                <i class="fas fa-paper-plane"></i>
                                            </button>
                                            <button class="btn btn-secondary" id="voiceReplyBtn">
                                                <i class="fas fa-microphone"></i>
                                            </button>
                                        </div>
                                        <div id="recordingIndicator" class="recording-indicator">
                                            Recording... <span id="recordingTime">0:00</span>
                                            <button id="stopRecordingBtn" class="btn btn-sm btn-danger">
                                                <i class="fas fa-stop"></i> Stop
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button id="endInterviewBtn" class="btn btn-danger">End Interview & Analyze</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
    
                <!-- Performance Analysis -->
                <section id="performance" class="content-section">
                    <div class="container">
                        <h2>Interview Performance Analysis</h2>
                        <p class="section-description">Here's how you performed in your mock interview</p>
        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card mb-4">
                                    <div class="card-body text-center">
                                        <h3>Overall Score</h3>
                                        <div class="performance-score-circle">
                                            <span id="overallPerformanceScore">--</span><span>%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h3>Overall Assessment</h3>
                                        <p id="overallAssessment">Loading assessment...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
        
                        <div class="row score-cards">
                            <div class="col-md-4">
                                <div class="card mb-4 score-card">
                                    <div class="card-body">
                                        <h3>Technical</h3>
                                        <div class="score-indicator">
                                            <div class="score-value" id="technicalScore">--</div>
                                            <div class="score-bar">
                                                <div class="score-progress" id="technicalScoreBar" style="width: 0%;"></div>
                                            </div>
                                        </div>
                                        <div class="score-details mt-3">
                                            <div class="score-strengths">
                                                <h5>Strengths</h5>
                                                <ul id="technicalStrengths"><li>Loading...</li></ul>
                                            </div>
                                            <div class="score-weaknesses">
                                                <h5>Areas to Improve</h5>
                                                <ul id="technicalWeaknesses"><li>Loading...</li></ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mb-4 score-card">
                                    <div class="card-body">
                                        <h3>Communication</h3>
                                        <div class="score-indicator">
                                            <div class="score-value" id="communicationScore">--</div>
                                            <div class="score-bar">
                                                <div class="score-progress" id="communicationScoreBar" style="width: 0%;"></div>
                                            </div>
                                        </div>
                                        <div class="score-details mt-3">
                                            <div class="score-strengths">
                                                <h5>Strengths</h5>
                                                <ul id="communicationStrengths"><li>Loading...</li></ul>
                                            </div>
                                            <div class="score-weaknesses">
                                                <h5>Areas to Improve</h5>
                                                <ul id="communicationWeaknesses"><li>Loading...</li></ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mb-4 score-card">
                                    <div class="card-body">
                                        <h3>Behavioral</h3>
                                        <div class="score-indicator">
                                            <div class="score-value" id="behavioralScore">--</div>
                                            <div class="score-bar">
                                                <div class="score-progress" id="behavioralScoreBar" style="width: 0%;"></div>
                                            </div>
                                        </div>
                                        <div class="score-details mt-3">
                                            <div class="score-strengths">
                                                <h5>Strengths</h5>
                                                <ul id="behavioralStrengths"><li>Loading...</li></ul>
                                            </div>
                                            <div class="score-weaknesses">
                                                <h5>Areas to Improve</h5>
                                                <ul id="behavioralWeaknesses"><li>Loading...</li></ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3>Key Improvement Areas</h3>
                            </div>
                            <div class="card-body">
                                <div id="keyImprovementAreas">
                                    <p class="text-center">Loading improvement areas...</p>
                                </div>
                            </div>
                        </div>
        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3>Interview Transcript</h3>
                            </div>
                            <div class="card-body">
                                <div id="interviewTranscript" class="interview-transcript">
                                    <p class="text-center">Loading transcript...</p>
                                </div>
                            </div>
                        </div>
        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3><i class="fas fa-lightbulb me-2"></i> Suggested Answers & Rationale</h3>
                            </div>
                            <div class="card-body">
                                <p class="text-muted small">Here are some strong ways you could have answered the interviewer's questions, tailored to your profile.</p>
                                <div id="suggestedAnswersAccordion" class="accordion">
                                    <div class="text-center p-3">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="ms-2">Loading suggested answers...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="text-center mt-4">
                            <button class="btn btn-primary" id="startNewInterviewBtn">Start New Interview</button>
                            <button class="btn btn-secondary" id="viewProgressBtn">View Progress History</button>
                        </div>
                    </div> 
                </section>
    
    
                <!-- Progress History -->
                <section id="history" class="content-section">
                    <div class="container">
                        <h2>Progress History</h2>
                        <p class="section-description">Track your improvement across multiple mock interviews</p>
                        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3>Performance Trends</h3>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="progressChart"></canvas>
                                </div>
                            </div>
                        </div>
    
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3>Improvement Summary</h3>
                                    </div>
                                    <div class="card-body">
                                        <div id="improvementSummary">
                                            <p class="text-center">Loading improvement summary...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h3>Past Interviews</h3>
                                    </div>
                                    <div class="card-body">
                                        <div id="pastInterviewsList" class="past-interviews-list">
                                            <p class="text-center">Loading past interviews...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="text-center mt-4">
                            <button class="btn btn-primary" id="startAnotherInterviewBtn">Start Another Interview</button>
                        </div>
                    </div>
                </section>
            </main>
        </div>
    </div>

    <!-- Authentication Modal -->
    <div class="modal fade" id="auth-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="auth-modal-title">Sign In</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Sign In Form -->
                    <form id="signin-form">
                        <div class="mb-3">
                            <label for="signin-email" class="form-label">Email address</label>
                            <input type="email" class="form-control" id="signin-email" required>
                        </div>
                        <div class="mb-3">
                            <label for="signin-password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="signin-password" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Sign In</button>
                        </div>
                        <div class="text-center mt-3">
                            <p>Don't have an account? <a href="#" onclick="showAuthModal('signup'); return false;">Sign Up</a></p>
                            <p><a href="#" id="forgot-password-link">Forgot your password?</a></p>
                        </div>
                    </form>

                    <!-- Sign Up Form -->
                    <form id="signup-form" style="display: none;">
                        <div class="mb-3">
                            <label for="signup-name" class="form-label">Your Name</label>
                            <input type="text" class="form-control" id="signup-name" required>
                        </div>
                        <div class="mb-3">
                            <label for="signup-email" class="form-label">Email address</label>
                            <input type="email" class="form-control" id="signup-email" required>
                        </div>
                        <div class="mb-3">
                            <label for="signup-password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="signup-password" required>
                            <div class="form-text">Password must be at least 6 characters long</div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="terms-checkbox" required>
                            <label class="form-check-label" for="terms-checkbox">I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></label>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Create Account</button>
                        </div>
                        <div class="text-center mt-3">
                            <p>Already have an account? <a href="#" onclick="showAuthModal('signin'); return false;">Sign In</a></p>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <div class="w-100">
                        <div class="separator">
                            <span>OR</span>
                        </div>
                        <div class="d-grid gap-2 mt-3">
                            <button type="button" class="btn btn-outline-secondary" id="google-signin-button">
                                <i class="fab fa-google me-2"></i> Continue with Google
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Password Reset Modal -->
    <div class="modal fade" id="reset-password-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reset Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="reset-password-form">
                        <div class="mb-3">
                            <label for="reset-email" class="form-label">Email address</label>
                            <input type="email" class="form-control" id="reset-email" required>
                            <div class="form-text">We'll send you a password reset link.</div>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Send Reset Link</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal fade" id="change-password-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="change-password-form">
                        <div class="mb-3">
                            <label for="current-password" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="current-password" required>
                        </div>
                        <div class="mb-3">
                            <label for="new-password" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="new-password" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirm-new-password" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirm-new-password" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Update Password</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="add-password-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Enable Email/Password Sign-in</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Set a password for your account (<span id="add-password-email" class="fw-bold"></span>) to enable signing in directly with your email and this password.</p>
                    <form id="add-password-form">
                        <div class="mb-3">
                            <label for="add-new-password" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="add-new-password" required minlength="6">
                             <div class="form-text">Password must be at least 6 characters long.</div>
                        </div>
                        <div class="mb-3">
                            <label for="add-confirm-new-password" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="add-confirm-new-password" required minlength="6">
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Set Password</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Account Confirmation Modal -->
    <div class="modal fade" id="delete-account-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Delete Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone.
                    </div>
                    <p>Deleting your account will permanently remove:</p>
                    <ul>
                        <li>All your resume analyses</li>
                        <li>Interview recordings and transcripts</li>
                        <li>Preparation plans and performance history</li>
                        <li>Account information and settings</li>
                    </ul>
                    <form id="delete-account-form">
                        <div class="mb-3">
                            <label for="delete-confirmation" class="form-label">Type "DELETE" to confirm</label>
                            <input type="text" class="form-control" id="delete-confirmation" required>
                        </div>
                        <div class="mb-3">
                            <label for="delete-password" class="form-label">Enter your password</label>
                            <input type="password" class="form-control" id="delete-password" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-danger" disabled id="confirm-delete-btn">Delete My Account</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for camera/microphone permissions -->
    <div class="modal fade" id="permissionsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Camera & Microphone Access</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>IRIS needs access to your camera and microphone to provide a realistic interview experience.</p>
                    <p>We use your camera to:</p>
                    <ul>
                        <li>Create a realistic interview setting</li>
                        <li>Help you maintain proper eye contact and posture</li>
                        <li>Analyze your visual engagement during the interview</li>
                        <li>Provide real-time feedback on your interview presence</li>
                    </ul>
                    <p>You'll receive personalized feedback on your visual engagement after the interview, including:</p>
                    <ul>
                        <li>Eye contact consistency</li>
                        <li>Body positioning analysis</li>
                        <li>Tips for improving your visual presence</li>
                    </ul>
                    <p class="text-info"><i class="fas fa-info-circle"></i> Your privacy is important - all processing happens in your browser and no video is stored.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="grantPermissionsBtn">Grant Access</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add this at the end of body, before the scripts -->
    <div class="modal fade" id="limitReachedModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title"><i class="fas fa-exclamation-triangle me-2"></i> Limit Reached</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="limitReachedMessage">You've reached the limit for this feature on your current plan.</p>
                    <div class="alert alert-info">
                        <strong>Upgrade your plan to continue using this feature.</strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="limitReachedUpgradeBtn">Upgrade Now</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add a payment processing spinner modal -->
    <div class="modal fade" id="paymentProcessingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-cog fa-spin me-2"></i> Processing Payment</h5>
                </div>
                <div class="modal-body text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p id="paymentProcessingMessage">Processing your payment...</p>
                    <div class="progress mt-3">
                        <div id="payment-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add a payment success modal -->
    <div class="modal fade" id="paymentSuccessModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title"><i class="fas fa-check-circle me-2"></i> Payment Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="checkmark-circle">
                        <i class="fas fa-check"></i>
                    </div>
                    <h4 class="mt-4">Thank You!</h4>
                    <p id="paymentSuccessMessage">Your plan has been upgraded successfully.</p>
                    <div class="alert alert-info">
                        <strong>New limits:</strong>
                        <ul class="mb-0 mt-2 text-start">
                            <li>Resume Analyses: <span id="newResumeLimit">0</span></li>
                            <li>Mock Interviews: <span id="newInterviewLimit">0</span></li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Continue</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-analytics-compat.js"></script>
    
    <!-- External Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Face-API.js -->
    <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    
    <!-- Application Scripts -->
    <script src="firebase-auth.js"></script>
    <script src="app.js"></script>
</body>
</html>

app.js:

// IRIS - Interview Readiness & Improvement System
// Main JavaScript file (with Firebase authentication integration)

// Global State
const state = {
    sessionId: null,
    interviewId: null,
    mediaRecorder: null,
    audioChunks: [],
    isRecording: false,
    recordingStartTime: null,
    recordingTimer: null,
    videoStream: null,
    interviewType: 'general',
    conversationHistory: [],

    // Voice detection state
    isInterviewActive: false,
    isAIResponding: false,
    silenceTimer: null,
    silenceDelay: 2500,
    audioContext: null,
    analyserNode: null,
    audioSourceNode: null,
    audioDataArray: null,
    vadAnimationFrameId: null,
    speechDetectedInChunk: false,
};

// VAD Constants
const SPEECH_THRESHOLD = 55;
const FFT_SIZE = 256;

// API Base URL
const API_BASE_URL = 'https://iris-ai-backend.onrender.com';

// DOM Elements Cache
const DOMElements = {
    sidebar: document.getElementById('sidebar'),
    content: document.getElementById('content'),
};

document.addEventListener('DOMContentLoaded', function() {
    // Check if Firebase auth is initialized
    if (typeof irisAuth !== 'undefined') {
        console.log('Firebase Auth module detected');
    } else {
        console.warn('Firebase Auth module not found, some features may be limited');
    }

    // Initialize UI interactions
    initNavigation();
    initButtons();
    initForms();
    initProfilePage();

    // Load available browser voices (for fallback TTS)
    loadVoices();
    if (speechSynthesis.onvoiceschanged !== undefined) {
        speechSynthesis.onvoiceschanged = loadVoices;
    }

    // Check browser support
    checkBrowserSupport();
});

// --- Authentication-related Functions ---

// --- Updated initializeIRISApp function ---
function initializeIRISApp() {
    console.log('Initializing IRIS app for authenticated user...');

    // Reset global state potentially tied to previous user/session
    state.sessionId = null;
    state.interviewId = null;

    const userProfile = irisAuth?.getUserProfile();

     if (!userProfile) {
         console.warn("User profile not loaded yet, cannot check for last session.");
         lockAllSections();
         navigateTo('upload');
         return;
     }
     
     // Update usage display
     updateUsageDisplay();

    const lastSessionId = userProfile.lastActiveSessionId;

    if (lastSessionId) {
        console.log(`Found last active session ID from user profile: ${lastSessionId}`);
        checkAndLoadSessionStatus(lastSessionId);
    } else {
        console.log("No last active session found for this user. Starting fresh.");
        lockAllSections();
        navigateTo('upload');
    }
}

// Replace this entire function in app.js
function initProfilePage() {
    // --- Profile Edit Logic ---
    document.getElementById('editProfileBtn')?.addEventListener('click', function() {
        document.getElementById('profileViewMode').style.display = 'none';
        document.getElementById('profileEditForm').style.display = 'block';
        const user = irisAuth?.getCurrentUser();
        const profile = irisAuth?.getUserProfile();
        if (user) {
            document.getElementById('profileName').value = user.displayName || profile?.displayName || '';
            document.getElementById('profileEmail').value = user.email || '';
        }
    });
    document.getElementById('cancelEditBtn')?.addEventListener('click', function() {
        document.getElementById('profileViewMode').style.display = 'block';
        document.getElementById('profileEditForm').style.display = 'none';
    });
    document.getElementById('profileEditForm')?.addEventListener('submit', function(e) {
        e.preventDefault();
        const newName = document.getElementById('profileName').value.trim();
        const user = firebase.auth().currentUser;
        if (user) {
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
            user.updateProfile({ displayName: newName })
                .then(() => {
                    if (firebase.firestore) {
                        return firebase.firestore().collection('users').doc(user.uid).update({
                            displayName: newName,
                            updatedAt: new Date().toISOString()
                        });
                    }
                })
                .then(() => {
                    document.getElementById('profileViewMode').style.display = 'block';
                    document.getElementById('profileEditForm').style.display = 'none';
                    document.querySelectorAll('.user-display-name').forEach(el => { el.textContent = newName; });
                    showMessage('Profile updated successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error updating profile:', error);
                    showMessage(`Error updating profile: ${error.message}`, 'danger');
                })
                .finally(() => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                });
        }
    });

    // --- Change Password Logic (Modified Check) ---
    document.getElementById('changePasswordBtn')?.addEventListener('click', function() {
        const user = firebase.auth().currentUser;
        // Check if user exists and has a password provider linked
        const hasPasswordProvider = user?.providerData.some(p => p.providerId === 'password');

        if (hasPasswordProvider) {
             // Only show change password modal if password is set
             const modal = new bootstrap.Modal(document.getElementById('change-password-modal'));
             modal.show();
        } else {
            showMessage('You need to set a password first before changing it. Click "Enable Email/Password Sign-in".', 'info');
            // Optionally, you could directly trigger the 'add password' modal here if desired:
            // showAddPasswordModal();
        }
    });
    document.getElementById('change-password-form')?.addEventListener('submit', function(e) {
        e.preventDefault();
        const currentPassword = document.getElementById('current-password').value;
        const newPassword = document.getElementById('new-password').value;
        const confirmPassword = document.getElementById('confirm-new-password').value;
        if (newPassword !== confirmPassword) {
            showMessage('New passwords do not match', 'danger'); return;
        }
        if (newPassword.length < 6) {
             showMessage('New password must be at least 6 characters.', 'warning'); return;
        }
        const user = firebase.auth().currentUser;
        if (user) {
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
            const credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);
            user.reauthenticateWithCredential(credential)
                .then(() => user.updatePassword(newPassword))
                .then(() => {
                    bootstrap.Modal.getInstance(document.getElementById('change-password-modal')).hide();
                    showMessage('Password updated successfully!', 'success');
                    document.getElementById('change-password-form').reset(); // Clear form
                })
                .catch(error => {
                    console.error('Error updating password:', error);
                    if (error.code === 'auth/wrong-password') {
                        showMessage('Current password is incorrect', 'danger');
                    } else if (error.code === 'auth/requires-recent-login') {
                         showMessage('This operation requires a recent sign-in. Please sign out and sign back in, then try again.', 'warning');
                    } else {
                        showMessage(`Error updating password: ${error.message}`, 'danger');
                    }
                })
                .finally(() => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                });
        }
    });

    // --- Add Password Logic (New) ---
    const addPasswordBtn = document.getElementById('addPasswordBtn');
    if (addPasswordBtn) {
        // Initial check is done in firebase-auth.js's updateUserProfileUI
        addPasswordBtn.addEventListener('click', showAddPasswordModal); // Attach listener
    }

    // Listener for the new Add Password modal's form
    document.getElementById('add-password-form')?.addEventListener('submit', function(e) {
        e.preventDefault();
        const newPassword = document.getElementById('add-new-password').value;
        const confirmPassword = document.getElementById('add-confirm-new-password').value;
        const user = firebase.auth().currentUser;

        if (!user || !user.email) {
            showMessage('User not found or email missing.', 'danger'); return;
        }
        if (newPassword.length < 6) {
             showMessage('Password must be at least 6 characters long.', 'warning'); return;
        }
        if (newPassword !== confirmPassword) {
            showMessage('Passwords do not match.', 'danger'); return;
        }

        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Setting Password...';

        // Create the Email/Password credential to link
        const credential = firebase.auth.EmailAuthProvider.credential(user.email, newPassword);

        // Link the credential to the existing signed-in user
        user.linkWithCredential(credential)
            .then(() => {
                showMessage('Password set successfully! You can now sign in using your email and this password.', 'success');
                bootstrap.Modal.getInstance(document.getElementById('add-password-modal')).hide();

                // Update button visibility: Hide "Add", Show "Change"
                document.getElementById('addPasswordBtn').style.display = 'none';
                document.getElementById('changePasswordBtn').style.display = 'block';

                 // Clear the add password form
                 document.getElementById('add-password-form').reset();
            })
            .catch((error) => {
                console.error('Error linking password credential:', error);
                // Handle specific errors
                if (error.code === 'auth/requires-recent-login') {
                    showMessage('This operation requires a recent sign-in. Please sign out and sign back in, then try again.', 'warning');
                    // Consider forcing sign out: irisAuth.signOut();
                } else if (error.code === 'auth/credential-already-in-use' || error.code === 'auth/email-already-in-use') {
                     showMessage('Error: This email address is already associated with another account using a password. Cannot link.', 'danger');
                } else if (error.code === 'auth/provider-already-linked') {
                     showMessage('Error: A password provider is already linked to this account.', 'warning');
                     // Update UI just in case it was out of sync
                     document.getElementById('addPasswordBtn').style.display = 'none';
                     document.getElementById('changePasswordBtn').style.display = 'block';
                     bootstrap.Modal.getInstance(document.getElementById('add-password-modal')).hide();
                     document.getElementById('add-password-form').reset();
                }
                else {
                     showMessage(`Failed to set password: ${error.message}`, 'danger');
                }
            })
            .finally(() => {
                // Restore button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            });
    });

    // --- Delete Account Logic (Existing) ---
    document.getElementById('deleteAccountBtn')?.addEventListener('click', function() {
        const modal = new bootstrap.Modal(document.getElementById('delete-account-modal'));
        modal.show();
    });
    document.getElementById('delete-confirmation')?.addEventListener('input', function() {
        const deleteBtn = document.getElementById('confirm-delete-btn');
        deleteBtn.disabled = this.value !== 'DELETE';
    });
    document.getElementById('delete-account-form')?.addEventListener('submit', function(e) {
         e.preventDefault();
         const password = document.getElementById('delete-password').value;
         const confirmation = document.getElementById('delete-confirmation').value;
         if (confirmation !== 'DELETE') { /* ... */ return; }
         const user = firebase.auth().currentUser;
         if (user) {
             const submitBtn = this.querySelector('button[type="submit"]');
             const originalText = submitBtn.innerHTML;
             submitBtn.disabled = true;
             submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';
             const credential = firebase.auth.EmailAuthProvider.credential(user.email, password);
             user.reauthenticateWithCredential(credential)
                 .then(() => {
                     // Firestore cleanup (existing logic)
                     if (firebase.firestore) {
                         const batch = firebase.firestore().batch();
                         batch.delete(firebase.firestore().collection('users').doc(user.uid));
                         return firebase.firestore().collection('sessions').where('userId', '==', user.uid).get()
                             .then(snapshot => { snapshot.forEach(doc => batch.delete(doc.ref)); return firebase.firestore().collection('interviews').where('userId', '==', user.uid).get(); })
                             .then(snapshot => { snapshot.forEach(doc => batch.delete(doc.ref)); return batch.commit(); });
                     }
                 })
                 .then(() => user.delete()) // Delete Firebase Auth user
                 .then(() => {
                     bootstrap.Modal.getInstance(document.getElementById('delete-account-modal')).hide();
                     showMessage('Your account has been deleted successfully', 'success');
                     // Auth state listener will handle UI changes
                 })
                 .catch(error => { /* ... (existing error handling) ... */ })
                 .finally(() => { /* ... (restore button) ... */ });
         }
    });

    // --- Placeholder Logic (Existing) ---
    document.getElementById('upgradePlanBtn')?.addEventListener('click', function() {
        showPaymentModal(); // Placeholder function
    });
    document.getElementById('downloadDataBtn')?.addEventListener('click', function() {
        downloadUserData(); // Client-side download function
    });

    // --- Helper function to show the Add Password Modal ---
    // Defined within initProfilePage scope or globally if preferred
    function showAddPasswordModal() {
        const user = firebase.auth().currentUser;
        if (!user || !user.email) {
            showMessage('Cannot set password. User not logged in or email is missing.', 'warning');
            return;
        }
         // Double-check if password provider exists before showing
        const hasPasswordProvider = user.providerData.some(p => p.providerId === 'password');
        if(hasPasswordProvider) {
             showMessage('Password is already set for this account.', 'info');
             // Ensure button visibility is correct
             document.getElementById('addPasswordBtn').style.display = 'none';
             document.getElementById('changePasswordBtn').style.display = 'block';
             return; // Don't show the modal
        }

        document.getElementById('add-password-email').textContent = user.email; // Show email in modal
        // Clear form fields before showing
        document.getElementById('add-password-form').reset();
        const modal = new bootstrap.Modal(document.getElementById('add-password-modal'));
        modal.show();
    }

    updateUsageDisplay();

    // --- Add upgrade button listener in profile page ---
    document.getElementById('upgradePlanBtn')?.addEventListener('click', showPaymentModal);

} // End of initProfilePage function definition

// --- Replace showPaymentModal function ---
function showPaymentModal() {
    // Get the current plan
    const currentPlan = irisAuth?.getUserProfile()?.plan || 'free';
    
    // Show the upgrade modal with appropriate features highlighted
    showUpgradeModal(currentPlan === 'free' ? 'resumeAnalyses' : 'mockInterviews');
}

function downloadUserData() {
    // Placeholder for user data download
    const user = firebase.auth().currentUser;
    if (!user || !firebase.firestore) {
        showMessage('Unable to download data at this time', 'danger');
        return;
    }
    
    // Show loading message
    showMessage('Preparing your data for download...', 'info');
    
    // Collect user data from Firestore
    const userData = {
        profile: null,
        sessions: [],
        interviews: []
    };
    
    // Get user profile
    firebase.firestore().collection('users').doc(user.uid).get()
        .then(doc => {
            if (doc.exists) {
                userData.profile = doc.data();
            }
            
            // Get user sessions
            return firebase.firestore().collection('sessions')
                .where('userId', '==', user.uid)
                .get();
        })
        .then(snapshot => {
            snapshot.forEach(doc => {
                userData.sessions.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            // Get user interviews
            return firebase.firestore().collection('interviews')
                .where('userId', '==', user.uid)
                .get();
        })
        .then(snapshot => {
            snapshot.forEach(doc => {
                userData.interviews.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            // Create and download JSON file
            const dataStr = JSON.stringify(userData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `iris-data-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showMessage('Your data has been downloaded', 'success');
        })
        .catch(error => {
            console.error('Error downloading user data:', error);
            showMessage(`Error downloading data: ${error.message}`, 'danger');
        });
}

function showMessage(message, type = 'info') {
    const errorContainer = document.getElementById('error-messages');
    if (!errorContainer) {
        console.warn('Error messages container not found');
        alert(message); // Fallback to alert
        return;
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `alert alert-${type} alert-dismissible fade show`;
    messageDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    errorContainer.appendChild(messageDiv);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        messageDiv.classList.remove('show');
        setTimeout(() => messageDiv.remove(), 500);
    }, 5000);
}

// --- Original IRIS Functions ---

function loadVoices() {
    const voices = window.speechSynthesis.getVoices();
    console.log('Available browser voices:', voices.map(v => `${v.name} (${v.lang})`));
    // You could potentially try to find an Indian voice here for the fallback
    // state.fallbackVoice = voices.find(voice => voice.lang === 'en-IN');
}

function checkBrowserSupport() {
     if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        alert('Your browser does not support the necessary media features for the interactive interview. Please use a modern browser like Chrome, Firefox, or Edge.');
    }
    // MediaRecorder support is crucial for sending audio
    if (typeof MediaRecorder === 'undefined') {
         alert('Your browser does not support the MediaRecorder API needed for voice input.');
    }
}

function initNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            const targetSection = this.getAttribute('data-target');
            // Prevent navigation if locked (unless it's the upload/landing section)
            const isLocked = this.querySelector('.status-indicator.locked');
            if (this.classList.contains('active') || (isLocked && targetSection !== 'upload' && targetSection !== 'landing')) {
                return;
            }

            // Switch active nav item
            document.querySelector('.nav-item.active')?.classList.remove('active');
            this.classList.add('active');

            // Switch active content section
            document.querySelector('.content-section.active')?.classList.remove('active');
            document.getElementById(targetSection)?.classList.add('active');

            // Special actions when navigating
            if (targetSection === 'history') {
                loadProgressHistory();
            }
        });
    });
}

function initButtons() {
    // --- General Navigation --- [Keep existing code]
    document.getElementById('getStartedBtn')?.addEventListener('click', () => navigateTo('upload'));
    document.getElementById('viewPrepPlanBtn')?.addEventListener('click', () => navigateTo('prep-plan'));
    document.getElementById('startInterviewBtn')?.addEventListener('click', () => {
        // Add feature check here
        if (checkFeatureAccess('mockInterviews')) {
            navigateTo('mock-interview');
            showPermissionsModal();
        }
    });
    document.getElementById('startNewInterviewBtn')?.addEventListener('click', () => {
        // Add feature check here
        if (checkFeatureAccess('mockInterviews')) {
            navigateTo('mock-interview');
            showPermissionsModal();
        }
    });
    document.getElementById('viewProgressBtn')?.addEventListener('click', () => navigateTo('history'));
    document.getElementById('startAnotherInterviewBtn')?.addEventListener('click', () => {
        // Add feature check here
        if (checkFeatureAccess('mockInterviews')) {
            navigateTo('mock-interview');
            showPermissionsModal();
        }
    });

    // --- Mock Interview Controls --- [Keep existing code]
    document.getElementById('endInterviewBtn')?.addEventListener('click', endInterview);

    const interviewTypeButtons = document.querySelectorAll('#interviewTypeSelector button');
    interviewTypeButtons.forEach(button => {
        button.addEventListener('click', function() {
            interviewTypeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            state.interviewType = this.getAttribute('data-type');
        });
    });

    document.getElementById('toggleCameraBtn')?.addEventListener('click', toggleCamera);
    document.getElementById('toggleMicBtn')?.addEventListener('click', toggleMicrophone);

    // Text input (still useful as a backup or alternative)
    document.getElementById('sendReplyBtn')?.addEventListener('click', sendTextReply);
    document.getElementById('userReplyInput')?.addEventListener('keyup', (event) => {
        if (event.key === 'Enter') sendTextReply();
    });

    // Permissions Modal
    document.getElementById('grantPermissionsBtn')?.addEventListener('click', setupMediaDevices);

    // Recording Buttons (hidden/repurposed for continuous mode)
    const voiceReplyBtn = document.getElementById('voiceReplyBtn');
    const stopRecordingBtn = document.getElementById('stopRecordingBtn');
    if(voiceReplyBtn) voiceReplyBtn.style.display = 'none';
    if(stopRecordingBtn) stopRecordingBtn.style.display = 'none';
    
    // --- Add new event listener for Upgrade Plan button ---
    document.getElementById('upgradePlanBtn')?.addEventListener('click', showPaymentModal);
}

function initForms() {
    const resumeUploadForm = document.getElementById('resumeUploadForm');
    if (resumeUploadForm) {
        resumeUploadForm.addEventListener('submit', (e) => {
            e.preventDefault();
            uploadResumeAndAnalyze();
        });
    }
}

// --- UI Navigation & State ---

function navigateTo(sectionId) {
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
        if (item.getAttribute('data-target') === sectionId) {
            item.classList.add('active');
        }
    });

    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    const targetElement = document.getElementById(sectionId);
    if (targetElement) {
        targetElement.classList.add('active');
        // Special actions after navigation
        if (sectionId === 'history') {
             loadProgressHistory(); // Load history data when navigating to history tab
        }
         if (sectionId === 'mock-interview' && !state.videoStream) {
            // If navigating to interview and stream isn't setup, prompt for permissions
            // showPermissionsModal(); // This is now triggered by buttons explicitly
        }
    } else {
        console.error(`Navigation target not found: ${sectionId}`);
    }
}

function unlockSection(sectionId) {
    const navItem = document.getElementById(`nav-${sectionId}`);
    if (navItem) {
        const lockIcon = navItem.querySelector('.status-indicator');
        if (lockIcon && lockIcon.classList.contains('locked')) {
            lockIcon.classList.remove('locked');
            lockIcon.classList.add('unlocked');
            lockIcon.innerHTML = '<i class="fas fa-check"></i>';
        }
    }
}

function lockSection(sectionId) {
     const navItem = document.getElementById(`nav-${sectionId}`);
    if (navItem) {
        const lockIcon = navItem.querySelector('.status-indicator');
        if (lockIcon && lockIcon.classList.contains('unlocked')) {
            lockIcon.classList.remove('unlocked');
            lockIcon.classList.add('locked');
            lockIcon.innerHTML = '<i class="fas fa-lock"></i>';
        }
    }
}

function checkForExistingSession() {
    const savedSessionId = localStorage.getItem('irisSessionId');
    if (savedSessionId) {
        console.log(`Found existing session ID: ${savedSessionId}`);
        state.sessionId = savedSessionId;
        checkAnalysisStatus(savedSessionId); // Check if analysis was completed previously
    } else {
        // Lock sections that depend on analysis if no session found
        lockSection('analysis');
        lockSection('prep-plan');
        lockSection('mock-interview');
        lockSection('performance');
        lockSection('history');
    }
}

// --- API Communication ---

// Replace this entire function in app.js
// --- Updated uploadResumeAndAnalyze function ---
function uploadResumeAndAnalyze() {
    // Check feature access first
    if (!checkFeatureAccess('resumeAnalyses')) {
        return;
    }

    // Get user authentication data
    const user = firebase.auth().currentUser;
    if (!user) {
        showMessage('Please sign in to use this feature', 'warning');
        if (typeof irisAuth !== 'undefined' && typeof irisAuth.showSignInModal === 'function') {
            irisAuth.showSignInModal();
        }
        return;
    }

    const form = document.getElementById('resumeUploadForm');
    if (!form) {
        console.error("resumeUploadForm not found");
        return;
    }
    const formData = new FormData(form);
    const progressContainer = document.getElementById('uploadProgress');
    const progressBar = progressContainer?.querySelector('.progress-bar');
    const progressMessage = document.getElementById('progressMessage');

    if (!progressContainer || !progressBar || !progressMessage) {
        console.error("Progress UI elements not found.");
        return;
    }

    // Basic validation - Check if file exists in FormData
    const resumeFile = formData.get('resumeFile');
    if (!resumeFile || typeof resumeFile === 'string' || resumeFile.size === 0) {
        showMessage("Please select a resume file.", 'warning');
        return;
    }
    if (!formData.get('jobDescription')) {
        showMessage("Please provide a job description.", 'warning');
        return;
    }

    // Add user ID to request
    formData.append('userId', user.uid);
    console.log(`Appending userId: ${user.uid} to FormData`);

    // Reset and show progress bar
    progressContainer.style.display = 'block';
    progressBar.style.width = '10%';
    progressBar.classList.remove('bg-success', 'bg-danger', 'bg-warning'); // Reset colors
    progressMessage.textContent = 'Uploading files...';

    // Disable button during upload
    const analyzeBtn = document.getElementById('analyzeBtn');
    if (analyzeBtn) analyzeBtn.disabled = true; analyzeBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...'; // Add spinner

    fetch(`${API_BASE_URL}/analyze-resume`, {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(errData => {
                if (errData.limitReached) {
                     showMessage(errData.error || 'Usage limit reached.', 'warning');
                     showUpgradeModal('resumeAnalyses');
                     throw new Error('Limit Reached');
                }
                throw new Error(errData.error || `Analysis request failed (${response.status})`);
            }).catch((jsonParseError) => {
                console.error("Could not parse error JSON from backend:", jsonParseError);
                if (jsonParseError.message === 'Limit Reached') {
                    throw jsonParseError;
                }
                throw new Error(`Analysis request failed (${response.status} ${response.statusText})`);
            });
        }
        return response.json();
    })
    .then(data => { // 'data' contains { sessionId, status, message, usageInfo }
        console.log('Upload response:', data); // Log includes usageInfo now
        if (!data.sessionId) {
            throw new Error("Backend did not return a valid session ID.");
        }

        // Set session ID in the global state
        state.sessionId = data.sessionId;
        console.log("Session ID stored in state:", state.sessionId);

        // *** FIX ISSUE 1: Update local usage state from backend response ***
        if (data.usageInfo && typeof irisAuth !== 'undefined' && irisAuth.getUserProfile()?.usage?.resumeAnalyses) {
            // Update local auth state directly
            authState.userProfile.usage.resumeAnalyses.used = data.usageInfo.used;
            authState.userProfile.usage.resumeAnalyses.limit = data.usageInfo.limit; // Ensure limit is also synced if it changes
            console.log("Updated local 'resumeAnalyses' usage state from backend response:", authState.userProfile.usage.resumeAnalyses);
        } else {
             console.warn("Could not update local usage state: usageInfo missing in response or local profile structure invalid.");
             // Consider reloading the profile as a fallback if needed: irisAuth.loadUserProfile(user);
        }
        // *** END FIX ISSUE 1 ***

        // Update usage display with the potentially updated local state
        updateUsageDisplay();

        progressMessage.textContent = 'Analyzing resume...';
        pollAnalysisStatus(data.sessionId); // Start polling backend for analysis progress

        // Note: analyzeBtn state is now handled within pollAnalysisStatus
    })
    .catch(error => {
        console.error('Error initiating resume analysis:', error); // Changed log message

        // Don't show generic error if it was a limit reached error
        if (error.message !== 'Limit Reached') {
             if(progressMessage) progressMessage.textContent = `Error: ${error.message}`;
             if(progressBar) progressBar.classList.add('bg-danger'); progressBar.style.width = '100%';
             showMessage(`Error starting analysis: ${error.message}`, 'danger');
        } else {
             if(progressMessage) progressMessage.textContent = `Limit reached. Please upgrade.`;
             if(progressBar) progressBar.classList.add('bg-warning'); progressBar.style.width = '100%';
        }

        // *** FIX ISSUE 2 (Partial): Re-enable button on *initial* fetch error ***
        if (analyzeBtn) {
            analyzeBtn.disabled = false;
            analyzeBtn.innerHTML = 'Analyze Resume'; // Reset text
        }
    });
}                                    

function pollAnalysisStatus(sessionId) {
    const progressContainer = document.getElementById('uploadProgress');
    const progressBar = progressContainer?.querySelector('.progress-bar');
    const progressMessage = document.getElementById('progressMessage');
    const analyzeBtn = document.getElementById('analyzeBtn'); // Get button reference

    if (!progressContainer || !progressBar || !progressMessage) return; // Exit if elements aren't there

    const checkStatus = () => {
        // If session changed or cleared, stop polling
        if (state.sessionId !== sessionId) {
            console.log("Session changed, stopping polling for", sessionId);
            // *** FIX ISSUE 2: Ensure button is reset if polling stops unexpectedly ***
            if (analyzeBtn) {
                analyzeBtn.disabled = false;
                analyzeBtn.innerHTML = 'Analyze Resume';
            }
            return;
        }

        fetch(`${API_BASE_URL}/get-analysis-status/${sessionId}`)
        .then(response => {
            if (response.status === 404) {
                 localStorage.removeItem('irisSessionId'); // Session expired/not found
                 throw new Error('Session not found or expired. Please upload again.');
            }
            if (!response.ok) {
                 throw new Error(`Network response was not ok (${response.status})`);
            }
            return response.json();
        })
        .then(statusData => {
            console.log('Status update:', statusData);

            progressBar.style.width = `${statusData.progress || 0}%`;

            if (statusData.status === 'completed') {
                progressMessage.textContent = 'Analysis complete!';
                progressBar.classList.add('bg-success');

                unlockSection('analysis');
                unlockSection('prep-plan');
                unlockSection('mock-interview'); // Unlock interview now

                loadAnalysisResults(sessionId);
                loadPreparationPlan(sessionId);
                checkAndUnlockHistorySections(sessionId); // Check history before unlocking

                // *** FIX ISSUE 2: Reset button on completion ***
                if (analyzeBtn) {
                    analyzeBtn.disabled = false;
                    analyzeBtn.innerHTML = 'Analyze Resume';
                }

                setTimeout(() => {
                    navigateTo('analysis');
                    progressContainer.style.display = 'none'; // Hide progress bar
                }, 1500);

            } else if (statusData.status === 'failed') {
                const errorMsg = statusData.errors?.[0] || 'Analysis failed';
                progressMessage.textContent = `Error: ${errorMsg}`;
                progressBar.classList.add('bg-danger');
                showMessage(`Analysis failed: ${errorMsg}`, 'danger');

                // *** FIX ISSUE 2: Reset button on failure ***
                if (analyzeBtn) {
                    analyzeBtn.disabled = false;
                    analyzeBtn.innerHTML = 'Analyze Resume';
                }

            } else { // Still processing
                progressMessage.textContent = `Analyzing resume (${statusData.progress || 0}%)...`;
                // Schedule next poll only if still processing
                setTimeout(checkStatus, 3000); // Poll slightly less frequently
            }
        })
        .catch(error => {
            console.error('Error checking status:', error);
            progressMessage.textContent = `Error: ${error.message}`;
            progressBar.classList.add('bg-danger');
            showMessage(`Error checking analysis status: ${error.message}`, 'danger');

             // *** FIX ISSUE 2: Reset button on polling error ***
             if (analyzeBtn) {
                analyzeBtn.disabled = false;
                analyzeBtn.innerHTML = 'Analyze Resume';
            }

            if (error.message.includes('Session not found')) {
                 // Reset relevant UI? Maybe lock sections again.
                 lockAllSections();
                 navigateTo('upload');
            }
        });
    };
    checkStatus(); // Start the first check
}

// Check status of an existing session on page load
function checkAnalysisStatus(sessionId) {
    fetch(`${API_BASE_URL}/get-analysis-status/${sessionId}`)
    .then(response => {
        if (response.status === 404) {
            localStorage.removeItem('irisSessionId');
            state.sessionId = null;
            lockSection('analysis'); // Lock sections again
            lockSection('prep-plan');
            lockSection('mock-interview');
            lockSection('performance');
            lockSection('history');
            return null; // Stop processing
        }
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
    })
    .then(statusData => {
        if (!statusData) return; // Exit if session was not found

        if (statusData.status === 'completed') {
            console.log("Existing session analysis complete. Loading data.");
            unlockSection('analysis');
            unlockSection('prep-plan');
            unlockSection('mock-interview');
            // Check if there's interview history to unlock performance/history
            fetch(`${API_BASE_URL}/get-progress-history/${sessionId}`)
                .then(res => res.ok ? res.json() : null)
                .then(historyData => {
                    if (historyData && historyData.interviews?.length > 0) {
                         unlockSection('performance'); // Unlock based on existing history
                         unlockSection('history');
                    }
                });

            loadAnalysisResults(sessionId);
            loadPreparationPlan(sessionId);
        } else if (statusData.status === 'processing') {
             console.log("Existing session still processing. Restarting polling.");
             // If user reloads page while processing
             document.getElementById('uploadProgress').style.display = 'block'; // Show progress bar again
             pollAnalysisStatus(sessionId);
        } else {
            // Failed or unknown status, treat as needing new upload
             localStorage.removeItem('irisSessionId');
             state.sessionId = null;
        }
    })
    .catch(error => {
        console.error('Error checking existing session status:', error);
        localStorage.removeItem('irisSessionId');
        state.sessionId = null;
    });
}


function loadAnalysisResults(sessionId) {
    fetch(`${API_BASE_URL}/get-full-analysis/${sessionId}`)
    .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
    })
    .then(data => {
        console.log('Analysis results loaded:', data);
        displayAnalysisResults(data); // Separate display logic
    })
    .catch(error => {
        console.error('Error loading full analysis results:', error);
        document.getElementById('analysis').innerHTML = `<div class="alert alert-danger">Error loading analysis results: ${error.message}</div>`;
    });
}

function loadPreparationPlan(sessionId) {
     fetch(`${API_BASE_URL}/get-full-analysis/${sessionId}`)
    .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
    })
    .then(data => {
        console.log('Prep plan data loaded:', data);
        displayPreparationPlan(data); // Separate display logic
    })
    .catch(error => {
        console.error('Error loading preparation plan data:', error);
         document.getElementById('prep-plan').innerHTML = `<div class="alert alert-danger">Error loading preparation plan: ${error.message}</div>`;
    });
}

function rewriteResumeSection(section) {
    if (!state.sessionId) {
        alert('No active session. Please analyze a resume first.');
        return;
    }
    console.log(`Requesting rewrite for section: ${section}`);
    // Add a loading indicator?
    const button = document.querySelector(`.rewrite-section-btn[data-section="${section}"]`);
    if(button) button.textContent = 'Rewriting...'; button.disabled = true;

    fetch(`${API_BASE_URL}/rewrite-resume-section`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sessionId: state.sessionId, section: section })
    })
    .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
    })
    .then(data => {
        console.log('Rewrite result:', data);
        displayRewriteResult(data, section); // Show result (e.g., in a modal)
    })
    .catch(error => {
        console.error('Error rewriting resume section:', error);
        alert(`Error rewriting section: ${error.message}`);
    })
    .finally(() => {
         if(button) button.textContent = 'Rewrite this section'; button.disabled = false; // Reset button
    });
}

// --- Display Functions ---

// --- Function to modify in app.js ---
// Replace the existing displayAnalysisResults function

function displayAnalysisResults(data) {
    if (!data || !data.matchResults) {
        document.getElementById('analysis').innerHTML = '<div class="alert alert-warning">Analysis data is missing or incomplete.</div>';
        return;
    }
    const matchResults = data.matchResults;

    // Match Score
    const scoreValue = matchResults.matchScore || 0;
    document.getElementById('matchScore').textContent = scoreValue;
    document.querySelector('.match-score-circle')?.style.setProperty('--percentage', `${scoreValue}%`);
    let scoreDesc = "Analysis";
    if (scoreValue >= 80) scoreDesc = "Excellent Match";
    else if (scoreValue >= 60) scoreDesc = "Good Match";
    else if (scoreValue >= 40) scoreDesc = "Fair Match";
    else scoreDesc = "Needs Improvement";
    document.getElementById('matchScoreDescription').textContent = scoreDesc;

    // Match Analysis
    document.getElementById('matchAnalysis').textContent = matchResults.matchAnalysis || 'No analysis summary available.';

    // Key Strengths
    const keyStrengthsList = document.getElementById('keyStrengthsList');
    keyStrengthsList.innerHTML = ''; // Clear loading/previous
    if (matchResults.keyStrengths?.length > 0) {
        matchResults.keyStrengths.forEach(strength => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.innerHTML = `<i class="fas fa-check-circle text-success me-2"></i><strong></strong>: `;
            // Safely add text
            li.querySelector('strong').textContent = strength.strength || 'N/A';
            li.appendChild(document.createTextNode(strength.relevance || 'N/A'));
            keyStrengthsList.appendChild(li);
        });
    } else {
        keyStrengthsList.innerHTML = '<li class="list-group-item text-muted">No specific strengths highlighted for this job.</li>';
    }

    // Skill Gaps
    const skillGapsList = document.getElementById('skillGapsList');
    skillGapsList.innerHTML = ''; // Clear loading/previous
    if (matchResults.skillGaps?.length > 0) {
        matchResults.skillGaps.forEach(gap => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            let importanceIcon = 'fa-exclamation-circle text-warning'; // Medium default
            if (gap.importance?.toLowerCase() === 'high') importanceIcon = 'fa-times-circle text-danger';
            if (gap.importance?.toLowerCase() === 'low') importanceIcon = 'fa-info-circle text-info';
            li.innerHTML = `<i class="fas ${importanceIcon} me-2"></i><strong></strong> (${gap.importance || 'N/A'}): `;
             // Safely add text
            li.querySelector('strong').textContent = gap.missingSkill || 'N/A';
            li.appendChild(document.createTextNode(gap.suggestion || 'N/A'));
            skillGapsList.appendChild(li);
        });
    } else {
        skillGapsList.innerHTML = '<li class="list-group-item text-muted">No critical skill gaps identified.</li>';
    }

    // --- Resume Improvements (Button Removed) ---
    const resumeImprovementsContainer = document.getElementById('resumeImprovements');
    resumeImprovementsContainer.innerHTML = ''; // Clear loading/previous
    if (matchResults.resumeImprovements?.length > 0) {
        const accordion = document.createElement('div');
        accordion.className = 'accordion';
        accordion.id = 'resumeImprovementsAccordion';

        matchResults.resumeImprovements.forEach((improvement, index) => {
            const item = document.createElement('div');
            item.className = 'accordion-item';
            const headerId = `resumeImproveHeader-${index}`;
            const collapseId = `resumeImproveCollapse-${index}`;

            const section = improvement.section || 'General';
            const issue = improvement.issue || 'Suggestion';
            const recommendation = improvement.recommendation || 'N/A';
            const example = improvement.example;

            // Use textContent for safety
            item.innerHTML = `
                <h2 class="accordion-header" id="${headerId}">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="false" aria-controls="${collapseId}">
                        <i class="fas fa-edit me-2"></i> Improve: <strong></strong> - <span></span>
                    </button>
                </h2>
                <div id="${collapseId}" class="accordion-collapse collapse" aria-labelledby="${headerId}" data-bs-parent="#resumeImprovementsAccordion">
                    <div class="accordion-body">
                        <p><strong>Recommendation:</strong> <span class="recommendation-text"></span></p>
                        ${example ? `<p><strong>Example:</strong> <em><span class="example-text"></span></em></p>` : ''}
                        </div>
                </div>`;

            // Safely populate text content
            item.querySelector('strong').textContent = section;
            item.querySelector('h2 span').textContent = issue; // Assuming the span after strong is for the issue
            item.querySelector('.recommendation-text').textContent = recommendation;
            if (example) {
                 item.querySelector('.example-text').textContent = example;
            }

            accordion.appendChild(item);
        });
        resumeImprovementsContainer.appendChild(accordion);
        // No need to re-attach event listeners for the removed button
    } else {
        resumeImprovementsContainer.innerHTML = '<div class="alert alert-light">No specific resume improvement suggestions provided for this job.</div>';
    }

    // const analysisSection = document.getElementById('analysis');
    // if(analysisSection && !document.getElementById('resumeResourcesCard')) { // Prevent adding multiple times
    //      const resourceCard = document.createElement('div');
    //      resourceCard.id = 'resumeResourcesCard';
    //      resourceCard.className = 'card mb-4';
    //      resourceCard.innerHTML = `
    //          <div class="card-header"><h3>Resume Resources</h3></div>
    //          <div class="card-body">
    //              <p>Consider these resources for professional resume templates:</p>
    //              <ul>
    //                  <li><a href="https://resumake.io/" target="_blank" rel="noopener noreferrer">Resumake</a></li>
    //                  <li><a href="https://www.canva.com/resumes/templates/" target="_blank" rel="noopener noreferrer">Canva Resume Templates</a></li>
    //                  <li><a href="https://zety.com/resume-templates" target="_blank" rel="noopener noreferrer">Zety Resume Templates</a></li>
    //              </ul>
    //          </div>`;
    //      // Append after resume improvements, before the final button
    //      const nextButton = analysisSection.querySelector('#viewPrepPlanBtn');
    //      if(nextButton) {
    //           nextButton.parentNode.insertBefore(resourceCard, nextButton);
    //      } else {
    //            analysisSection.querySelector('.container').appendChild(resourceCard); // Fallback append
    //      }
    // }


}


// --- Function to modify in app.js ---
// Replace the existing displayPreparationPlan function

// --- Function to modify in app.js ---
// Replace the existing displayPreparationPlan function

function displayPreparationPlan(data) {
    if (!data || !data.prepPlan) {
        document.getElementById('prep-plan').innerHTML = '<div class="alert alert-warning">Preparation plan data is missing or incomplete.</div>';
        return;
    }
    const prepPlan = data.prepPlan;

    // --- Focus Areas --- (Keep as before)
    const focusAreasList = document.getElementById('focusAreasList');
    if (focusAreasList) {
        focusAreasList.innerHTML = '';
        if (prepPlan.focusAreas?.length > 0) {
            prepPlan.focusAreas.forEach(area => {
                const li = document.createElement('li');
                li.innerHTML = `<i class="fas fa-bullseye me-2"></i>`;
                li.appendChild(document.createTextNode(area || 'N/A')); // Handle potential null/undefined
                focusAreasList.appendChild(li);
            });
        } else {
            focusAreasList.innerHTML = '<li class="text-muted">No specific focus areas provided.</li>';
        }
    }

    // --- Likely Questions (Updated) --- (Keep as before)
    const likelyQuestionsContainer = document.getElementById('likelyQuestions');
    if (likelyQuestionsContainer) {
        likelyQuestionsContainer.innerHTML = ''; // Clear previous
        if (prepPlan.likelyQuestions?.length > 0) {
            const accordion = document.createElement('div');
            accordion.className = 'accordion';
            accordion.id = 'likelyQuestionsAccordion';
            prepPlan.likelyQuestions.forEach((item, index) => {
                const accordionItem = document.createElement('div');
                accordionItem.className = 'accordion-item';
                const headerId = `qHeader-${index}`;
                const collapseId = `qCollapse-${index}`;

                const category = item.category || "General";
                const question = item.question || "No question text.";
                const guidance = item.guidance || "No specific guidance provided.";

                // Create button and content safely
                const button = document.createElement('button');
                button.className = 'accordion-button collapsed';
                button.type = 'button';
                button.dataset.bsToggle = 'collapse';
                button.dataset.bsTarget = `#${collapseId}`;
                button.setAttribute('aria-expanded', 'false');
                button.setAttribute('aria-controls', collapseId);
                button.innerHTML = `<span class="badge bg-secondary me-2"></span> `; // Placeholder for category
                button.querySelector('.badge').textContent = category; // Set category safely
                button.appendChild(document.createTextNode(question)); // Set question safely

                const header = document.createElement('h2');
                header.className = 'accordion-header';
                header.id = headerId;
                header.appendChild(button);

                const collapseDiv = document.createElement('div');
                collapseDiv.id = collapseId;
                collapseDiv.className = 'accordion-collapse collapse';
                collapseDiv.setAttribute('aria-labelledby', headerId);
                collapseDiv.dataset.bsParent = '#likelyQuestionsAccordion';

                const bodyDiv = document.createElement('div');
                bodyDiv.className = 'accordion-body';
                bodyDiv.innerHTML = `<strong><i class="fas fa-info-circle me-1"></i>Guidance:</strong>`;
                const guidanceP = document.createElement('p');
                guidanceP.textContent = guidance; // Set guidance safely
                bodyDiv.appendChild(guidanceP);
                collapseDiv.appendChild(bodyDiv);

                accordionItem.appendChild(header);
                accordionItem.appendChild(collapseDiv);
                accordion.appendChild(accordionItem);
            });
            likelyQuestionsContainer.appendChild(accordion);
        } else {
            likelyQuestionsContainer.innerHTML = '<div class="alert alert-light">No likely questions generated for this plan.</div>';
        }
    }

    // --- Concepts to Study --- (Keep as before)
    const conceptsToStudyContainer = document.getElementById('conceptsToStudy');
    if (conceptsToStudyContainer) {
        conceptsToStudyContainer.innerHTML = ''; // Clear
        if (prepPlan.conceptsToStudy) {
            const conceptsContent = formatConcepts(prepPlan.conceptsToStudy); // Use existing helper
            if (conceptsContent) {
                conceptsToStudyContainer.appendChild(conceptsContent);
            } else {
                conceptsToStudyContainer.innerHTML = '<div class="alert alert-light">No specific concepts to study listed.</div>';
            }
        } else {
            conceptsToStudyContainer.innerHTML = '<div class="alert alert-light">No specific concepts to study listed.</div>';
        }
    }

    // --- Gap Strategies Section --- (Keep as before)
     const gapStrategiesContainer = document.getElementById('gapStrategies');
     if (gapStrategiesContainer) {
        gapStrategiesContainer.innerHTML = ''; // Clear loading/previous
        if (prepPlan.gapStrategies?.length > 0) {
            const listGroup = document.createElement('div');
            listGroup.className = 'list-group list-group-flush'; // Flush looks good inside card
            prepPlan.gapStrategies.forEach(item => {
                const listItem = document.createElement('div');
                listItem.className = 'list-group-item';
                // Use textContent for safety where possible
                listItem.innerHTML = `<h6 class="mb-1"><i class="fas fa-exclamation-triangle text-warning me-2"></i> Gap: <span class="gap-text"></span></h6>`;
                listItem.querySelector('.gap-text').textContent = item.gap || 'N/A';

                const strategyP = document.createElement('p');
                strategyP.className = 'mb-1';
                strategyP.innerHTML = `<strong><i class="fas fa-comments me-1"></i> Suggested Strategy:</strong> `;
                strategyP.appendChild(document.createTextNode(item.strategy || 'No specific strategy provided.'));
                listItem.appendChild(strategyP);

                const focusSmall = document.createElement('small');
                focusSmall.className = 'text-muted';
                focusSmall.innerHTML = `<strong><i class="fas fa-book-open me-1"></i> Focus for Prep:</strong> `;
                focusSmall.appendChild(document.createTextNode(item.focus_during_prep || 'Review related concepts.'));
                listItem.appendChild(focusSmall);

                listGroup.appendChild(listItem);
            });
             gapStrategiesContainer.appendChild(listGroup);
        } else {
             gapStrategiesContainer.innerHTML = '<div class="alert alert-light">No specific gap strategies provided.</div>';
        }
    }


    // --- REMOVE Old Timeline Display Logic ---
    const preparationTimelineContainer = document.getElementById('preparationTimeline');
    if (preparationTimelineContainer) {
        // Clear the container instead of populating it
        preparationTimelineContainer.innerHTML = ''; // Remove old content
        // Maybe hide the parent card if it's now empty, or add placeholder text for dynamic one
        const parentCard = preparationTimelineContainer.closest('.card');
        if (parentCard) parentCard.style.display = 'none'; // Hide the old timeline card entirely
    }

    // --- Make Dynamic Timeline Controls Visible ---
    const dynamicTimelineControls = document.getElementById('dynamicTimelineControls');
    if (dynamicTimelineControls) {
        dynamicTimelineControls.style.display = 'block'; // Show the input and button

        // Ensure listener is attached only once or re-attach if needed
        const generateBtn = document.getElementById('generateDynamicTimelineBtn');

        // Clone and replace to remove old listeners before adding a new one
        if (generateBtn) {
            const newBtn = generateBtn.cloneNode(true);
            generateBtn.parentNode.replaceChild(newBtn, generateBtn);
            newBtn.addEventListener('click', handleGenerateDynamicTimeline);
            console.log("Event listener attached to generateDynamicTimelineBtn");
        }

    } else {
        console.error("Dynamic timeline controls container not found!");
    }

}

// --- Add NEW Handler function ---
function handleGenerateDynamicTimeline() {
    const daysInput = document.getElementById('daysUntilInterview');
    const dynamicTimelineArea = document.getElementById('dynamicTimelineArea');
    const generateBtn = document.getElementById('generateDynamicTimelineBtn'); // Get button ref again

    if (!daysInput || !dynamicTimelineArea || !generateBtn) {
        console.error("Timeline input/area/button elements not found.");
        return;
    }

    const days = daysInput.value.trim();
    if (!days || isNaN(parseInt(days)) || parseInt(days) <= 0 || parseInt(days) > 90) {
         alert("Please enter a valid number of days (1-90).");
         daysInput.focus(); // Focus the input for correction
         return;
    }

    if (!state.sessionId) {
        alert("No active session found. Please analyze resume first.");
        return;
    }

    console.log(`Requesting dynamic timeline for ${days} days, session ${state.sessionId}`);

    // Show loading state
    dynamicTimelineArea.innerHTML = `
        <div class="text-center p-3">
             <div class="spinner-border text-primary" role="status">
                 <span class="visually-hidden">Loading...</span>
             </div>
             <p class="mt-2">Generating your personalized timeline (this may take a moment)...</p>
         </div>`;
    generateBtn.disabled = true;
    generateBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...'; // Add spinner to button

    // Call the new backend endpoint
    fetch(`${API_BASE_URL}/generate-dynamic-timeline`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            sessionId: state.sessionId,
            days: days
        })
    })
    .then(response => {
        if (!response.ok) {
            // Try to get error from JSON body
             return response.json().then(errData => {
                 // Use the specific error from backend if available
                 throw new Error(errData.error || `Timeline generation failed (${response.status})`);
            }).catch(() => {
                 // Fallback if response wasn't JSON
                 throw new Error(`Timeline generation failed (${response.status})`);
             });
        }
        return response.json();
    })
    .then(data => {
        console.log("Dynamic timeline data received:", data);
        displayDynamicTimeline(data); // Display the result
    })
    .catch(error => {
        console.error("Error generating dynamic timeline:", error);
        dynamicTimelineArea.innerHTML = `<div class="alert alert-danger">Error generating timeline: ${error.message}</div>`;
    })
    .finally(() => {
         // Restore button state
         generateBtn.disabled = false;
         generateBtn.textContent = 'Generate Dynamic Timeline'; // Restore original text
    });
}

// --- Add NEW Display function ---
function displayDynamicTimeline(data) {
    const dynamicTimelineArea = document.getElementById('dynamicTimelineArea');
    if (!dynamicTimelineArea) return;
    dynamicTimelineArea.innerHTML = ''; // Clear loading/previous

    if (data.error) {
         dynamicTimelineArea.innerHTML = `<div class="alert alert-warning">Could not generate timeline: ${data.error}</div>`;
         return;
    }

    if (!data || !data.timeline || data.timeline.length === 0) {
        dynamicTimelineArea.innerHTML = '<div class="alert alert-light">No timeline schedule was generated. Please try again or adjust the number of days.</div>';
        return;
    }

    const timelineContainer = document.createElement('div');
    timelineContainer.className = 'dynamic-timeline mt-3'; // Add a class for styling

    data.timeline.forEach(dayEntry => {
        const dayCard = document.createElement('div');
        // Add alternating background for readability if desired
        dayCard.className = 'card timeline-day-card mb-3';

        const cardHeader = document.createElement('div');
        cardHeader.className = 'card-header d-flex justify-content-between align-items-center p-2'; // Reduced padding
        // Use textContent for safety
        cardHeader.innerHTML = `<h5 class="mb-0 day-header"></h5> <span class="badge bg-info focus-badge"></span>`;
        cardHeader.querySelector('.day-header').textContent = `Day ${dayEntry.day}`;
        cardHeader.querySelector('.focus-badge').textContent = dayEntry.focus || 'General Prep';


        const cardBody = document.createElement('div');
        cardBody.className = 'card-body p-2'; // Reduced padding

        const scheduleList = document.createElement('ul');
        scheduleList.className = 'list-group list-group-flush schedule-list';

        if (dayEntry.schedule && dayEntry.schedule.length > 0) {
            dayEntry.schedule.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'list-group-item schedule-item py-1 px-0'; // Reduced padding
                // Use textContent for safety
                listItem.innerHTML = `${item.time_slot ? `<span class="time-slot"></span> ` : ''}<span class="task-description"></span>`;
                if(item.time_slot) listItem.querySelector('.time-slot').textContent = `${item.time_slot}:`;
                listItem.querySelector('.task-description').textContent = item.task || 'N/A';
                scheduleList.appendChild(listItem);
            });
        } else {
            scheduleList.innerHTML = '<li class="list-group-item text-muted py-1 px-0">No specific tasks scheduled. Focus on the day\'s theme.</li>';
        }

        cardBody.appendChild(scheduleList);

        if (dayEntry.notes) {
            const notesP = document.createElement('p');
            notesP.className = 'mt-2 mb-0 text-muted small fst-italic notes-text'; // Use class for styling
            notesP.innerHTML = `<i class="far fa-sticky-note me-1"></i> `;
            notesP.appendChild(document.createTextNode(dayEntry.notes)); // Safe text
            cardBody.appendChild(notesP);
        }

        dayCard.appendChild(cardHeader);
        dayCard.appendChild(cardBody);
        timelineContainer.appendChild(dayCard);
    });

    if (data.estimated_total_hours) {
        const estimateP = document.createElement('p');
        estimateP.className = 'text-center text-muted mt-3 total-hours';
        estimateP.textContent = `Estimated Total Preparation Time: ~${data.estimated_total_hours} hours`;
        timelineContainer.appendChild(estimateP);
    }

    dynamicTimelineArea.appendChild(timelineContainer);
}


function displayRewriteResult(rewriteData, section) {
    // Example: Show in a modal (requires a modal structure in index.html)
    /*
    const modalTitle = document.getElementById('rewriteModalLabel');
    const modalBody = document.getElementById('rewriteModalBody');
    if (modalTitle && modalBody) {
        modalTitle.textContent = `AI Rewrite Suggestion for: ${section}`;
        modalBody.innerHTML = `
            <h5>Original:</h5>
            <pre><code>${rewriteData.original || '[Not Available]'}</code></pre>
            <hr>
            <h5>Suggested Improvement:</h5>
            <pre><code>${rewriteData.improved || '[Not Available]'}</code></pre>
            <hr>
            <h5>Rationale:</h5>
            <ul>
                ${rewriteData.explanations?.map(ex => `<li><strong>${ex.change || ''}:</strong> ${ex.rationale || ''}</li>`).join('') || '<li>No specific rationale provided.</li>'}
            </ul>
        `;
        const rewriteModal = new bootstrap.Modal(document.getElementById('rewriteModal'));
        rewriteModal.show();
    } else { // Fallback to alert
        alert(`Rewritten ${section}:\n\n${rewriteData.improved}\n\nRationale: ${rewriteData.explanations?.[0]?.rationale || 'N/A'}`);
    }
    */
     // Simple alert for now
    alert(`AI Suggestion for ${section}:\n\n${rewriteData.improved}\n\nRationale: ${rewriteData.explanations?.[0]?.rationale || 'N/A'}`);

}

// Helper to format concepts (handles object or array)
function formatConcepts(concepts) {
    const container = document.createElement('div');
    if (Array.isArray(concepts) && concepts.length > 0) {
        const ul = document.createElement('ul');
        ul.className = 'list-group list-group-flush';
        concepts.forEach(concept => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
             li.innerHTML = `<i class="fas fa-lightbulb me-2"></i>${concept}`;
            ul.appendChild(li);
        });
        container.appendChild(ul);
        return container;
    } else if (typeof concepts === 'object' && concepts !== null && Object.keys(concepts).length > 0) {
        for (const category in concepts) {
            const catDiv = document.createElement('div');
            catDiv.className = 'mb-3';
            catDiv.innerHTML = `<h6>${category}</h6>`;
            const subList = document.createElement('ul');
            subList.className = 'list-group list-group-flush';
            const items = Array.isArray(concepts[category]) ? concepts[category] : [concepts[category]];
            items.forEach(item => {
                 const li = document.createElement('li');
                 li.className = 'list-group-item';
                 li.innerHTML = `<i class="fas fa-lightbulb me-2"></i>${item}`;
                 subList.appendChild(li);
            });
            catDiv.appendChild(subList);
            container.appendChild(catDiv);
        }
        return container;
    }
    return null; // No valid concepts found
}


// Helper to format timeline (handles object or array)
function formatTimeline(timelineData) {
    const container = document.createElement('div');
    container.className = 'timeline'; // Add base class for potential styling

     if (Array.isArray(timelineData) && timelineData.length > 0) {
         timelineData.forEach(item => {
             const timelineItem = document.createElement('div');
             timelineItem.className = 'timeline-item'; // Use classes from styles.css
             const timelineContent = document.createElement('div');
             timelineContent.className = 'timeline-content';

             if (typeof item === 'string') {
                timelineContent.innerHTML = `<i class="far fa-clock me-2"></i>${item}`;
             } else if (typeof item === 'object' && item !== null) {
                 // Assuming structure like { period: "...", tasks: ["..."] } or similar
                 const title = item.period || item.title || Object.keys(item)[0];
                 const content = item.tasks || item.details || item[title];
                 timelineContent.innerHTML = `<div class="timeline-header"><i class="far fa-calendar-alt me-2"></i>${title}</div>`;
                 if (Array.isArray(content)) {
                     const ul = document.createElement('ul');
                     content.forEach(task => ul.innerHTML += `<li>${task}</li>`);
                     timelineContent.appendChild(ul);
                 } else {
                      timelineContent.innerHTML += `<p>${content}</p>`;
                 }
             }
             timelineItem.appendChild(timelineContent);
             container.appendChild(timelineItem);
         });
        return container;
    } else if (typeof timelineData === 'object' && timelineData !== null && Object.keys(timelineData).length > 0) {
        for (const period in timelineData) {
            const timelineItem = document.createElement('div');
            timelineItem.className = 'timeline-item';
            const timelineContent = document.createElement('div');
            timelineContent.className = 'timeline-content';
            timelineContent.innerHTML = `<div class="timeline-header"><i class="far fa-calendar-alt me-2"></i>${period}</div>`;
             const activities = timelineData[period];
            if (Array.isArray(activities)) {
                const ul = document.createElement('ul');
                activities.forEach(activity => ul.innerHTML += `<li>${activity}</li>`);
                timelineContent.appendChild(ul);
            } else {
                timelineContent.innerHTML += `<p>${activities}</p>`;
            }
             timelineItem.appendChild(timelineContent);
            container.appendChild(timelineItem);
        }
        return container;
    }
    return null; // No valid timeline data
}

// --- Mock Interview Functions ---

function showPermissionsModal() {
    const modalElement = document.getElementById('permissionsModal');
    if(modalElement) {
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    } else {
        console.warn("Permissions modal not found. Attempting to get media directly.");
        // Fallback: try getting media directly, browser will prompt
        setupMediaDevices();
    }
}

function setupMediaDevices() {
    // Close the permissions modal if it exists and is shown
    const modalElement = document.getElementById('permissionsModal');
     if(modalElement) {
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        modalInstance?.hide();
    }

    console.log("Requesting media permissions...");
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            console.log("Media permissions granted.");
            state.videoStream = stream;

            const videoElement = document.getElementById('candidateVideo');
            if (videoElement) {
                videoElement.srcObject = stream;
                videoElement.play().catch(e => console.error("Video play error:", e)); // Handle autoplay restrictions
            }

            setupMediaRecorder(stream);

            // Only start the interview *after* media is set up
            startMockInterview();
        })
        .catch(error => {
            console.error('Error accessing media devices:', error);
            alert(`Could not access camera/microphone: ${error.message}\n\nPlease grant permissions and ensure no other app is using the devices.`);
            // Optionally navigate away from interview section or show error state
            navigateTo('prep-plan'); // Go back to prep plan
        });
}

function setupMediaRecorder(stream) {
    if (typeof MediaRecorder === 'undefined') {
        console.error("MediaRecorder is not supported in this browser.");
        alert("Voice input is not supported in your browser.");
        return; // Cannot proceed with recording
    }

    // --- Web Audio API Setup for VAD ---
    try {
        state.audioContext = state.audioContext || new (window.AudioContext || window.webkitAudioContext)();
        if (state.audioSourceNode) state.audioSourceNode.disconnect();
        if (state.analyserNode) state.analyserNode.disconnect();

        state.analyserNode = state.audioContext.createAnalyser();
        state.analyserNode.fftSize = FFT_SIZE;
        const bufferLength = state.analyserNode.frequencyBinCount;
        state.audioDataArray = new Uint8Array(bufferLength);
        console.log("VAD Analyser buffer length:", bufferLength);

        const audioTracks = stream.getAudioTracks();
        if (!audioTracks.length) throw new Error("No audio track found in stream for analysis.");
        state.audioSourceNode = state.audioContext.createMediaStreamSource(stream);
        state.audioSourceNode.connect(state.analyserNode);
        console.log("Web Audio API VAD setup complete.");
    } catch (e) {
        console.error("Failed to set up Web Audio API for VAD:", e);
        alert(`Failed to initialize audio analysis: ${e.message}. Voice detection may be less accurate.`);
        state.audioContext = null;
        state.analyserNode = null;
        state.audioSourceNode = null;
        state.audioDataArray = null;
    }
    // --- End Web Audio API Setup ---


    // --- MediaRecorder Setup (using audio-only stream) ---
    const audioTracksForRecorder = stream.getAudioTracks();
    if (!audioTracksForRecorder.length) {
        console.error("No audio track found for MediaRecorder.");
        alert("Could not find microphone track for recording.");
        return;
    }
    const audioStreamForRecorder = new MediaStream([audioTracksForRecorder[0]]);

    let options = { mimeType: 'audio/webm;codecs=opus' };
    if (!MediaRecorder.isTypeSupported(options.mimeType)) {
        console.warn(`${options.mimeType} not supported, trying audio/ogg`);
        options = { mimeType: 'audio/ogg;codecs=opus' };
        if (!MediaRecorder.isTypeSupported(options.mimeType)) {
            console.warn(`${options.mimeType} not supported, trying audio/webm (default)`);
            options = { mimeType: 'audio/webm' };
            if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                console.warn(`${options.mimeType} not supported, using browser default`);
                options = {};
            }
        }
    }
    console.log("Using MediaRecorder options:", options);

    try {
        state.mediaRecorder = new MediaRecorder(audioStreamForRecorder, options);

        state.mediaRecorder.ondataavailable = event => {
            if (event.data.size > 0) {
                state.audioChunks.push(event.data);
            } else {
                // console.log("Received empty audio chunk."); // Can be noisy
            }
        };

        // **** MODIFIED onstop handler ****
        state.mediaRecorder.onstop = () => {
            console.log("MediaRecorder stopped.");
            // --- Check speech *before* resetting flag ---
            const speechWasDetectedInThisSegment = state.speechDetectedInChunk;
            const currentAudioChunks = [...state.audioChunks]; // Copy chunks before clearing
            state.audioChunks = []; // Clear chunks immediately after stopping

            // --- Reset flag AFTER checking ---
            state.speechDetectedInChunk = false;

            // --- Make decision based on the check ---
            if (!speechWasDetectedInThisSegment || currentAudioChunks.length === 0) {
                console.warn(`No speech detected in last segment (flag=${speechWasDetectedInThisSegment}) or no audio data captured. Discarding.`);

                // Restart listening if the interview is still active and AI isn't talking
                if (state.isInterviewActive && !state.isAIResponding) {
                     console.log("No valid speech detected, restarting listening.");
                     setTimeout(() => {
                        if (state.isInterviewActive && !state.isAIResponding) {
                             startListeningAutomatically();
                        }
                     }, 500); // Small delay
                }
                return; // Don't process the empty/silent audio
            }

            // --- Process valid audio ---
            console.log(`Speech detected (flag=${speechWasDetectedInThisSegment}), processing ${currentAudioChunks.length} audio chunks.`);
            const mimeType = state.mediaRecorder.mimeType || options.mimeType || 'audio/webm';
            const audioBlob = new Blob(currentAudioChunks, { type: mimeType });

            processAudioResponse(audioBlob, mimeType); // Pass mimeType
        };
        // **** END MODIFIED onstop handler ****


        state.mediaRecorder.onerror = (event) => {
            console.error('MediaRecorder error:', event.error);
            alert(`Recording error: ${event.error.name} - ${event.error.message}`);
            state.isRecording = false;
            clearTimeout(state.silenceTimer);
            cancelAnimationFrame(state.vadAnimationFrameId);
            clearInterval(state.recordingTimer);
            state.speechDetectedInChunk = false; // Reset on error
            state.audioChunks = []; // Clear chunks on error
        };

        console.log("MediaRecorder setup complete.");

    } catch (e) {
        console.error("Failed to create MediaRecorder:", e);
        alert(`Failed to initialize audio recorder: ${e.message}`);
    }
}


// --- Updated startMockInterview function ---
function startMockInterview() {
    // Feature access checked before calling setupMediaDevices which calls this

    if (!state.sessionId) {
        alert('No active analysis session found. Please analyze a resume first.');
        navigateTo('upload');
        return;
    }

    if (!state.mediaRecorder) {
        alert('Audio recorder not initialized. Please grant microphone permissions.');
        showPermissionsModal();
        return;
    }

    console.log(`Starting ${state.interviewType} interview for session: ${state.sessionId}`);
    state.isInterviewActive = true;
    state.isAIResponding = false;
    state.conversationHistory = [];

    const conversationContainer = document.getElementById('conversationContainer');
    if (conversationContainer) conversationContainer.innerHTML = '';

    addMessageToConversation("system", `Starting ${state.interviewType} interview...`);

    // Show loading/starting state
    // Identify potential buttons that trigger this
    const startBtn1 = document.getElementById('startInterviewBtn');
    const startBtn2 = document.getElementById('startNewInterviewBtn');
    const startBtn3 = document.getElementById('startAnotherInterviewBtn');
    if(startBtn1) { startBtn1.disabled = true; startBtn1.textContent = 'Starting...'; }
    if(startBtn2) { startBtn2.disabled = true; startBtn2.textContent = 'Starting...'; }
    if(startBtn3) { startBtn3.disabled = true; startBtn3.textContent = 'Starting...'; }

    fetch(`${API_BASE_URL}/start-mock-interview`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            sessionId: state.sessionId,
            interviewType: state.interviewType
        })
    })
    .then(response => {
        if (!response.ok) {
             return response.json().then(errData => {
                if (errData.limitReached) {
                     showMessage(errData.error || 'Usage limit reached.', 'warning');
                     showUpgradeModal('mockInterviews');
                     throw new Error('Limit Reached');
                }
                throw new Error(errData.error || `Failed to start interview (${response.status})`);
            }).catch((jsonParseError) => {
                console.error("Could not parse error JSON from backend:", jsonParseError);
                 if (jsonParseError.message === 'Limit Reached') {
                    throw jsonParseError;
                }
                throw new Error(`Failed to start interview (${response.status} ${response.statusText})`);
            });
        }
        return response.json();
    })
    .then(data => { // data contains { interviewId, sessionId, interviewType, greeting, usageInfo }
        console.log('Interview started response:', data);
        if (!data.interviewId || !data.greeting) {
            throw new Error("Invalid response from start-mock-interview");
        }

        state.interviewId = data.interviewId;

        // *** FIX ISSUE 1: Update local usage state from backend response ***
        if (data.usageInfo && typeof irisAuth !== 'undefined' && irisAuth.getUserProfile()?.usage?.mockInterviews) {
            // Update local auth state directly
            authState.userProfile.usage.mockInterviews.used = data.usageInfo.used;
            authState.userProfile.usage.mockInterviews.limit = data.usageInfo.limit;
            console.log("Updated local 'mockInterviews' usage state from backend response:", authState.userProfile.usage.mockInterviews);
        } else {
             console.warn("Could not update local interview usage state: usageInfo missing in response or local profile structure invalid.");
        }
         // *** END FIX ISSUE 1 ***

        // Update usage display with the potentially updated local state
        updateUsageDisplay();

        // Remove "Starting..." message
        const systemMessages = conversationContainer?.querySelectorAll('.message.system');
        systemMessages?.forEach(msg => msg.remove());

        // Display and speak greeting
        addMessageToConversation('interviewer', data.greeting);
        generateAndPlayTTS(data.greeting); // Triggers listening when done

        // Reset button states (or maybe hide/change function)
        if(startBtn1) { startBtn1.disabled = false; startBtn1.textContent = 'Start Interview'; }
        if(startBtn2) { startBtn2.disabled = false; startBtn2.textContent = 'Start New Interview'; }
        if(startBtn3) { startBtn3.disabled = false; startBtn3.textContent = 'Start Another Interview'; }
        // Consider navigating to the interview screen here if not already done
        // navigateTo('mock-interview');

        return data;
    })
    .catch(error => {
        console.error('Error starting interview:', error);
        state.isInterviewActive = false; // Reset state

         if (error.message !== 'Limit Reached') {
             alert(`Error starting interview: ${error.message}`);
             addMessageToConversation("system", `Error starting interview: ${error.message}. Please try again.`);
         } else {
              addMessageToConversation("system", `Mock interview limit reached. Please upgrade your plan.`);
         }

        // Reset button states on error
        if(startBtn1) { startBtn1.disabled = false; startBtn1.textContent = 'Start Interview'; }
        if(startBtn2) { startBtn2.disabled = false; startBtn2.textContent = 'Start New Interview'; }
        if(startBtn3) { startBtn3.disabled = false; startBtn3.textContent = 'Start Another Interview'; }
    });
}

function sendTextReply() {
    const userReplyInput = document.getElementById('userReplyInput');
    if (!userReplyInput) return;
    const userResponse = userReplyInput.value.trim();

    if (!userResponse) return;
    if (!state.isInterviewActive || !state.interviewId) {
         alert("Interview is not active.");
         return;
    }
     if (state.isAIResponding || state.isRecording) {
        console.warn("Cannot send text reply while AI is responding or recording is active.");
        return; // Prevent sending while AI talks or mic is busy
    }


    console.log("Sending text reply:", userResponse);
    userReplyInput.value = ''; // Clear input

    addMessageToConversation('candidate', userResponse);
    sendUserResponseToBackend(userResponse);
}

// --- Continuous Voice Logic ---

function startListeningAutomatically() {
    // Don't listen if interview ended, or if AI is currently speaking/processing
    if (!state.isInterviewActive || state.isAIResponding) {
        console.log("Skipping automatic listening (interview not active or AI responding).");
        return;
    }
    if (state.isRecording) {
        console.log("Already recording, skipping automatic start.");
        return; // Already recording
    }
    if (!state.mediaRecorder || !state.analyserNode || !state.audioDataArray) { // Check VAD components too
        console.error("MediaRecorder or VAD components not available to start listening.");
        // Attempt to re-setup or prompt user?
        // showPermissionsModal(); // Could prompt again
        return;
    }
    if (state.mediaRecorder.state !== 'inactive') {
        console.warn(`MediaRecorder not inactive (${state.mediaRecorder.state}), attempting recovery...`);
        // Try stopping previous recording forcefully? Risky. Best to prevent this state.
        try {
             state.mediaRecorder.stop(); // Attempt to stop
        } catch(e) { console.error("Error stopping stuck recorder:", e); }
        // Clear state and potentially try again after a short delay
        state.isRecording = false;
        clearTimeout(state.silenceTimer);
        cancelAnimationFrame(state.vadAnimationFrameId);
        state.speechDetectedInChunk = false;
        setTimeout(startListeningAutomatically, 200); // Retry shortly
        return;
    }

    console.log("AI finished speaking, starting automatic recording...");
    const micIcon = document.getElementById('toggleMicBtn')?.querySelector('i');

    state.audioChunks = []; // Clear previous chunks
    state.isRecording = true;
    state.recordingStartTime = Date.now();
    state.speechDetectedInChunk = false; // Reset speech detection flag for this new chunk
    clearTimeout(state.silenceTimer); // Ensure any old silence timer is cleared

    try {
        state.mediaRecorder.start(); // Start recorder (records continuously until stopped)
        console.log("MediaRecorder started for automatic listening.");
        if(micIcon) micIcon.classList.remove('fa-microphone-slash'); // Ensure visual state is correct
        if(micIcon) micIcon.classList.add('fa-microphone-alt', 'text-danger'); // Indicate listening

        // Start the VAD loop
        checkAudioLevel(); // Begin checking audio levels

    } catch (e) {
        console.error("Error starting MediaRecorder:", e);
        alert(`Error starting recording: ${e.message}`);
        state.isRecording = false;
        if(micIcon) micIcon.classList.remove('fa-microphone-alt', 'text-danger');
    }
}

// function startSilenceDetection() {
//     clearTimeout(state.silenceTimer); // Clear previous timer

//     console.log(`Starting silence timer (${state.silenceDelay}ms)...`);

//     // !! IMPORTANT !!
//     // This is a placeholder using only a timer. Real VAD requires analyzing
//     // the audio stream with the Web Audio API (AnalyserNode) to detect actual
//     // silence and reset this timer when speech is detected.
//     // This basic timer will stop recording after state.silenceDelay ms
//     // regardless of whether the user was actually silent.
//     state.silenceTimer = setTimeout(() => {
//         console.log("Silence timer expired.");
//         if (state.isRecording) {
//             stopRecordingAndProcess();
//         } else {
//              console.log("Silence timer expired, but not recording.");
//         }
//     }, state.silenceDelay);

//     // --- Placeholder for real VAD ---
//     // In a real implementation, you would:
//     // 1. Use Web Audio API AnalyserNode to get volume levels periodically.
//     // 2. If volume > threshold (speech): clearTimeout(state.silenceTimer); startSilenceDetection(); // Reset timer
//     // 3. If volume < threshold (silence): Let the timer run.
//     // ---------------------------------
// }

// --- VAD Core Logic ---
// --- VAD Core Logic (with Volume Logging) ---
function checkAudioLevel() {
    // Stop the loop if no longer recording or VAD components missing
    if (!state.isRecording || !state.analyserNode || !state.audioDataArray) {
        // console.log("Stopping VAD loop (not recording or VAD missing)."); // Can be noisy
        // Make sure animation frame is cancelled if VAD components are missing mid-recording
        if(state.vadAnimationFrameId) {
            cancelAnimationFrame(state.vadAnimationFrameId);
            state.vadAnimationFrameId = null;
        }
        return;
    }

    // Schedule the next check
    state.vadAnimationFrameId = requestAnimationFrame(checkAudioLevel);

    // Get audio data
    try {
        state.analyserNode.getByteFrequencyData(state.audioDataArray); // Fill the array
    } catch (e) {
         console.error("Error getting frequency data from AnalyserNode:", e);
         // Stop VAD if analyser fails
         state.isRecording = false; // Mark as not recording to prevent recorder issues
         cancelAnimationFrame(state.vadAnimationFrameId);
         state.vadAnimationFrameId = null;
         // Optionally, try to stop the recorder gracefully
         // stopRecordingAndProcess(); // Might lead to unexpected states if called from here
         return;
    }


    // Calculate average volume
    let sum = 0;
    for (let i = 0; i < state.audioDataArray.length; i++) {
        sum += state.audioDataArray[i];
    }
    const averageVolume = sum / state.audioDataArray.length;

    // **** ADDED LOGGING ****
    // Log volume periodically (e.g., every ~30 frames) to avoid flooding console
    if (!window.vadLogCounter) window.vadLogCounter = 0;
    window.vadLogCounter++;
    if (window.vadLogCounter % 30 === 0) {
        console.log(`VAD Avg Vol: ${averageVolume.toFixed(2)} (Threshold: ${SPEECH_THRESHOLD})`);
    }
    // ***********************


    // --- Silence Detection Logic ---
    if (averageVolume > SPEECH_THRESHOLD) {
        // Speech detected
        if (!state.speechDetectedInChunk) {
             console.log(`--- Speech Detected (Volume: ${averageVolume.toFixed(2)}) ---`); // Log first detection
             state.speechDetectedInChunk = true; // Mark that speech has occurred
        }
        // If silence timer is running, clear it because speech is happening again
        if (state.silenceTimer) {
            // console.log("Speech detected, clearing silence timer."); // Can be noisy
            clearTimeout(state.silenceTimer);
            state.silenceTimer = null;
        }
    } else {
        // Silence detected (or below threshold)
        // Start the silence timer ONLY if speech has already been detected in this chunk
        // AND the timer isn't already running.
        if (state.speechDetectedInChunk && !state.silenceTimer) {
             console.log(`Silence detected after speech (Volume: ${averageVolume.toFixed(2)}), starting ${state.silenceDelay}ms timeout...`);
             state.silenceTimer = setTimeout(() => {
                 console.log("Silence timer expired after speech.");
                 // Double check we are still recording before stopping
                 if (state.isRecording) {
                     stopRecordingAndProcess();
                 } else {
                      console.log("Silence timer expired, but recording already stopped.");
                      state.silenceTimer = null; // Clear timer ID
                 }
             }, state.silenceDelay);
        }
        // If silence timer IS running, do nothing - let it expire or be cleared by speech.
    }
}

function stopRecordingAndProcess() {
    if (!state.isRecording && state.mediaRecorder?.state !== 'recording') {
         // console.log("Stop recording called, but not currently recording."); // Can be noisy
         return; // Already stopped or wasn't started
    }
    console.log("Stopping recording and VAD...");
    const micIcon = document.getElementById('toggleMicBtn')?.querySelector('i');

    const wasRecording = state.isRecording; // Store if we were actively recording
    state.isRecording = false; // Mark as not recording

    // Stop the VAD loop FIRST
    if (state.vadAnimationFrameId) {
        cancelAnimationFrame(state.vadAnimationFrameId);
        state.vadAnimationFrameId = null;
        console.log("VAD Animation Frame cancelled.");
    }

    // Clear any pending silence timer
    if (state.silenceTimer) {
        clearTimeout(state.silenceTimer);
        state.silenceTimer = null;
        console.log("Pending silence timer cleared.");
    }

    // Stop visual timer
    clearInterval(state.recordingTimer);

    // --- REMOVED state.speechDetectedInChunk = false; from here ---

    // Stop the MediaRecorder - this is asynchronous and triggers 'onstop'
    if (state.mediaRecorder && state.mediaRecorder.state === "recording") {
        console.log("Calling mediaRecorder.stop()");
        try {
             state.mediaRecorder.stop(); // Triggers 'onstop' which handles blob processing
        } catch(e) {
             console.error("Error stopping media recorder:", e);
             state.audioChunks = []; // Clear chunks on error
             state.speechDetectedInChunk = false; // Reset flag on error too
        }
    } else {
        console.warn(`Attempted to stop recording, but recorder state was: ${state.mediaRecorder?.state}.`);
        // If recorder wasn't 'recording' but we thought we were, reset UI and potentially clear chunks
         state.audioChunks = [];
         state.speechDetectedInChunk = false; // Reset flag if recorder was not in correct state
    }

    // Reset mic icon
    if(micIcon) micIcon.classList.remove('fa-microphone-alt', 'text-danger');

    // IMPORTANT: The actual processing now happens in the 'onstop' event handler
    console.log(`stopRecordingAndProcess finished.`); // Removed speech detected log here as it's checked in onstop
}

function processAudioResponse(audioBlob, mimeType = 'audio/webm') {
     console.log(`Processing recorded audio blob. Size: ${audioBlob.size}, Type: ${mimeType}`);
     // document.getElementById('processingIndicator').style.display = 'none'; // Hide processing indicator

    if (!state.interviewId) {
        console.error("No active interview ID to process audio for.");
        return;
    }
     if (audioBlob.size < 100) { // Very small blob might be noise/error
        console.warn("Audio blob size is very small, skipping processing.");
         // Restart listening?
         if(state.isInterviewActive && !state.isAIResponding) {
             startListeningAutomatically();
         }
        return;
    }


    const formData = new FormData();
    // Use the determined mimeType for the filename extension if possible
    const fileExtension = mimeType.split('/')[1]?.split(';')[0] || 'webm';
    const filename = `recording.${fileExtension}`;
    formData.append('audio', audioBlob, filename);
    formData.append('interviewId', state.interviewId);

    console.log(`Sending audio to /process-audio as ${filename}`);
    state.isAIResponding = true; // Mark AI as busy while processing audio/getting response

    fetch(`${API_BASE_URL}/process-audio`, {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) throw new Error(`Transcription failed (${response.status})`);
        return response.json();
    })
    .then(data => {
        console.log('Transcription result:', data);
        if (data.transcription && data.transcription.trim()) {
            addMessageToConversation('candidate', data.transcription);
            sendUserResponseToBackend(data.transcription); // Send transcription for AI response
        } else {
             console.warn("Empty transcription received.");
             addMessageToConversation("system", "(No speech detected or transcription failed)");
             state.isAIResponding = false; // AI finished processing (failed transcription)
             // Restart listening?
             if(state.isInterviewActive) startListeningAutomatically();
        }
    })
    .catch(error => {
        console.error('Error processing audio:', error);
        alert(`Error processing your response: ${error.message}`);
        addMessageToConversation("system", `Error processing audio: ${error.message}`);
        state.isAIResponding = false; // AI finished processing (error)
         // Restart listening?
         if(state.isInterviewActive) startListeningAutomatically();
    });
}

function sendUserResponseToBackend(userResponse) {
    console.log("Sending user response to backend for AI reply:", userResponse);
    state.isAIResponding = true; // Expecting AI response now
    animateInterviewer(false); // Ensure interviewer avatar is not 'speaking'

    fetch(`${API_BASE_URL}/interview-response`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            interviewId: state.interviewId,
            userResponse: userResponse
        })
    })
    .then(response => {
        if (!response.ok) throw new Error(`Failed to get interview response (${response.status})`);
        return response.json();
    })
    .then(data => {
        console.log('Interview response received:', data);
        if (data.interviewerResponse) {
            addMessageToConversation('interviewer', data.interviewerResponse);
            generateAndPlayTTS(data.interviewerResponse); // Plays TTS, which triggers listening again on end
        } else {
             throw new Error("Empty response from interviewer");
        }
        // isAIResponding will be set to false in the TTS onended callback
    })
    .catch(error => {
        console.error('Error getting interviewer response:', error);
        addMessageToConversation('interviewer', `Sorry, an error occurred: ${error.message}. Let's try again.`);
        state.isAIResponding = false; // Reset state on error
        // Restart listening?
         if(state.isInterviewActive) startListeningAutomatically();
    });
}

// --- TTS Function ---

function generateAndPlayTTS(text) {
     if (!text) return;
     console.log("Requesting TTS for:", text);
     state.isAIResponding = true; // AI is about to speak
     animateInterviewer(true); // Start animation


    // --- Attempt 1: Fetch from Backend (Preferred) ---
    fetch(`${API_BASE_URL}/generate-tts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: text })
    })
    .then(response => {
        if (!response.ok) {
             // Throw error to trigger fallback
             throw new Error(`Backend TTS failed (${response.status})`);
        }
        return response.json();
    })
    .then(data => {
        if (!data.audioBase64) {
             throw new Error("Backend returned no audio data.");
        }
        console.log("Playing TTS audio from backend");
        const audio = new Audio(`data:audio/mp3;base64,${data.audioBase64}`);

        audio.onended = () => {
            console.log("Backend TTS finished playing.");
            animateInterviewer(false);
            state.isAIResponding = false;
            // Automatically start listening after AI finishes
            if(state.isInterviewActive) startListeningAutomatically();
        };
         audio.onerror = (e) => {
            console.error("Error playing backend audio:", e);
            animateInterviewer(false);
            state.isAIResponding = false;
             if(state.isInterviewActive) startListeningAutomatically(); // Still try to continue
        };
        audio.play().catch(e => { // Handle potential autoplay issues
             console.error("Audio play failed:", e);
             alert("Could not play audio automatically. Please interact with the page.");
             animateInterviewer(false);
             state.isAIResponding = false;
             if(state.isInterviewActive) startListeningAutomatically();
        });
    })
    .catch(error => {
        // --- Attempt 2: Browser Fallback ---
        console.warn(`Backend TTS error: ${error.message}. Falling back to browser TTS.`);
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.rate = 1;
            utterance.pitch = 1;
            utterance.volume = 1;

            // Try to find a suitable voice (example: prefer 'Google' or 'Daniel')
            const voices = window.speechSynthesis.getVoices();
             // Example: Look for a specific voice or language
             // const preferredVoice = voices.find(voice => voice.lang === 'en-IN') || voices.find(voice => voice.name.includes('Google US English'));
            const preferredVoice = voices.find(voice => voice.name.includes('Google US English')) || voices.find(voice => voice.default && voice.lang.startsWith('en')); // Simple preference
            if (preferredVoice) {
                console.log("Using browser voice:", preferredVoice.name);
                utterance.voice = preferredVoice;
            } else {
                 console.log("Using default browser voice.");
            }


            utterance.onstart = () => {
                 console.log("Browser TTS started.");
                 state.isAIResponding = true;
                 animateInterviewer(true);
            };

            utterance.onend = () => {
                console.log("Browser TTS finished.");
                animateInterviewer(false);
                state.isAIResponding = false;
                // Automatically start listening after AI finishes
                 if(state.isInterviewActive) startListeningAutomatically();
            };

            utterance.onerror = (event) => {
                console.error('Browser SpeechSynthesis Error:', event.error);
                animateInterviewer(false);
                state.isAIResponding = false;
                 // Still try to start listening even if TTS fails
                if(state.isInterviewActive) startListeningAutomatically();
            };

            // Cancel any previous speech before speaking
             window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utterance);
        } else {
            console.error("Browser SpeechSynthesis not supported.");
            alert("Neither backend nor browser TTS is available.");
            animateInterviewer(false);
            state.isAIResponding = false;
            // Can't proceed naturally, maybe just display text?
        }
    });
}


function animateInterviewer(isSpeaking) {
    const interviewerAvatar = document.getElementById('interviewerAvatar');
    const interviewerSpeakingWaves = document.getElementById('interviewerSpeakingWaves');
    if (!interviewerAvatar || !interviewerSpeakingWaves) return;

    if (isSpeaking) {
        interviewerAvatar.classList.add('speaking'); // Add class for potential CSS animation
        interviewerSpeakingWaves.classList.add('active');
    } else {
        interviewerAvatar.classList.remove('speaking');
        interviewerSpeakingWaves.classList.remove('active');
    }
}


// --- Media Controls ---

function toggleCamera() {
    if (state.videoStream) {
        const videoTrack = state.videoStream.getVideoTracks()[0];
        if(videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            const btn = document.getElementById('toggleCameraBtn');
            const icon = btn?.querySelector('i');
            if(icon) icon.className = videoTrack.enabled ? 'fas fa-video' : 'fas fa-video-slash';
            if(btn) btn.classList.toggle('btn-danger', !videoTrack.enabled);
             if(btn) btn.classList.toggle('btn-light', videoTrack.enabled);
        }
    }
}

function toggleMicrophone() {
    // Note: Disabling manual mic toggle in continuous mode might be better
    // Or, it could act as a temporary mute? Complex interaction.
     if (state.videoStream) {
        const audioTrack = state.videoStream.getAudioTracks()[0];
         if (audioTrack) {
             audioTrack.enabled = !audioTrack.enabled; // This mutes/unmutes the track for recording
             const btn = document.getElementById('toggleMicBtn');
             const icon = btn?.querySelector('i');
              if (icon) icon.className = audioTrack.enabled ? 'fas fa-microphone' : 'fas fa-microphone-slash';
              if (btn) btn.classList.toggle('btn-danger', !audioTrack.enabled);
              if (btn) btn.classList.toggle('btn-light', audioTrack.enabled);
             console.log(`Microphone track enabled: ${audioTrack.enabled}`);

             // If mic is disabled manually, maybe stop automatic listening?
             if (!audioTrack.enabled && state.isRecording) {
                  console.log("Mic disabled manually, stopping recording.");
                  stopRecordingAndProcess(); // Or just stop without processing?
             }
        }
    }
}


// --- Interview End & Analysis ---

function endInterview() {
    if (!state.interviewId) {
        console.warn('No active interview to end');
        return;
    }
    console.log("Ending interview:", state.interviewId);

    state.isInterviewActive = false; // Stop interview loop
    state.isAIResponding = false;
    // Stop recording if it's active
    if (state.isRecording) {
        stopRecordingAndProcess(); // Stop and process any final utterance
    } else {
         clearTimeout(state.silenceTimer); // Ensure timers are cleared
         clearInterval(state.recordingTimer);
    }


    // Stop media stream tracks
    if (state.videoStream) {
        console.log("Stopping media stream tracks.");
        state.videoStream.getTracks().forEach(track => track.stop());
        state.videoStream = null;
        // Reset video display?
        const videoElement = document.getElementById('candidateVideo');
        if(videoElement) videoElement.srcObject = null;
    }

     // Add visual feedback
    addMessageToConversation("system", "Ending interview and generating analysis...");
    const endBtn = document.getElementById('endInterviewBtn');
    if(endBtn) endBtn.disabled = true; endBtn.textContent = 'Analyzing...';


    fetch(`${API_BASE_URL}/end-interview`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ interviewId: state.interviewId })
    })
    .then(response => {
        if (!response.ok) throw new Error(`Failed to end interview (${response.status})`);
        return response.json();
    })
    .then(data => {
        console.log('Interview ended response:', data);
        if (data.analysisStatus === 'processing') {
            pollInterviewAnalysis(state.interviewId); // Start polling for results
        } else {
             // Handle potential immediate completion or error from backend?
             console.warn("Unexpected status after ending interview:", data.status);
             // Maybe still try polling
             pollInterviewAnalysis(state.interviewId);
        }
        // Reset interview ID *after* starting polling for its results
        // state.interviewId = null; // Or keep it to view results? Keep it for now.
    })
    .catch(error => {
        console.error('Error ending interview:', error);
        alert(`Error ending interview: ${error.message}`);
         if(endBtn) endBtn.disabled = false; endBtn.textContent = 'End Interview & Analyze'; // Reset button
         addMessageToConversation("system", `Error ending interview: ${error.message}`);
    });
}

function pollInterviewAnalysis(interviewId) {
    console.log("Polling for interview analysis results for:", interviewId);
    navigateTo('performance'); // Show performance section while polling

    // Add loading state to performance section
    document.getElementById('performance').innerHTML = `
        <div class="container text-center mt-5">
            <h2>Generating Interview Performance Analysis...</h2>
            <p class="section-description">This may take a minute.</p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>`;


    const checkAnalysis = () => {
        // Stop polling if interview changed or isn't active anymore (though it should be ended)
        if (state.interviewId !== interviewId) {
            console.log("Interview ID changed, stopping analysis polling for", interviewId);
            return;
        }

        fetch(`${API_BASE_URL}/get-interview-analysis/${interviewId}`)
        .then(response => {
            if (response.status === 202) { // 202 Accepted - Still processing
                console.log("Analysis still processing...");
                setTimeout(checkAnalysis, 5000); // Poll again after 5 seconds
                return null; // Don't continue processing this response
            }
            if (response.status === 500) { // Explicit server error
                 throw new Error("Server error while generating analysis.");
            }
            if (response.status === 404) {
                throw new Error("Interview analysis not found.");
            }
             if (!response.ok) {
                throw new Error(`Failed to get analysis (${response.status})`);
            }
            return response.json();
        })
        .then(data => {
            if (!data) return; // Exit if still processing (returned null)

            console.log('Interview analysis received:', data);
            // Restore original performance section structure before displaying
            restorePerformanceSectionHTML(); // You'll need to define this function or paste the original HTML structure back
            displayInterviewAnalysis(data); // Display results

            // Unlock history section based on results
            fetch(`${API_BASE_URL}/get-progress-history/${state.sessionId}`)
                .then(res => res.ok ? res.json() : null)
                .then(historyData => {
                    if (historyData && historyData.interviews?.length > 0) { // Unlock if any history exists
                         unlockSection('performance'); // Ensure performance is unlocked
                         unlockSection('history');
                    }
                });

             const endBtn = document.getElementById('endInterviewBtn');
             if(endBtn) endBtn.disabled = false; endBtn.textContent = 'End Interview & Analyze'; // Reset button state

        })
        .catch(error => {
            console.error('Error getting interview analysis:', error);
             document.getElementById('performance').innerHTML = `<div class="alert alert-danger">Error retrieving interview analysis: ${error.message}</div>`;
            // Reset end button state
             const endBtn = document.getElementById('endInterviewBtn');
             if(endBtn) endBtn.disabled = false; endBtn.textContent = 'End Interview & Analyze';
        });
    };

    checkAnalysis(); // Start polling
}

// Function to restore the HTML structure of the performance section
// (Needed because we overwrite it with a loading indicator during polling)
function restorePerformanceSectionHTML() {
    const performanceSection = document.getElementById('performance');
    if (!performanceSection) return;
    // Paste the full, original HTML structure from index.html here
    // Including the NEW suggested answers section placeholder
    performanceSection.innerHTML = `
        <div class="container">
            <h2>Interview Performance Analysis</h2>
            <p class="section-description">Here's how you performed in your mock interview</p>

            <div class="row">
                <div class="col-md-4">
                    <div class="card mb-4">
                        <div class="card-body text-center">
                            <h3>Overall Score</h3>
                            <div class="performance-score-circle">
                                <span id="overallPerformanceScore">--</span><span>%</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h3>Overall Assessment</h3>
                            <p id="overallAssessment">Loading assessment...</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row score-cards">
                <div class="col-md-4">
                    <div class="card mb-4 score-card">
                        <div class="card-body">
                            <h3>Technical</h3>
                            <div class="score-indicator">
                                <div class="score-value" id="technicalScore">--</div>
                                <div class="score-bar"><div class="score-progress" id="technicalScoreBar" style="width: 0%;"></div></div>
                            </div>
                            <div class="score-details mt-3">
                                <div class="score-strengths"><h5>Strengths</h5><ul id="technicalStrengths"><li>Loading...</li></ul></div>
                                <div class="score-weaknesses"><h5>Areas to Improve</h5><ul id="technicalWeaknesses"><li>Loading...</li></ul></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card mb-4 score-card">
                        <div class="card-body">
                            <h3>Communication</h3>
                            <div class="score-indicator">
                                <div class="score-value" id="communicationScore">--</div>
                                <div class="score-bar"><div class="score-progress" id="communicationScoreBar" style="width: 0%;"></div></div>
                            </div>
                            <div class="score-details mt-3">
                                <div class="score-strengths"><h5>Strengths</h5><ul id="communicationStrengths"><li>Loading...</li></ul></div>
                                <div class="score-weaknesses"><h5>Areas to Improve</h5><ul id="communicationWeaknesses"><li>Loading...</li></ul></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card mb-4 score-card">
                        <div class="card-body">
                            <h3>Behavioral</h3>
                            <div class="score-indicator">
                                <div class="score-value" id="behavioralScore">--</div>
                                <div class="score-bar"><div class="score-progress" id="behavioralScoreBar" style="width: 0%;"></div></div>
                            </div>
                            <div class="score-details mt-3">
                                <div class="score-strengths"><h5>Strengths</h5><ul id="behavioralStrengths"><li>Loading...</li></ul></div>
                                <div class="score-weaknesses"><h5>Areas to Improve</h5><ul id="behavioralWeaknesses"><li>Loading...</li></ul></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header"><h3>Key Improvement Areas</h3></div>
                <div class="card-body"><div id="keyImprovementAreas"><p class="text-center">Loading improvement areas...</p></div></div>
            </div>

            <div class="card mb-4">
                <div class="card-header"><h3>Interview Transcript</h3></div>
                <div class="card-body"><div id="interviewTranscript" class="interview-transcript"><p class="text-center">Loading transcript...</p></div></div>
            </div>

            <div class="card mb-4">
                 <div class="card-header"><h3><i class="fas fa-lightbulb me-2"></i> Suggested Answers & Rationale</h3></div>
                 <div class="card-body">
                     <p class="text-muted small">Here are some strong ways you could have answered the interviewer's questions, tailored to your profile.</p>
                     <div id="suggestedAnswersAccordion" class="accordion">
                         <div class="text-center p-3">
                             <div class="spinner-border spinner-border-sm text-primary" role="status">
                                 <span class="visually-hidden">Loading...</span>
                             </div>
                             <span class="ms-2">Loading suggested answers...</span>
                         </div>
                     </div>
                 </div>
             </div>
             <div class="text-center mt-4">
                <button class="btn btn-primary" id="startNewInterviewBtn">Start New Interview</button>
                <button class="btn btn-secondary" id="viewProgressBtn">View Progress History</button>
            </div>
        </div>`; // End of innerHTML

    // Re-attach listeners for the buttons inside this section
     document.getElementById('startNewInterviewBtn')?.addEventListener('click', () => { navigateTo('mock-interview'); showPermissionsModal(); });
     document.getElementById('viewProgressBtn')?.addEventListener('click', () => navigateTo('history'));
}


function displayInterviewAnalysis(analysisData) {
    // Ensure analysisData and analysisData.analysis exist
    if (!analysisData || !analysisData.analysis) {
        console.error("Invalid analysis data received for display.");
        // Attempt to restore the section structure before showing error
        restorePerformanceSectionHTML();
        document.getElementById('performance').innerHTML = '<div class="alert alert-danger">Could not display interview analysis. Data missing.</div>';
        return;
    }
    const analysis = analysisData.analysis;
    const interviewIdForSuggestions = analysisData.interviewId || state.interviewId; // Get ID for suggestions call

    // --- Restore HTML Structure First (Crucial if loading overwrote it) ---
    // Ensure the basic structure exists before populating it
    // restorePerformanceSectionHTML(); // Called by pollInterviewAnalysis before this now

    // --- Populate Data ---

    // Overall Score & Assessment
    const overallScore = analysis.overallScore || 0;
    const overallScoreElement = document.getElementById('overallPerformanceScore');
    const overallCircleElement = document.querySelector('.performance-score-circle'); // Use querySelector for potential future changes
    const overallAssessmentElement = document.getElementById('overallAssessment');

    if (overallScoreElement) overallScoreElement.textContent = overallScore;
    if (overallCircleElement) overallCircleElement.style.setProperty('--percentage', `${overallScore}%`);
    if (overallAssessmentElement) overallAssessmentElement.textContent = analysis.overallAssessment || 'No overall assessment available.';

    // Helper to display score card section
    const displayScoreSection = (sectionId, assessmentData) => {
        const scoreEl = document.getElementById(`${sectionId}Score`);
        const scoreBarEl = document.getElementById(`${sectionId}ScoreBar`);
        const strengthsEl = document.getElementById(`${sectionId}Strengths`);
        const weaknessesEl = document.getElementById(`${sectionId}Weaknesses`);
        const data = assessmentData || {}; // Handle case where assessment section is missing

        if (scoreEl) scoreEl.textContent = data.score !== undefined ? data.score : '--';
        if (scoreBarEl) scoreBarEl.style.width = `${data.score || 0}%`;

        const populateList = (listEl, items, type) => {
            if (!listEl) return;
            listEl.innerHTML = ''; // Clear
            if (items?.length > 0) {
                items.forEach(item => {
                    const li = document.createElement('li');
                    // Use textContent for safety against potential XSS in feedback strings
                    li.innerHTML = `<i class="fas ${type === 'strength' ? 'fa-plus-circle text-success' : 'fa-minus-circle text-danger'} me-2"></i>`;
                    li.appendChild(document.createTextNode(item || 'N/A')); // Append text safely
                    listEl.appendChild(li);
                });
            } else {
                listEl.innerHTML = `<li class="text-muted">None identified.</li>`;
            }
        };

        populateList(strengthsEl, data.strengths, 'strength');
        populateList(weaknessesEl, data.weaknesses, 'weakness');
    };

    displayScoreSection('technical', analysis.technicalAssessment);
    displayScoreSection('communication', analysis.communicationAssessment);
    displayScoreSection('behavioral', analysis.behavioralAssessment);


    // Key Improvement Areas
    const keyImprovementAreasContainer = document.getElementById('keyImprovementAreas');
    if (keyImprovementAreasContainer) {
        keyImprovementAreasContainer.innerHTML = ''; // Clear
        if (analysis.keyImprovementAreas?.length > 0) {
            const listGroup = document.createElement('div');
            listGroup.className = 'list-group';
            analysis.keyImprovementAreas.forEach(area => {
                const item = document.createElement('div'); // Use div, not link 'a'
                item.className = 'list-group-item list-group-item-action flex-column align-items-start'; // Keep classes for styling

                 // Safely create and append text content
                 const headerDiv = document.createElement('div');
                 headerDiv.className = 'd-flex w-100 justify-content-between';
                 const title = document.createElement('h5');
                 title.className = 'mb-1';
                 title.innerHTML = `<i class="fas fa-wrench me-2"></i>`; // Icon is safe
                 title.appendChild(document.createTextNode(area.area || 'Improvement Area'));
                 headerDiv.appendChild(title);
                 item.appendChild(headerDiv);

                 const recommendation = document.createElement('p');
                 recommendation.className = 'mb-1';
                 recommendation.textContent = area.recommendation || 'No specific recommendation.';
                 item.appendChild(recommendation);

                 if (area.practiceExercise) {
                     const practice = document.createElement('small');
                     practice.className = 'text-muted';
                     practice.innerHTML = `<strong>Practice:</strong> `; // Bold tag is safe
                     practice.appendChild(document.createTextNode(area.practiceExercise));
                     item.appendChild(practice);
                 }
                 listGroup.appendChild(item);
            });
            keyImprovementAreasContainer.appendChild(listGroup);
        } else {
            keyImprovementAreasContainer.innerHTML = '<div class="alert alert-light">No specific areas for improvement highlighted.</div>';
        }
    }


    // Interview Transcript
    const interviewTranscriptContainer = document.getElementById('interviewTranscript');
    if (interviewTranscriptContainer) {
        interviewTranscriptContainer.innerHTML = ''; // Clear
        if (analysisData.transcript?.length > 0) {
            analysisData.transcript.forEach(message => {
                const messageElement = document.createElement('div');
                messageElement.className = `transcript-message ${message.speaker?.toLowerCase() || 'unknown'}`;

                const speakerDiv = document.createElement('div');
                speakerDiv.className = 'transcript-speaker';
                speakerDiv.textContent = message.speaker || 'Unknown'; // Safe text

                const textDiv = document.createElement('div');
                textDiv.className = 'transcript-text';
                textDiv.textContent = message.text || '(empty message)'; // Safe text

                messageElement.appendChild(speakerDiv);
                messageElement.appendChild(textDiv);
                interviewTranscriptContainer.appendChild(messageElement);
            });
            interviewTranscriptContainer.scrollTop = interviewTranscriptContainer.scrollHeight; // Scroll to bottom
        } else {
            interviewTranscriptContainer.innerHTML = '<p class="text-muted">Transcript not available.</p>';
        }
    }

    // **** CALL TO LOAD SUGGESTED ANSWERS (Added) ****
    if (interviewIdForSuggestions) {
       console.log(`Analysis displayed, now loading suggested answers for interview: ${interviewIdForSuggestions}`);
       loadSuggestedAnswers(interviewIdForSuggestions);
    } else {
         console.error("Cannot load suggested answers, interview ID not found in analysis data or state.");
         // Display error in the suggested answers section
         const container = document.getElementById('suggestedAnswersAccordion');
          if(container) {
            container.innerHTML = '<div class="alert alert-danger">Could not load suggested answers: Interview ID missing.</div>';
          }
    }
    // **** END OF ADDED CODE ****
}

// --- NEW Function to load suggested answers ---
function loadSuggestedAnswers(interviewId) {
    console.log("Requesting suggested answers for interview:", interviewId);
    const container = document.getElementById('suggestedAnswersAccordion');
    if (!container) return;

    // Show loading state specifically for this section
    container.innerHTML = `
        <div class="text-center p-3">
            <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Loading suggested answers...</span>
        </div>`;

    fetch(`${API_BASE_URL}/get-suggested-answers/${interviewId}`)
    .then(response => {
        if (!response.ok) {
            // Try to get error message from backend JSON
             return response.json().then(errData => {
                 throw new Error(errData.error || `Network response was not ok (${response.status})`);
            }).catch(() => {
                 // If backend didn't send JSON error
                 throw new Error(`Network response was not ok (${response.status})`);
             });
        }
        return response.json();
    })
    .then(data => {
        console.log('Suggested answers data received:', data);
        displaySuggestedAnswers(data); // Call display function
    })
    .catch(error => {
        console.error('Error loading suggested answers:', error);
        if (container) {
             container.innerHTML = `<div class="alert alert-warning">Could not load suggested answers: ${error.message}</div>`;
        }
    });
}

// --- NEW Function to display suggested answers ---
function displaySuggestedAnswers(data) {
    const container = document.getElementById('suggestedAnswersAccordion');
    if (!container) return;
    container.innerHTML = ''; // Clear loading state

    if (data.error) {
         container.innerHTML = `<div class="alert alert-warning">Could not generate suggested answers: ${data.error}</div>`;
         return;
    }

    if (!data || !data.suggestedAnswers || data.suggestedAnswers.length === 0) {
        container.innerHTML = '<div class="alert alert-light">No suggested answers were generated for this interview.</div>';
        return;
    }

    data.suggestedAnswers.forEach((item, index) => {
        const question = item.question || "[Question not extracted]";
        const suggestions = item.suggestions || [];

        const accordionItemId = `suggestedAnswerItem-${index}`;
        const headerId = `suggestedAnswerHeader-${index}`;
        const collapseId = `suggestedAnswerCollapse-${index}`;

        const accordionItem = document.createElement('div');
        accordionItem.className = 'accordion-item';

        let suggestionsHTML = '';
        if (suggestions.length > 0) {
            suggestionsHTML = suggestions.map((suggestion, sugIndex) => `
                <div class="suggestion-block mb-3 pb-2 ${sugIndex < suggestions.length - 1 ? 'border-bottom' : ''}">
                    <h6>Suggestion ${sugIndex + 1}:</h6>
                    <p><strong>Answer:</strong> ${suggestion.answer || "N/A"}</p>
                    <p class="text-muted small"><strong><i class="fas fa-info-circle me-1"></i>Rationale:</strong> ${suggestion.rationale || "N/A"}</p>
                </div>
            `).join('');
        } else {
            suggestionsHTML = '<p class="text-muted">No specific suggestions provided for this question.</p>';
        }

        accordionItem.innerHTML = `
            <h2 class="accordion-header" id="${headerId}">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="false" aria-controls="${collapseId}">
                   <i class="fas fa-question-circle text-primary me-2"></i> ${question}
                </button>
            </h2>
            <div id="${collapseId}" class="accordion-collapse collapse" aria-labelledby="${headerId}" data-bs-parent="#suggestedAnswersAccordion">
                <div class="accordion-body">
                    ${suggestionsHTML}
                </div>
            </div>
        `;
        container.appendChild(accordionItem);
    });
}


// --- History Section ---

function loadProgressHistory() {
    if (!state.sessionId) {
        console.log('No active session for progress history');
        // Optionally display a message in the history section
        document.getElementById('history').innerHTML = '<div class="container"><p class="alert alert-info">Complete an interview analysis first to see progress history.</p></div>';
        return;
    }

     console.log("Loading progress history for session:", state.sessionId);
     // Display loading state for history
     document.getElementById('history').innerHTML = `
         <div class="container text-center mt-5">
            <h2>Loading Progress History...</h2>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
         </div>`;

    fetch(`${API_BASE_URL}/get-progress-history/${state.sessionId}`)
    .then(response => {
        if (response.status === 404) return { interviews: [], trends: null, message: "No history found yet." }; // Handle no history gracefully
        if (!response.ok) throw new Error(`Failed to get progress history (${response.status})`);
        return response.json();
    })
    .then(data => {
        console.log('Progress history data:', data);
        // Restore original history section structure
        restoreHistorySectionHTML(); // You'll need to define this
        displayProgressHistory(data); // Display the data
    })
    .catch(error => {
        console.error('Error loading progress history:', error);
        document.getElementById('history').innerHTML = `<div class="container"><div class="alert alert-danger">Error loading progress history: ${error.message}</div></div>`;
    });
}

// Function to restore the HTML structure of the history section
function restoreHistorySectionHTML() {
     const historySection = document.getElementById('history');
     if (!historySection) return;
     // Paste the original HTML structure from index.html here
     historySection.innerHTML = `
        <div class="container">
            <h2>Progress History</h2>
            <p class="section-description">Track your improvement across multiple mock interviews</p>
            <div class="card mb-4">
                <div class="card-header"><h3>Performance Trends</h3></div>
                <div class="card-body">
                    <div class="chart-container" style="height: 300px;"> <canvas id="progressChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header"><h3>Improvement Summary</h3></div>
                        <div class="card-body"><div id="improvementSummary"><p class="text-center">Loading summary...</p></div></div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header"><h3>Past Interviews</h3></div>
                        <div class="card-body"><div id="pastInterviewsList" class="past-interviews-list"><p class="text-center">Loading past interviews...</p></div></div>
                    </div>
                </div>
            </div>
            <div class="text-center mt-4">
                <button class="btn btn-primary" id="startAnotherInterviewBtn">Start Another Interview</button>
            </div>
        </div>`;
        // Re-attach listener
        document.getElementById('startAnotherInterviewBtn')?.addEventListener('click', () => { navigateTo('mock-interview'); showPermissionsModal(); });
}


function displayProgressHistory(historyData) {
     const improvementSummary = document.getElementById('improvementSummary');
     const pastInterviewsList = document.getElementById('pastInterviewsList');
     const chartCanvas = document.getElementById('progressChart'); // Get canvas element

     if (!improvementSummary || !pastInterviewsList || !chartCanvas) {
          console.error("History UI elements missing.");
          return;
     }

    // Improvement Summary
     improvementSummary.innerHTML = ''; // Clear loading
     const trends = historyData.trends;
     const totalInterviews = historyData.interviews?.length || 0;

     if (totalInterviews > 1 && trends) {
         const createTrendValueHTML = (value) => {
             const numValue = Number(value) || 0;
             const sign = numValue > 0 ? '+' : '';
             const colorClass = numValue > 0 ? 'text-success' : numValue < 0 ? 'text-danger' : 'text-muted';
             return `<span class="fw-bold ${colorClass}">${sign}${numValue} pts</span>`;
         };
         improvementSummary.innerHTML = `
             <div class="alert alert-info">
                 <h5>Progress Overview</h5>
                 <p>Completed ${totalInterviews} interviews. Showing trends from first to latest.</p>
                 <p>Overall Change: ${createTrendValueHTML(trends.overallImprovement)}</p>
             </div>
             <div class="d-flex justify-content-around text-center">
                 <div>Technical<br>${createTrendValueHTML(trends.technicalImprovement)}</div>
                 <div>Communication<br>${createTrendValueHTML(trends.communicationImprovement)}</div>
                 <div>Behavioral<br>${createTrendValueHTML(trends.behavioralImprovement)}</div>
             </div>`;
     } else if (totalInterviews === 1) {
         improvementSummary.innerHTML = '<div class="alert alert-light">Complete more interviews to see improvement trends.</div>';
     } else {
          improvementSummary.innerHTML = '<div class="alert alert-light">No interview history found.</div>';
     }

    // Past Interviews List
     pastInterviewsList.innerHTML = ''; // Clear loading
     if (totalInterviews > 0) {
         // Sort interviews newest first for display
         const sortedInterviews = [...historyData.interviews].sort((a, b) => new Date(b.date) - new Date(a.date));
         sortedInterviews.forEach((interview, index) => {
             const item = document.createElement('div');
             item.className = 'past-interview-item list-group-item'; // Use list-group-item for better spacing maybe
             const date = new Date(interview.date);
             const formattedDate = date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
             const formattedTime = date.toLocaleTimeString(undefined, { hour: 'numeric', minute: '2-digit'});

             item.innerHTML = `
                 <div class="d-flex w-100 justify-content-between">
                     <h6 class="mb-1">Interview #${totalInterviews - index} (${formattedDate})</h6>
                     <span class="badge bg-primary rounded-pill p-2">Overall: ${interview.overallScore || 'N/A'}</span>
                 </div>
                 <small class="text-muted">${formattedTime} - Type: ${interview.interviewType || 'General'}</small> <div class="d-flex justify-content-around mt-1 small">
                      <span>Tech: ${interview.technicalScore || 'N/A'}</span>
                      <span>Comm: ${interview.communicationScore || 'N/A'}</span>
                      <span>Behav: ${interview.behavioralScore || 'N/A'}</span>
                 </div>
                 `;
             pastInterviewsList.appendChild(item);
         });
     } else {
         pastInterviewsList.innerHTML = '<p class="text-muted">No past interviews recorded.</p>';
     }

    // Progress Chart
    displayProgressChart(historyData, chartCanvas); // Pass canvas element
}


// --- Charting ---
let progressChartInstance = null; // Keep track of the chart instance

function displayProgressChart(historyData, canvasElement) {
    if (!canvasElement) {
         console.error("Chart canvas element not found");
         return;
    }
    const ctx = canvasElement.getContext('2d');

     // Destroy previous chart instance if it exists
    if (progressChartInstance) {
        progressChartInstance.destroy();
        progressChartInstance = null;
    }


    if (!historyData.interviews || historyData.interviews.length < 1) {
        // Optionally display a message on the canvas if no data
        ctx.clearRect(0, 0, canvasElement.width, canvasElement.height); // Clear canvas
        ctx.textAlign = 'center';
        ctx.fillText('Complete interviews to see progress chart.', canvasElement.width / 2, 50);
        return;
    }

    // Sort interviews by date (oldest first for chart)
    const sortedInterviews = [...historyData.interviews].sort((a, b) => new Date(a.date) - new Date(b.date));

    const labels = sortedInterviews.map((_, index) => `Interview ${index + 1}`); // Simple labels
    const overallData = sortedInterviews.map(interview => interview.overallScore);
    const technicalData = sortedInterviews.map(interview => interview.technicalScore);
    const communicationData = sortedInterviews.map(interview => interview.communicationScore);
    const behavioralData = sortedInterviews.map(interview => interview.behavioralScore);

    progressChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                { label: 'Overall', data: overallData, borderColor: 'rgba(74, 111, 220, 1)', backgroundColor: 'rgba(74, 111, 220, 0.1)', tension: 0.1, borderWidth: 2, fill: true },
                { label: 'Technical', data: technicalData, borderColor: 'rgba(75, 192, 192, 1)', backgroundColor: 'rgba(75, 192, 192, 0.1)', tension: 0.1, hidden: true }, // Hide less important ones initially?
                { label: 'Communication', data: communicationData, borderColor: 'rgba(255, 159, 64, 1)', backgroundColor: 'rgba(255, 159, 64, 0.1)', tension: 0.1, hidden: true },
                { label: 'Behavioral', data: behavioralData, borderColor: 'rgba(153, 102, 255, 1)', backgroundColor: 'rgba(153, 102, 255, 0.1)', tension: 0.1, hidden: true }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false, // Allow chart to fill container height
            scales: {
                y: { beginAtZero: true, max: 100, title: { display: true, text: 'Score' } },
                x: { title: { display: true, text: 'Interview Session' } }
            },
            plugins: {
                legend: { position: 'top' },
                tooltip: { mode: 'index', intersect: false }
            }
        }
    });
}


// --- Conversation Display ---

function addMessageToConversation(role, content) {
    const conversationContainer = document.getElementById('conversationContainer');
    if (!conversationContainer) return;

    const messageElement = document.createElement('div');
    messageElement.classList.add('message', role); // Role: interviewer, candidate, system

    const senderElement = document.createElement('div');
    senderElement.className = 'sender';
    let senderName = 'System';
    if (role === 'interviewer') senderName = 'IRIS Interviewer';
    if (role === 'candidate') senderName = 'You';
    senderElement.textContent = senderName;

    const contentElement = document.createElement('div');
    // Sanitize content before adding? Basic prevention:
    contentElement.textContent = content; // Use textContent to prevent XSS

    messageElement.appendChild(senderElement);
    messageElement.appendChild(contentElement);
    conversationContainer.appendChild(messageElement);

    // Scroll to bottom
    conversationContainer.scrollTop = conversationContainer.scrollHeight;

    // Add to logical history (only user/assistant roles for backend)
    if (role === 'interviewer' || role === 'candidate') {
        state.conversationHistory.push({
            role: role === 'interviewer' ? 'assistant' : 'user',
            content: content
        });
    }
}

// NEW function (or modified pollAnalysisStatus start) in app.js
function checkAndLoadSessionStatus(sessionId) {
    console.log(`Checking status for session: ${sessionId}`);
    lockAllSections(); // Start with sections locked

    // Show a general loading indicator maybe?
    // Or just let the UI update based on the status check

    fetch(`${API_BASE_URL}/get-analysis-status/${sessionId}`)
        .then(response => {
            if (response.status === 404) {
                console.warn(`Session ${sessionId} from profile not found in backend. Clearing from profile.`);
                const user = irisAuth?.getCurrentUser();
                // Attempt to clear the invalid ID from the user's profile
                if (user && typeof firebase !== 'undefined' && firebase.firestore) {
                    const db = firebase.firestore(); // Get Firestore instance
                    db.collection('users').doc(user.uid).update({
                         lastActiveSessionId: firebase.firestore.FieldValue.delete() // Use FieldValue.delete()
                    }).catch(err => console.error("Failed to clear invalid sessionId from profile:", err));
                }
                lockAllSections(); // Ensure locked
                navigateTo('upload'); // Start fresh
                return null; // Stop processing this response
            }
            if (!response.ok) throw new Error(`Network response was not ok (${response.status}) checking session status`);
            return response.json();
        })
        .then(statusData => {
            if (!statusData) return; // Exit if session was not found (handled above)

            // *** IMPORTANT: Set the global state session ID ***
            state.sessionId = sessionId;
            console.log(`Set active session ID in state: ${state.sessionId}`);

            if (statusData.status === 'completed') {
                console.log(`Session ${sessionId} analysis complete. Loading data.`);
                unlockSection('analysis');
                unlockSection('prep-plan');
                unlockSection('mock-interview');
                // Check history and unlock performance/history based on actual interviews for *this* session
                checkAndUnlockHistorySections(sessionId);

                // Load the actual data now that sections are unlocked
                loadAnalysisResults(sessionId);
                loadPreparationPlan(sessionId);
                // Decide where to navigate - analysis seems logical
                navigateTo('analysis');
            } else if (statusData.status === 'processing') {
                console.log(`Session ${sessionId} still processing. Restarting polling.`);
                const progressContainer = document.getElementById('uploadProgress');
                const progressBar = document.querySelector('#uploadProgress .progress-bar');
                const progressMessage = document.getElementById('progressMessage');
                if (progressContainer) progressContainer.style.display = 'block';
                if (progressBar) progressBar.style.width = `${statusData.progress || 0}%`;
                if (progressMessage) progressMessage.textContent = `Analysis in progress (${statusData.progress || 0}%)...`;
                pollAnalysisStatus(sessionId); // Resume polling - ensure pollAnalysisStatus uses state.sessionId
                navigateTo('upload'); // Stay on upload page while polling resumes
            } else { // Failed or unknown status
                console.warn(`Session ${sessionId} has status: ${statusData.status}. Starting fresh.`);
                lockAllSections(); // Keep locked
                navigateTo('upload');
            }
        })
        .catch(error => {
            console.error('Error checking session status from profile:', error);
            lockAllSections(); // Lock on error
            navigateTo('upload'); // Go to upload on error
        });
}

// NEW Helper function in app.js to check history and unlock sections
function checkAndUnlockHistorySections(sessionIdToCheck) {
   if (!sessionIdToCheck) return; // Need a session ID
    fetch(`${API_BASE_URL}/get-progress-history/${sessionIdToCheck}`)
         .then(res => {
             if (!res.ok) { // Handle non-200 responses gracefully (e.g., 404 if no history yet)
                 console.log(`No history found or error fetching for session ${sessionIdToCheck} (status: ${res.status}). Keeping sections locked.`);
                  return null;
             }
             return res.json();
         })
         .then(historyData => {
             if (historyData && historyData.interviews?.length > 0) {
                  console.log(`Found ${historyData.interviews.length} past interviews for session ${sessionIdToCheck}. Unlocking performance/history.`);
                  unlockSection('performance');
                  unlockSection('history');
             } else {
                  console.log(`No interview history found for session ${sessionIdToCheck}. Keeping performance/history locked.`);
                  lockSection('performance'); // Ensure they remain locked if no history
                  lockSection('history');
             }
         })
          .catch(err => {
             console.error(`Error checking history for session ${sessionIdToCheck}:`, err);
             lockSection('performance'); // Lock on error
             lockSection('history');
          });
}

// --- Function to check feature access before performing actions ---
function checkFeatureAccess(featureType) {
    // Check if user is authenticated
    const user = firebase.auth().currentUser;
    if (!user) {
        showMessage('Please sign in to use this feature', 'warning');
        if (typeof irisAuth !== 'undefined' && typeof irisAuth.showSignInModal === 'function') {
            irisAuth.showSignInModal();
        }
        return false;
    }
    
    // Check if user can use this feature based on their plan
    if (!irisAuth.canUseFeature(featureType)) {
        const usageInfo = irisAuth.getUserProfile()?.usage?.[featureType] || { used: 0, limit: 0 };
        
        // If they've hit their limit, show upgrade modal
        if (usageInfo.used >= usageInfo.limit) {
            showMessage(`You've reached your ${featureType === 'resumeAnalyses' ? 'resume analysis' : 'mock interview'} limit (${usageInfo.used}/${usageInfo.limit}). Please upgrade your plan to continue.`, 'warning');
            showUpgradeModal(featureType);
            return false;
        }
    }
    
    return true;
}

// --- New function to update usage display ---
function updateUsageDisplay() {
    const userProfile = irisAuth?.getUserProfile();
    if (!userProfile || !userProfile.usage) return;
    
    // Update resume analyses counter
    const resumeUsage = userProfile.usage.resumeAnalyses || { used: 0, limit: 0 };
    const resumeCountElement = document.getElementById('resumeAnalysesCount');
    const resumeProgressBar = document.querySelector('#resumeAnalysesCount + .progress .progress-bar');
    
    if (resumeCountElement) {
        resumeCountElement.textContent = `${resumeUsage.used}/${resumeUsage.limit}`;
    }
    
    if (resumeProgressBar) {
        const percentUsed = resumeUsage.limit > 0 ? (resumeUsage.used / resumeUsage.limit) * 100 : 0;
        resumeProgressBar.style.width = `${Math.min(100, percentUsed)}%`;
        
        // Add warning color if close to limit
        if (percentUsed >= 85) {
            resumeProgressBar.classList.add('bg-warning');
        } else if (percentUsed >= 100) {
            resumeProgressBar.classList.add('bg-danger');
        } else {
            resumeProgressBar.classList.remove('bg-warning', 'bg-danger');
        }
    }
    
    // Update mock interviews counter
    const interviewUsage = userProfile.usage.mockInterviews || { used: 0, limit: 0 };
    const interviewCountElement = document.getElementById('mockInterviewsCount');
    const interviewProgressBar = document.querySelector('#mockInterviewsCount + .progress .progress-bar');
    
    if (interviewCountElement) {
        interviewCountElement.textContent = `${interviewUsage.used}/${interviewUsage.limit}`;
    }
    
    if (interviewProgressBar) {
        const percentUsed = interviewUsage.limit > 0 ? (interviewUsage.used / interviewUsage.limit) * 100 : 0;
        interviewProgressBar.style.width = `${Math.min(100, percentUsed)}%`;
        
        // Add warning color if close to limit
        if (percentUsed >= 85) {
            interviewProgressBar.classList.add('bg-warning');
        } else if (percentUsed >= 100) {
            interviewProgressBar.classList.add('bg-danger');
        } else {
            interviewProgressBar.classList.remove('bg-warning', 'bg-danger');
        }
    }
    
    // Update upgrade button visibility based on usage
    const upgradePlanBtn = document.getElementById('upgradePlanBtn');
    if (upgradePlanBtn) {
        // Show more prominently if close to limits
        if (resumeUsage.used >= resumeUsage.limit || interviewUsage.used >= interviewUsage.limit) {
            upgradePlanBtn.classList.add('btn-danger');
            upgradePlanBtn.classList.remove('btn-success');
            upgradePlanBtn.innerHTML = '<i class="fas fa-crown me-2"></i> Upgrade Now - Limits Reached!';
        } else if ((resumeUsage.limit > 0 && resumeUsage.used / resumeUsage.limit >= 0.7) || 
                  (interviewUsage.limit > 0 && interviewUsage.used / interviewUsage.limit >= 0.7)) {
            upgradePlanBtn.classList.add('btn-warning');
            upgradePlanBtn.classList.remove('btn-success', 'btn-danger');
            upgradePlanBtn.innerHTML = '<i class="fas fa-crown me-2"></i> Upgrade Soon - Limits Approaching';
        } else {
            upgradePlanBtn.classList.add('btn-success');
            upgradePlanBtn.classList.remove('btn-warning', 'btn-danger');
            upgradePlanBtn.innerHTML = '<i class="fas fa-crown me-2"></i> Upgrade Now';
        }
    }
}

// --- New function to show upgrade modal (continued) ---
function showUpgradeModal(featureType) {
    // Get current plan to determine what plans to highlight
    const currentPlan = irisAuth?.getUserProfile()?.plan || 'free';
    const modalContent = document.createElement('div');
    
    // Determine recommended plan based on feature and current plan
    let recommendedPlan = 'standard'; // Default recommendation
    
    if (featureType === 'resumeAnalyses') {
        if (currentPlan === 'free') {
            recommendedPlan = 'starter'; // From free to starter for more resume analyses
        } else if (currentPlan === 'starter') {
            recommendedPlan = 'standard'; // From starter to standard for even more
        }
    } else if (featureType === 'mockInterviews') {
        if (currentPlan === 'free' || currentPlan === 'starter') {
            recommendedPlan = 'standard'; // From free/starter to standard for interviews
        } else if (currentPlan === 'standard') {
            recommendedPlan = 'pro'; // From standard to pro for more interviews
        }
    }
    
    // Dynamic heading based on feature
    const heading = featureType === 'resumeAnalyses' 
        ? 'Upgrade for More Resume Analyses'
        : 'Upgrade for Mock Interviews';
    
    modalContent.innerHTML = `
        <div class="modal fade" id="upgradeModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${heading}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>You've reached your ${featureType === 'resumeAnalyses' ? 'resume analysis' : 'mock interview'} limit on your current plan (${currentPlan}).</strong>
                            <p class="mb-0">Upgrade to continue your interview preparation journey.</p>
                        </div>
                        
                        <div class="row mt-4">
                            <!-- Starter Plan -->
                            <div class="col-md-4 mb-4">
                                <div class="card ${recommendedPlan === 'starter' ? 'border-primary' : ''}">
                                    <div class="card-header">
                                        <h3 class="my-0 font-weight-normal">Starter Pack</h3>
                                        ${recommendedPlan === 'starter' ? '<span class="badge bg-primary position-absolute top-0 end-0 mt-2 me-2">Recommended</span>' : ''}
                                    </div>
                                    <div class="card-body">
                                        <h2 class="card-title pricing-card-title text-center">₹299</h2>
                                        <ul class="list-unstyled mt-3 mb-4">
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>5 Resume Analyses</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>1 Mock Interview</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Report</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                            <li class="text-muted"><i class="fas fa-times me-2"></i> Suggested Answers Library</li>
                                        </ul>
                                        <button type="button" class="btn btn-lg btn-block ${recommendedPlan === 'starter' ? 'btn-primary' : 'btn-outline-primary'} w-100 plan-select-btn" data-plan="starter">Select Starter</button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Standard Plan -->
                            <div class="col-md-4 mb-4">
                                <div class="card ${recommendedPlan === 'standard' ? 'border-primary highlight-card' : ''}">
                                    <div class="card-header">
                                        <h3 class="my-0 font-weight-normal">Standard Pack</h3>
                                        ${recommendedPlan === 'standard' ? '<span class="badge bg-primary position-absolute top-0 end-0 mt-2 me-2">Recommended</span>' : ''}
                                    </div>
                                    <div class="card-body">
                                        <h2 class="card-title pricing-card-title text-center">₹499</h2>
                                        <ul class="list-unstyled mt-3 mb-4">
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>10 Resume Analyses</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>3 Mock Interviews</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Reports</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Suggested Answers Library</li>
                                        </ul>
                                        <button type="button" class="btn btn-lg btn-block ${recommendedPlan === 'standard' ? 'btn-primary' : 'btn-outline-primary'} w-100 plan-select-btn" data-plan="standard">Choose Standard</button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Pro Plan -->
                            <div class="col-md-4 mb-4">
                                <div class="card ${recommendedPlan === 'pro' ? 'border-primary' : ''}">
                                    <div class="card-header">
                                        <h3 class="my-0 font-weight-normal">Pro Pack</h3>
                                        ${recommendedPlan === 'pro' ? '<span class="badge bg-primary position-absolute top-0 end-0 mt-2 me-2">Recommended</span>' : ''}
                                    </div>
                                    <div class="card-body">
                                        <h2 class="card-title pricing-card-title text-center">₹899</h2>
                                        <ul class="list-unstyled mt-3 mb-4">
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>10 Resume Analyses</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> <strong>5 Mock Interviews</strong></li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Prep Plan</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Detailed Performance Reports</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Dynamic Timeline Generator</li>
                                            <li><i class="fas fa-check text-success me-2"></i> Suggested Answers Library</li>
                                        </ul>
                                        <button type="button" class="btn btn-lg btn-block ${recommendedPlan === 'pro' ? 'btn-primary' : 'btn-outline-primary'} w-100 plan-select-btn" data-plan="pro">Go Pro</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Append modal to body
    document.body.appendChild(modalContent);
    
    // Initialize Bootstrap modal
    const upgradeModal = new bootstrap.Modal(document.getElementById('upgradeModal'));
    upgradeModal.show();
    
    // Add event listeners to plan select buttons
    document.querySelectorAll('.plan-select-btn').forEach(button => {
        button.addEventListener('click', function() {
            const planName = this.getAttribute('data-plan');
            selectPlan(planName, upgradeModal);
        });
    });
    
    // Clean up when modal is hidden
    document.getElementById('upgradeModal').addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modalContent);
    });
}

// --- Function to handle plan selection ---
function selectPlan(planName, modalInstance) {
    console.log(`Selected plan: ${planName}`);
    
    // Create payment processing modal (temporary, will be replaced with Razorpay integration)
    const processingModalContent = document.createElement('div');
    processingModalContent.innerHTML = `
        <div class="modal fade" id="paymentProcessingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Processing Payment</h5>
                    </div>
                    <div class="modal-body text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Processing your upgrade to the ${planName.charAt(0).toUpperCase() + planName.slice(1)} plan...</p>
                        <div class="progress mt-3">
                            <div id="payment-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Hide the upgrade modal
    if (modalInstance) {
        modalInstance.hide();
    }
    
    // Append and show processing modal
    document.body.appendChild(processingModalContent);
    const processingModal = new bootstrap.Modal(document.getElementById('paymentProcessingModal'));
    processingModal.show();
    
    // Simulate payment processing (for testing)
    const progressBar = document.getElementById('payment-progress-bar');
    let progress = 0;
    
    const progressInterval = setInterval(() => {
        progress += 10;
        progressBar.style.width = `${progress}%`;
        
        if (progress >= 100) {
            clearInterval(progressInterval);
            setTimeout(() => {
                // Simulate successful payment
                processingModal.hide();
                
                // Update the user's plan
                irisAuth.updateUserPlan(planName)
                    .then(() => {
                        showMessage(`Successfully upgraded to ${planName.charAt(0).toUpperCase() + planName.slice(1)} plan!`, 'success');
                        updateUsageDisplay();
                        document.body.removeChild(processingModalContent);
                    })
                    .catch(error => {
                        showMessage(`Error upgrading plan: ${error.message}`, 'danger');
                        document.body.removeChild(processingModalContent);
                    });
            }, 1000);
        }
    }, 300);
}


// NEW Helper function in app.js to lock sections dependent on analysis
function lockAllSections() {
   lockSection('analysis');
   lockSection('prep-plan');
   lockSection('mock-interview');
   lockSection('performance');
   lockSection('history');
}

firebase-auth.js:

// IRIS - Firebase Authentication Module

// Firebase configuration object
const firebaseConfig = {
  apiKey: "AIzaSyBw3b7RrcIzL7Otog58Bu52eUH5e3zab8I",
  authDomain: "iris-ai-prod.firebaseapp.com",
  projectId: "iris-ai-prod",
  storageBucket: "iris-ai-prod.firebasestorage.app",
  messagingSenderId: "223585438",
  appId: "1:223585438:web:7ceeb88553e550e1a0c78f",
  measurementId: "G-JF7KVLNXRL"
};

// Global auth state
const authState = {
  user: null,
  userProfile: null,
  initialized: false,
  subscription: null, // For payment info later
};

// Initialize Firebase
document.addEventListener('DOMContentLoaded', () => {
  initializeFirebase();
});

function initializeFirebase() {
  if (typeof firebase === 'undefined') {
    console.error('Firebase SDK not loaded!');
    showErrorMessage('Firebase initialization failed. Please check your internet connection and try again.');
    return;
  }

  try {
    // Initialize Firebase if not already initialized
    if (!firebase.apps.length) {
      firebase.initializeApp(firebaseConfig);
    }

    // Initialize Analytics if available
    if (firebase.analytics) {
      firebase.analytics();
    }

    // Set up authentication state observer
    firebase.auth().onAuthStateChanged(handleAuthStateChanged);
    
    console.log('Firebase initialized successfully');
    authState.initialized = true;
    
    // Attach event listeners to auth-related buttons
    attachAuthEventListeners();
    
  } catch (error) {
    console.error('Firebase initialization error:', error);
    showErrorMessage('Firebase initialization failed: ' + error.message);
  }
}

function handleAuthStateChanged(user) {
    console.log('Auth state changed:', user ? `User ${user.email} signed in` : 'User signed out');
    authState.user = user;

    if (user) {
        // User is signed in - Load profile FIRST, then initialize app state
        loadUserProfile(user) // loadUserProfile already handles success/failure internally
            .finally(() => {
                // This block runs *after* loadUserProfile finishes or fails
                console.log("Profile load attempt finished. Current profile state:", authState.userProfile);
                showAppView(); // Show the app view
                updateUserProfileUI(user); // Update UI with basic auth info
                // Initialize app logic *after* profile attempt and showing view
                if (typeof initializeIRISApp === 'function') {
                    initializeIRISApp(); // Now safe to check authState.userProfile
                }
            });
    } else {
        // User is signed out
        authState.userProfile = null;
        // Remove localStorage item if it was ever used (belt-and-suspenders, though we stopped setting it)
        // localStorage.removeItem('irisSessionId');
        // Reset form fields
        const resumeInput = document.getElementById('resumeFile');
        const jobDescriptionInput = document.getElementById('jobDescription');
        if (resumeInput) resumeInput.value = null;
        if (jobDescriptionInput) jobDescriptionInput.value = '';
        const progressContainer = document.getElementById('uploadProgress');
        if (progressContainer) { /* ... reset progress bar ... */ }
        // Reset other app state if needed
        // resetAppState();
        showPublicView();
        clearUserProfileUI();
    }
}


function loadUserProfile(user) {
  // Only load if we have a valid user and Firestore is available
  if (!user || typeof firebase === 'undefined' || !firebase.firestore) {
      console.warn("Cannot load profile: User null or Firebase/Firestore not available.");
      authState.userProfile = null; // Ensure profile is null
      return Promise.resolve(); // Return resolved promise so .finally() runs
  }

  const db = firebase.firestore();
  console.log(`Attempting to load profile for user: ${user.uid}`); // Add log

  // Return the promise chain
  return db.collection('users').doc(user.uid).get()
      .then(doc => {
          if (doc.exists) {
              authState.userProfile = doc.data();
              console.log('User profile loaded successfully:', authState.userProfile);
              
              // Ensure usage stats exist for existing profiles
              if (!authState.userProfile.usage) {
                  const usageUpdate = { 
                      usage: {
                          resumeAnalyses: { used: 0, limit: getPackageLimit('resumeAnalyses', authState.userProfile.plan || 'free') },
                          mockInterviews: { used: 0, limit: getPackageLimit('mockInterviews', authState.userProfile.plan || 'free') }
                      }
                  };
                  return db.collection('users').doc(user.uid).update(usageUpdate)
                      .then(() => {
                          authState.userProfile = {...authState.userProfile, ...usageUpdate};
                          console.log("Added usage stats to existing profile:", authState.userProfile);
                      })
                      .catch(updateError => {
                          console.error(`Error adding usage stats to profile:`, updateError);
                      });
              }
          } else {
              console.log('No user profile found in Firestore, attempting to create one');
              const newProfile = {
                  uid: user.uid,
                  email: user.email,
                  displayName: user.displayName || user.email.split('@')[0],
                  photoURL: user.photoURL || null, // Store null if no photoURL
                  createdAt: new Date().toISOString(),
                  plan: 'free', // Default plan
                  planPurchasedAt: new Date().toISOString(), // When free plan "started"
                  planExpiresAt: null, // No expiration for free plan
                  usage: {
                      resumeAnalyses: { used: 0, limit: getPackageLimit('resumeAnalyses', 'free') },
                      mockInterviews: { used: 0, limit: getPackageLimit('mockInterviews', 'free') }
                  },
                  // lastActiveSessionId: null // Initialize explicitly if needed
              };
              // Attempt to save the new profile (this might fail if rules deny create)
              return db.collection('users').doc(user.uid).set(newProfile)
                  .then(() => {
                      authState.userProfile = newProfile;
                      console.log("New user profile created successfully:", authState.userProfile);
                  })
                  .catch(createError => {
                      console.error(`Error creating user profile (check Firestore rules for 'create'):`, createError);
                      authState.userProfile = null; // Ensure profile is null if creation fails
                  });
          }
      })
      .catch(error => {
          console.error('Error loading user profile (check Firestore rules for \'read\'):', error);
          authState.userProfile = null; // Ensure profile is null on error
          // Don't re-throw here, let .finally() handle the next step
      });
}

function getPackageLimit(feature, packageName) {
  const limits = {
      free: {
          resumeAnalyses: 2,
          mockInterviews: 0
      },
      starter: {
          resumeAnalyses: 5,
          mockInterviews: 1
      },
      standard: {
          resumeAnalyses: 10,
          mockInterviews: 3
      },
      pro: {
          resumeAnalyses: 10,
          mockInterviews: 5
      }
  };
  
  // Default to free package limits if package not found
  if (!packageName || !limits[packageName]) {
      console.warn(`Unknown package: ${packageName}, defaulting to free`);
      packageName = 'free';
  }
  
  // Return the limit for the specified feature, or 0 if feature not found
  return limits[packageName][feature] || 0;
}

// --- New function to update user profile with plan change ---
function updateUserPlan(planName, expiresAt = null) {
  const user = firebase.auth().currentUser;
  if (!user || !firebase.firestore) {
      console.error("Cannot update plan: user not logged in or Firestore not available");
      return Promise.reject(new Error("Authentication or database error"));
  }
  
  const db = firebase.firestore();
  
  // Calculate new usage limits based on the plan
  const resumeLimit = getPackageLimit('resumeAnalyses', planName);
  const interviewLimit = getPackageLimit('mockInterviews', planName);
  
  // Keep track of current usage
  let currentResumeUsage = 0;
  let currentInterviewUsage = 0;
  
  if (authState.userProfile && authState.userProfile.usage) {
      currentResumeUsage = authState.userProfile.usage.resumeAnalyses.used || 0;
      currentInterviewUsage = authState.userProfile.usage.mockInterviews.used || 0;
  }
  
  // Update profile with new plan and limits
  const planUpdate = {
      plan: planName,
      planPurchasedAt: new Date().toISOString(),
      planExpiresAt: expiresAt, // null for free/no expiration
      'usage.resumeAnalyses.limit': resumeLimit,
      'usage.resumeAnalyses.used': currentResumeUsage,
      'usage.mockInterviews.limit': interviewLimit, 
      'usage.mockInterviews.used': currentInterviewUsage
  };
  
  return db.collection('users').doc(user.uid).update(planUpdate)
      .then(() => {
          // Update local state
          if (authState.userProfile) {
              authState.userProfile.plan = planName;
              authState.userProfile.planPurchasedAt = planUpdate.planPurchasedAt;
              authState.userProfile.planExpiresAt = expiresAt;
              
              // Ensure usage object exists
              if (!authState.userProfile.usage) {
                  authState.userProfile.usage = {};
              }
              
              // Update usage limits
              if (!authState.userProfile.usage.resumeAnalyses) {
                  authState.userProfile.usage.resumeAnalyses = { used: currentResumeUsage, limit: resumeLimit };
              } else {
                  authState.userProfile.usage.resumeAnalyses.limit = resumeLimit;
              }
              
              if (!authState.userProfile.usage.mockInterviews) {
                  authState.userProfile.usage.mockInterviews = { used: currentInterviewUsage, limit: interviewLimit };
              } else {
                  authState.userProfile.usage.mockInterviews.limit = interviewLimit;
              }
          }
          
          // Update UI elements
          updateUserProfileUI(user);
          return { success: true, plan: planName };
      })
      .catch(error => {
          console.error("Error updating user plan:", error);
          return Promise.reject(error);
      });
}

// --- New function to increment usage counter ---
function incrementUsageCounter(featureType) {
  const user = firebase.auth().currentUser;
  if (!user || !firebase.firestore) {
      console.error("Cannot increment usage: user not logged in or Firestore not available");
      return Promise.reject(new Error("Authentication or database error"));
  }
  
  // Validate feature type
  if (!['resumeAnalyses', 'mockInterviews'].includes(featureType)) {
      return Promise.reject(new Error(`Invalid feature type: ${featureType}`));
  }
  
  const db = firebase.firestore();
  
  // Increment usage counter with atomic operation
  const updateField = `usage.${featureType}.used`;
  
  return db.collection('users').doc(user.uid).update({
      [updateField]: firebase.firestore.FieldValue.increment(1)
  })
  .then(() => {
      // Update local state
      if (authState.userProfile && authState.userProfile.usage && authState.userProfile.usage[featureType]) {
          authState.userProfile.usage[featureType].used += 1;
          
          // Return updated usage info
          return {
              success: true,
              feature: featureType,
              used: authState.userProfile.usage[featureType].used,
              limit: authState.userProfile.usage[featureType].limit,
              canUseMore: authState.userProfile.usage[featureType].used < authState.userProfile.usage[featureType].limit
          };
      }
      
      return { success: true, feature: featureType };
  })
  .catch(error => {
      console.error(`Error incrementing ${featureType} usage:`, error);
      return Promise.reject(error);
  });
}

// --- New function to check if user can use a feature ---
function canUseFeature(featureType) {
  // If no profile loaded or no usage stats, default to false
  if (!authState.userProfile || !authState.userProfile.usage || !authState.userProfile.usage[featureType]) {
      return false;
  }
  
  const usage = authState.userProfile.usage[featureType];
  return usage.used < usage.limit;
}

function updateUserProfileUI(user) {
  // Update UI elements showing user info
  const userDisplayElements = document.querySelectorAll('.user-display-name');
  const userEmailElements = document.querySelectorAll('.user-email');
  const userAvatarElements = document.querySelectorAll('.user-avatar');

  const displayName = user.displayName || authState.userProfile?.displayName || user.email.split('@')[0];
  const email = user.email;
  const photoURL = user.photoURL || 'https://i.stack.imgur.com/34AD2.jpg'; // Default avatar

  userDisplayElements.forEach(el => el.textContent = displayName);
  userEmailElements.forEach(el => el.textContent = email);
  userAvatarElements.forEach(el => {
      if (el.tagName === 'IMG') {
          el.src = photoURL;
          el.alt = displayName;
      }
  });

  // Update plan info if available
  const planElements = document.querySelectorAll('.user-plan');
  const userPlanBadgeElements = document.querySelectorAll('.user-plan-badge');
  if (authState.userProfile && (planElements.length > 0 || userPlanBadgeElements.length > 0)) {
      const planName = authState.userProfile.plan || 'free';
      const formattedPlanName = planName.charAt(0).toUpperCase() + planName.slice(1);
      planElements.forEach(el => el.textContent = formattedPlanName);
      userPlanBadgeElements.forEach(el => el.textContent = formattedPlanName);
  }

  // Update usage counters
  if (authState.userProfile && authState.userProfile.usage) {
      // Resume analyses usage
      const resumeUsage = authState.userProfile.usage.resumeAnalyses || { used: 0, limit: 0 };
      const resumeCountElement = document.getElementById('resumeAnalysesCount');
      const resumeProgressBar = document.querySelector('#resumeAnalysesCount + .progress .progress-bar');
      
      if (resumeCountElement) {
          resumeCountElement.textContent = `${resumeUsage.used}/${resumeUsage.limit}`;
      }
      
      if (resumeProgressBar) {
          const percentUsed = resumeUsage.limit > 0 ? (resumeUsage.used / resumeUsage.limit) * 100 : 0;
          resumeProgressBar.style.width = `${Math.min(100, percentUsed)}%`;
          
          // Add warning color if close to limit
          if (percentUsed >= 85) {
              resumeProgressBar.classList.add('bg-warning');
          } else if (percentUsed >= 100) {
              resumeProgressBar.classList.add('bg-danger');
          } else {
              resumeProgressBar.classList.remove('bg-warning', 'bg-danger');
          }
      }
      
      // Mock interviews usage
      const interviewUsage = authState.userProfile.usage.mockInterviews || { used: 0, limit: 0 };
      const interviewCountElement = document.getElementById('mockInterviewsCount');
      const interviewProgressBar = document.querySelector('#mockInterviewsCount + .progress .progress-bar');
      
      if (interviewCountElement) {
          interviewCountElement.textContent = `${interviewUsage.used}/${interviewUsage.limit}`;
      }
      
      if (interviewProgressBar) {
          const percentUsed = interviewUsage.limit > 0 ? (interviewUsage.used / interviewUsage.limit) * 100 : 0;
          interviewProgressBar.style.width = `${Math.min(100, percentUsed)}%`;
          
          // Add warning color if close to limit
          if (percentUsed >= 85) {
              interviewProgressBar.classList.add('bg-warning');
          } else if (percentUsed >= 100) {
              interviewProgressBar.classList.add('bg-danger');
          } else {
              interviewProgressBar.classList.remove('bg-warning', 'bg-danger');
          }
      }
  }

  // Show/Hide Password Buttons based on providers
  const addPasswordBtn = document.getElementById('addPasswordBtn');
  const changePasswordBtn = document.getElementById('changePasswordBtn');
  if (user && addPasswordBtn && changePasswordBtn) {
      // Check if 'password' is listed in the providerData array
      const hasPasswordProvider = user.providerData.some(provider => provider.providerId === 'password');

      // Show "Add Password" if NO password provider exists
      addPasswordBtn.style.display = hasPasswordProvider ? 'none' : 'block';
      // Show "Change Password" if a password provider DOES exist
      changePasswordBtn.style.display = hasPasswordProvider ? 'block' : 'none';
  } else {
      // Ensure buttons are hidden if user/elements aren't ready
      if(addPasswordBtn) addPasswordBtn.style.display = 'none';
      if(changePasswordBtn) changePasswordBtn.style.display = 'none';
  }
}

// Replace this entire function in firebase-auth.js
function clearUserProfileUI() {
  // Clear user-related UI elements
  const userDisplayElements = document.querySelectorAll('.user-display-name');
  const userEmailElements = document.querySelectorAll('.user-email');
  const userAvatarElements = document.querySelectorAll('.user-avatar');
  const planElements = document.querySelectorAll('.user-plan');
  const userPlanBadgeElements = document.querySelectorAll('.user-plan-badge');

  userDisplayElements.forEach(el => el.textContent = '...'); // Use placeholder
  userEmailElements.forEach(el => el.textContent = '...'); // Use placeholder
  userAvatarElements.forEach(el => {
      if (el.tagName === 'IMG') {
          el.src = 'https://i.stack.imgur.com/34AD2.jpg'; // Default placeholder
          el.alt = 'User';
      }
  });
  planElements.forEach(el => el.textContent = '');
  userPlanBadgeElements.forEach(el => el.textContent = ''); // Clear sidebar badge

  // Reset Password Buttons visibility
  const addPasswordBtn = document.getElementById('addPasswordBtn');
  const changePasswordBtn = document.getElementById('changePasswordBtn');
  if(addPasswordBtn) addPasswordBtn.style.display = 'none'; // Hide when logged out
  if(changePasswordBtn) changePasswordBtn.style.display = 'none'; // Hide when logged out
}

// View switching logic
function showPublicView() {
  document.getElementById('public-view').style.display = 'block';
  document.getElementById('app-view').style.display = 'none';
  
  // Show active tab in public view
  const lastPublicTab = localStorage.getItem('lastPublicTab') || 'welcome-tab';
  switchPublicTab(lastPublicTab);
}

function showAppView() {
  document.getElementById('public-view').style.display = 'none';
  document.getElementById('app-view').style.display = 'flex';
  
  // Initialize IRIS app if needed
  if (typeof initializeIRISApp === 'function') {
    initializeIRISApp();
  }
}

function switchPublicTab(tabId) {
  // Hide all tabs
  document.querySelectorAll('.public-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // Show selected tab
  const selectedTab = document.getElementById(tabId);
  if (selectedTab) {
    selectedTab.classList.add('active');
    localStorage.setItem('lastPublicTab', tabId);
  }
  
  // Update tab buttons
  document.querySelectorAll('.tab-button').forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('data-tab') === tabId) {
      btn.classList.add('active');
    }
  });
}

// Authentication functions
function signInWithEmailPassword(email, password) {
  if (!firebase.auth) {
    showErrorMessage('Authentication service not available');
    return Promise.reject(new Error('Authentication service not available'));
  }
  
  return firebase.auth().signInWithEmailAndPassword(email, password)
    .then(userCredential => {
      console.log('User signed in successfully');
      hideAuthModal();
      return userCredential.user;
    })
    .catch(error => {
      console.error('Sign in error:', error);
      showErrorMessage(`Sign in failed: ${error.message}`);
      throw error;
    });
}

function signUpWithEmailPassword(email, password, displayName) {
  if (!firebase.auth) {
    showErrorMessage('Authentication service not available');
    return Promise.reject(new Error('Authentication service not available'));
  }
  
  return firebase.auth().createUserWithEmailAndPassword(email, password)
    .then(userCredential => {
      console.log('User signed up successfully');
      
      // Set display name if provided
      if (displayName) {
        return userCredential.user.updateProfile({
          displayName: displayName
        }).then(() => {
          hideAuthModal();
          return userCredential.user;
        });
      } else {
        hideAuthModal();
        return userCredential.user;
      }
    })
    .catch(error => {
      console.error('Sign up error:', error);
      showErrorMessage(`Sign up failed: ${error.message}`);
      throw error;
    });
}

function signInWithGoogle() {
  if (!firebase.auth) {
    showErrorMessage('Authentication service not available');
    return Promise.reject(new Error('Authentication service not available'));
  }
  
  const provider = new firebase.auth.GoogleAuthProvider();
  return firebase.auth().signInWithPopup(provider)
    .then(result => {
      console.log('Google sign in successful');
      hideAuthModal();
      return result.user;
    })
    .catch(error => {
      console.error('Google sign in error:', error);
      showErrorMessage(`Google sign in failed: ${error.message}`);
      throw error;
    });
}

function signOut() {
  if (!firebase.auth) { /* ... */ }
  return firebase.auth().signOut()
    .then(() => {
      console.log('User signed out successfully');
      // localStorage.removeItem('irisSessionId'); // <<< REMOVE THIS LINE
      const resumeInput = document.getElementById('resumeFile'); // Keep form reset
      const jobDescriptionInput = document.getElementById('jobDescription');
      if (resumeInput) resumeInput.value = null;
      if (jobDescriptionInput) jobDescriptionInput.value = '';
      const progressContainer = document.getElementById('uploadProgress'); // Keep progress reset
       if (progressContainer) { /* ... reset progress bar ... */ }
    })
    .catch(error => { /* ... */ });
}

// UI Helper functions
function showAuthModal(mode = 'signin') {
  const modal = document.getElementById('auth-modal');
  if (!modal) return;
  
  // Show appropriate form
  document.getElementById('signin-form').style.display = mode === 'signin' ? 'block' : 'none';
  document.getElementById('signup-form').style.display = mode === 'signup' ? 'block' : 'none';
  
  // Update modal title
  document.getElementById('auth-modal-title').textContent = mode === 'signin' ? 'Sign In' : 'Create Account';
  
  // Show modal
  const modalInstance = new bootstrap.Modal(modal);
  modalInstance.show();
}

function hideAuthModal() {
  const modal = document.getElementById('auth-modal');
  if (!modal) return;
  
  const modalInstance = bootstrap.Modal.getInstance(modal);
  if (modalInstance) {
    modalInstance.hide();
  }
}

function showErrorMessage(message, duration = 5000) {
  // Create toast or use existing error container
  const errorContainer = document.getElementById('error-messages');
  if (errorContainer) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger alert-dismissible fade show';
    errorDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    errorContainer.appendChild(errorDiv);
    
    // Auto-dismiss after duration
    setTimeout(() => {
      errorDiv.classList.remove('show');
      setTimeout(() => errorDiv.remove(), 500);
    }, duration);
  } else {
    // Fallback to alert if container doesn't exist
    console.error(message);
    alert(message);
  }
}

// Event listeners
function attachAuthEventListeners() {
  // Sign in form submission
  document.getElementById('signin-form')?.addEventListener('submit', function(e) {
    e.preventDefault();
    const email = document.getElementById('signin-email').value;
    const password = document.getElementById('signin-password').value;
    signInWithEmailPassword(email, password);
  });
  
  // Sign up form submission
  document.getElementById('signup-form')?.addEventListener('submit', function(e) {
    e.preventDefault();
    const email = document.getElementById('signup-email').value;
    const password = document.getElementById('signup-password').value;
    const name = document.getElementById('signup-name').value;
    signUpWithEmailPassword(email, password, name);
  });
  
  // Google sign in button
  document.getElementById('google-signin-button')?.addEventListener('click', function() {
    signInWithGoogle();
  });
  
  // Sign out button(s)
  document.querySelectorAll('.signout-button').forEach(button => {
    button.addEventListener('click', function() {
      signOut();
    });
  });
  
  // Modal trigger buttons
  document.querySelectorAll('[data-auth="signin"]').forEach(button => {
    button.addEventListener('click', function() {
      showAuthModal('signin');
    });
  });
  
  document.querySelectorAll('[data-auth="signup"]').forEach(button => {
    button.addEventListener('click', function() {
      showAuthModal('signup');
    });
  });
  
  // Public view tab buttons
  document.querySelectorAll('.tab-button').forEach(button => {
    button.addEventListener('click', function() {
      switchPublicTab(this.getAttribute('data-tab'));
    });
  });
}

// Export functions for global use
window.irisAuth = {
  signIn: signInWithEmailPassword,
  signUp: signUpWithEmailPassword,
  signInWithGoogle,
  signOut,
  getCurrentUser: () => authState.user,
  getUserProfile: () => authState.userProfile,
  showSignInModal: () => showAuthModal('signin'),
  showSignUpModal: () => showAuthModal('signup'),
  // Add new functions to the exported object
  canUseFeature,
  incrementUsageCounter,
  updateUserPlan,
  getPackageLimit
};

backend.py:

# -*- coding: utf-8 -*-
import os
import tempfile
import json
import re
import time
import threading
import uuid
import base64
from io import BytesIO
from datetime import datetime, timedelta
from PyPDF2 import PdfReader
from flask import Flask, request, jsonify # Removed send_file as we're not sending local files anymore
from flask_cors import CORS
import requests
from werkzeug.utils import secure_filename
import shutil
from dotenv import load_dotenv
import anthropic
import traceback

# --- Add Firebase Imports ---
import firebase_admin
from firebase_admin import credentials, firestore, storage # storage client initialized but not used yet
# --- End Firebase Imports ---

# Load environment variables (keep this)
load_dotenv()

# --- API Keys & Constants ---
# Make sure these are set in Render Environment Variables
CLAUDE_API_KEY = os.environ.get("CLAUDE_API_KEY")
CLAUDE_MODEL = "claude-3-5-sonnet-20240620"
CLAUDE_HAIKU_MODEL = "claude-3-haiku-20240307"
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
GEMINI_MODEL = "gemini-1.5-flash-latest"
GEMINI_API_URL_BASE = "https://generativelanguage.googleapis.com/v1beta/models/"
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_TTS_URL = "https://api.openai.com/v1/audio/speech"
OPENAI_STT_URL = "https://api.openai.com/v1/audio/transcriptions"
MISTRAL_API_KEY = os.environ.get("MISTRAL_API_KEY") # Added based on original code
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions" # Added based on original code
AWS_DEFAULT_REGION = os.environ.get("AWS_DEFAULT_REGION")
# AWS Keys might be needed if IAM role on Render doesn't work for Polly
# AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
# --- Boto3 import moved inside generate_speech_polly to avoid import error if not used ---

PORT = int(os.environ.get('PORT', 5000)) # Use Render's PORT env var
BASE_TEMP_DIR = tempfile.mkdtemp(prefix="iris_temp_") # For initial local save before Storage upload
# --- End Constants ---

# --- Firebase Admin SDK Initialization (Enhanced Check) ---
db = None
bucket = None
try:
    print("Attempting Firebase Admin SDK initialization...")
    service_account_json_str = os.environ.get('FIREBASE_SERVICE_ACCOUNT_JSON')
    if service_account_json_str:
        service_account_info = json.loads(service_account_json_str)
        cred = credentials.Certificate(service_account_info)
        project_id = service_account_info.get('project_id')
        if not project_id:
             raise ValueError("Project ID not found in Firebase credentials.")

        print(f"Initializing Firebase App for project: {project_id}")
        firebase_admin.initialize_app(cred, {
            # We still pass storageBucket here for default behavior reference if needed
            'storageBucket': f"{project_id}.appspot.com"
        })
        print("Firebase App initialized successfully.")

        # --- Explicitly Check Bucket Existence ---
        try:
            print("Attempting to initialize Firestore client...")
            db = firestore.client()
            print("Firestore client initialized successfully.")

            print("Attempting to initialize Storage client and check bucket...")
            bucket_name_to_check = f"{project_id}.appspot.com"
            # Try getting the bucket object explicitly by name
            check_bucket = storage.bucket(name=bucket_name_to_check)

            # Use the exists() method to verify
            if check_bucket.exists():
                 print(f"INIT CHECK: Bucket '{check_bucket.name}' confirmed to EXIST via SDK.")
                 bucket = check_bucket # Assign the verified bucket object
                 print("Storage client assigned successfully.")
            else:
                 # This case should ideally not happen if the bucket truly exists
                 print(f"INIT CHECK: Bucket '{bucket_name_to_check}' reported as NOT FOUND via SDK exists() check!")
                 bucket = None # Ensure bucket is None

        except Exception as client_init_err:
             print(f"INIT CHECK: Error during Firestore/Storage client init or bucket check: {client_init_err}")
             traceback.print_exc()
             # Allow db to be initialized even if bucket check fails? Yes, for now.
             if not db: # If db also failed
                 db = None
             bucket = None # Ensure bucket is None on error

    else:
        print("CRITICAL ERROR: FIREBASE_SERVICE_ACCOUNT_JSON environment variable not set.")
        db = None
        bucket = None

except json.JSONDecodeError as e:
    print(f"CRITICAL ERROR: Failed to parse Firebase credentials from JSON string: {e}")
except ValueError as e:
     print(f"CRITICAL ERROR: Invalid Firebase credentials or missing project_id: {e}")
except Exception as e:
    print(f"CRITICAL ERROR: Unexpected error initializing Firebase Admin SDK: {e}")
    traceback.print_exc()
# --- End Firebase Initialization ---

# Get the absolute path to the directory where backend.py is located
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
# Define the absolute path to the 'public' folder
STATIC_FOLDER_PATH = os.path.join(BASE_DIR, 'public')

# Configure Flask to serve static files from that absolute path
app = Flask(__name__, static_folder=STATIC_FOLDER_PATH, static_url_path='')

# Update allowed_origin for deployed frontend later, use "*" for initial testing if needed, but be specific for production
allowed_origin = "*" # Use Render URL or custom domain later: os.environ.get("FRONTEND_URL", "*")
CORS(app, origins=[allowed_origin], supports_credentials=True)
# --- End Flask App Setup ---


# === Firestore Helper Functions ===

def get_session_data(session_id):
    """Retrieves session data from Firestore."""
    if not db: return None
    try:
        doc_ref = db.collection('sessions').document(session_id)
        doc = doc_ref.get()
        if doc.exists:
            return doc.to_dict()
        else:
            return None
    except Exception as e:
        print(f"Error getting session {session_id} from Firestore: {e}")
        return None

def update_session_data(session_id, updates):
    """Updates specific fields for a session document in Firestore."""
    if not db:
        print(f"ERROR: Firestore not initialized. Cannot update session {session_id}")
        return False
    try:
        session_ref = db.collection('sessions').document(session_id)
        updates['last_updated'] = firestore.SERVER_TIMESTAMP
        session_ref.update(updates)
        return True
    except Exception as e:
        print(f"ERROR: Failed to update Firestore session {session_id}: {e}")
        return False

def get_interview_data(interview_id):
    """Retrieves interview data from Firestore."""
    if not db: return None
    try:
        doc_ref = db.collection('interviews').document(interview_id)
        doc = doc_ref.get()
        if doc.exists:
            return doc.to_dict()
        else:
            return None
    except Exception as e:
        print(f"Error getting interview {interview_id} from Firestore: {e}")
        return None

def update_interview_data(interview_id, updates):
    """Updates specific fields for an interview document in Firestore."""
    if not db:
        print(f"ERROR: Firestore not initialized. Cannot update interview {interview_id}")
        return False
    try:
        interview_ref = db.collection('interviews').document(interview_id)
        updates['last_updated'] = firestore.SERVER_TIMESTAMP
        interview_ref.update(updates)
        return True
    except Exception as e:
        print(f"ERROR: Failed to update Firestore interview {interview_id}: {e}")
        return False

def add_conversation_message(interview_id, role, content):
    """Adds a message to the conversation array in Firestore using ArrayUnion."""
    if not db: return False
    try:
        interview_ref = db.collection('interviews').document(interview_id)
        # === CORRECTED LINE BELOW ===
        message = {'role': role, 'content': content, 'timestamp': datetime.now().isoformat()} # Use standard datetime string
        # === END CORRECTION ===
        interview_ref.update({
            'conversation': firestore.ArrayUnion([message]),
            'last_updated': firestore.SERVER_TIMESTAMP # This top-level one is fine
        })
        # Optional: Add logging on success
        # print(f"[{interview_id}] Added '{role}' message to conversation.")
        return True
    except Exception as e:
        print(f"ERROR: Failed to add message to interview {interview_id}: {e}")
        # Check if it's the specific TypeError
        if isinstance(e, TypeError) and 'Cannot convert to a Firestore Value' in str(e):
             print(f"[{interview_id}] Likely caused by nested timestamp issue during ArrayUnion.")
        return False
# === Existing Helper Functions (Keep implementations as they were) ===

def extract_text_from_pdf(file_path):
    """Extracts text from a PDF file given a local file path."""
    # This is the simpler version handling only local paths
    pdf_source_description = f"local file: {file_path}"
    print(f"Attempting to extract text from {pdf_source_description}")
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Local file not found: {file_path}")

        reader = PdfReader(file_path)
        text = "".join([page.extract_text() + "\n" for page in reader.pages if page.extract_text()])

        print(f"Extracted {len(text)} characters from {pdf_source_description}.")
        if not text.strip():
             print(f"Warning: No text extracted from {pdf_source_description}")
        return text.strip()

    except FileNotFoundError as e:
         print(f"ERROR: PDF source not found - {e}")
         raise
    except Exception as e:
        print(f"ERROR extracting text from {pdf_source_description}: {e}")
        traceback.print_exc()
        raise Exception(f"Failed to extract text from PDF source: {e}") from e

def call_claude_api(messages, system_prompt, model=CLAUDE_MODEL, temperature=0.7, max_tokens=4096):
    if not CLAUDE_API_KEY: raise ValueError("Claude API Key is not configured.")
    user_assistant_messages = [msg for msg in messages if msg.get("role") != "system"]
    if not user_assistant_messages:
        user_assistant_messages = [{"role": "user", "content": "<BEGIN>"}] # Placeholder if needed

    print(f"--- Calling Claude ({model}) ---")
    payload = {
        "model": model, "max_tokens": max_tokens, "messages": user_assistant_messages,
        "system": system_prompt, "temperature": temperature
    }
    headers = {
        "Content-Type": "application/json", "anthropic-version": "2023-06-01",
        "x-api-key": CLAUDE_API_KEY
    }
    try:
        response = requests.post("https://api.anthropic.com/v1/messages", headers=headers, json=payload, timeout=90) # Increased timeout
        print(f"Claude API response status: {response.status_code}")
        response.raise_for_status()
        response_data = response.json()
        content_blocks = response_data.get("content", [])
        if not content_blocks: raise Exception(f"Claude API response missing 'content'. Data: {response_data}")
        claude_response_text = "".join([block.get("text", "") for block in content_blocks if block.get("type") == "text"])
        if not claude_response_text: raise Exception(f"Claude API response content block has no text. Blocks: {content_blocks}")
        return claude_response_text
    except requests.exceptions.RequestException as e:
        error_msg = f"Claude API request error ({model}): {e}"
        if hasattr(e, 'response') and e.response is not None: error_msg += f" | Status: {e.response.status_code}, Body: {e.response.text[:500]}"
        print(error_msg)
        raise Exception(error_msg) from e
    except Exception as e:
        error_msg = f"Claude API error ({model}): {e}"
        print(error_msg)
        raise Exception(error_msg) from e


def get_gemini_url(model_name):
    if not GEMINI_API_KEY: raise ValueError("Gemini API Key not configured.")
    return f"{GEMINI_API_URL_BASE}{model_name}:generateContent?key={GEMINI_API_KEY}"

def call_gemini_api(prompt, model=GEMINI_MODEL, temperature=0.4, response_mime_type=None):
    if not GEMINI_API_KEY: raise ValueError("Gemini API Key is not configured.")
    generation_config = {"temperature": temperature}
    if response_mime_type: generation_config["response_mime_type"] = response_mime_type
    payload = {"contents": [{"parts": [{"text": prompt}]}], "generationConfig": generation_config}
    try:
        gemini_url = get_gemini_url(model)
        response = requests.post(gemini_url, headers={"Content-Type": "application/json"}, json=payload, timeout=90) # Increased timeout
        response.raise_for_status()
        data = response.json()
        candidates = data.get("candidates")
        content = candidates[0].get("content") if candidates else None
        parts = content.get("parts") if content else None
        if not parts: raise Exception("Gemini API response missing required structure ('candidates'/'content'/'parts').")
        return parts[0].get("text")
    except requests.exceptions.RequestException as e:
        print(f"Gemini API request error: {e}")
        raise Exception(f"Gemini API request failed: {e}") from e
    except Exception as e:
        print(f"Gemini API Error: {e}")
        raise

def generate_speech_polly(text, voice_id="Kajal", region_name=None):
    """Generates speech using AWS Polly."""
    import boto3 # Import here to avoid global dependency if not used/configured
    from botocore.exceptions import BotoCoreError, ClientError
    try:
        effective_region = region_name if region_name else AWS_DEFAULT_REGION
        if not effective_region:
            raise ValueError("AWS Region not configured via argument or AWS_DEFAULT_REGION env var.")

        # Boto3 will automatically look for credentials (env vars, shared file, IAM role)
        polly_client = boto3.client('polly', region_name=effective_region)
        print(f"Attempting AWS Polly TTS with voice: {voice_id} in region: {polly_client.meta.region_name}")

        response = polly_client.synthesize_speech(
            Text=text, OutputFormat='mp3', VoiceId=voice_id,
            Engine='neural', LanguageCode='en-IN'
        )
        if "AudioStream" in response:
            audio_data = response['AudioStream'].read()
            print(f"AWS Polly TTS successful, generated {len(audio_data)} bytes.")
            return audio_data
        else:
            raise Exception("Polly response missing audio stream")
    except (BotoCoreError, ClientError) as e:
        print(f"AWS Polly API error: {e}")
        traceback.print_exc()
        raise Exception(f"AWS Polly API error: {e}") from e
    except Exception as e:
        print(f"Unexpected error during Polly TTS generation: {e}")
        traceback.print_exc()
        raise # Re-raise other exceptions

def generate_speech(text):
    """Generates speech from text, trying Polly then falling back to OpenAI."""
    # --- Attempt 1: AWS Polly (Kajal) ---
    if AWS_DEFAULT_REGION: # Only attempt if region is set
        try:
            print("Attempting AWS Polly TTS...")
            return generate_speech_polly(text, voice_id="Kajal", region_name=AWS_DEFAULT_REGION)
        except Exception as polly_e:
            print(f"AWS Polly TTS failed, falling back to OpenAI TTS. Error: {polly_e}")
    else:
        print("AWS_DEFAULT_REGION not set, skipping Polly TTS.")

    # --- Attempt 2: OpenAI TTS (Fallback) ---
    if not OPENAI_API_KEY: raise ValueError("Neither AWS Polly nor OpenAI TTS is configured/working.")
    print("Using fallback OpenAI TTS with 'nova' voice.")
    payload = {"model": "tts-1", "voice": "nova", "input": text, "response_format": "mp3"}
    try:
        response = requests.post(
            OPENAI_TTS_URL,
            headers={"Content-Type": "application/json", "Authorization": f"Bearer {OPENAI_API_KEY}"},
            json=payload, timeout=30
        )
        response.raise_for_status()
        print(f"OpenAI TTS fallback successful, generated {len(response.content)} bytes.")
        return response.content
    except requests.exceptions.RequestException as e:
        error_body = e.response.text[:500] if hasattr(e, 'response') and e.response else "No response body"
        print(f"OpenAI TTS API request error (fallback): {e}. Body: {error_body}")
        raise Exception(f"OpenAI TTS fallback failed: {e}") from e
    except Exception as e:
        print(f"Unexpected OpenAI TTS API error (fallback): {e}")
        raise Exception(f"Unexpected OpenAI TTS fallback error: {e}") from e

def transcribe_audio(audio_file_bytes, filename='audio.webm'):
    """Transcribes audio using OpenAI Whisper."""
    if not OPENAI_API_KEY: raise ValueError("OpenAI API Key not configured.")
    try:
        files = {"file": (filename, audio_file_bytes)}
        data = {"model": "whisper-1"}
        response = requests.post(
            OPENAI_STT_URL, headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
            files=files, data=data, timeout=60
        )
        response.raise_for_status()
        data = response.json()
        return data.get("text", "")
    except requests.exceptions.RequestException as e:
        print(f"OpenAI STT API request error: {e}")
        raise Exception(f"OpenAI STT API request failed: {e}") from e
    except Exception as e:
        print(f"OpenAI STT API error: {e}")
        raise Exception(f"OpenAI STT API error: {e}") from e


def parse_resume_with_claude(resume_text):
    """Parses resume text using the Claude API."""
    if not CLAUDE_API_KEY: raise ValueError("Claude API Key not configured.")
    system_prompt = f"""
You are an expert resume parser. Analyze this resume text:
--- START ---
{resume_text[:30000]}
--- END ---
Extract the following information and return it as a valid JSON object only (no explanations):
{{
"name": "...", "email": "...", "phoneNumber": "...", "location": "...",
"yearsOfExperience": "...", "technicalSkills": [...], "companiesWorkedAt": [...],
"projects": [...], "education": [...], "languages": [...], "frameworks": [...],
"certifications": [...], "otherRelevantInfo": "...", "currentPosition": "..."
}}
If a field is not found, use null, "", or []. Ensure name, email, phoneNumber are present if found.
"""
    messages = [{"role": "user", "content": "Parse this resume."}]
    try:
        response_content = call_claude_api(
            messages=messages, system_prompt=system_prompt,
            model=CLAUDE_HAIKU_MODEL, temperature=0.2
        )
        # Extract JSON part carefully
        json_start = response_content.find('{')
        json_end = response_content.rfind('}') + 1
        if json_start >= 0 and json_end > json_start:
            json_text = response_content[json_start:json_end]
            parsed_json = json.loads(json_text)
        else: # Fallback if no {} found, maybe Claude returned pure JSON?
             try:
                 parsed_json = json.loads(response_content)
             except json.JSONDecodeError:
                 raise ValueError(f"Could not find or parse JSON in Claude resume parsing response: {response_content[:500]}")
        # Defaulting key fields
        parsed_json.setdefault("name", None)
        parsed_json.setdefault("email", None)
        # ... add other setdefaults if needed ...
        print("Resume parsed successfully by Claude.")
        return parsed_json
    except json.JSONDecodeError as e:
        print(f"Claude resume parsing JSON error: {e}. Response: {response_content[:500]}")
        raise Exception("Claude API returned invalid JSON during resume parsing.") from e
    except Exception as e:
        print(f"Claude resume parsing error: {e}")
        raise

def match_resume_jd_with_gemini(resume_data, job_description):
    """Matches resume (JSON) with job description using Gemini."""
    print("--- Matching Resume/JD with Gemini (Requesting 5-8 Improvements) ---")
    if not GEMINI_API_KEY: raise ValueError("Gemini API Key is not configured.")
    resume_data_str = json.dumps(resume_data, indent=2) if isinstance(resume_data, dict) else str(resume_data)
    prompt = f"""
Act as an expert AI career advisor. Compare the candidate's resume data against the provided job description.
Job Description:
--- START JD ---
{job_description[:10000]}
--- END JD ---
Candidate Resume Data (JSON):
--- START JSON ---
{resume_data_str[:10000]}
--- END JSON ---
Perform a comprehensive analysis and return ONLY a single valid JSON object with these exact fields:
- "matchScore": integer 0-100
- "matchAnalysis": string (2-3 paragraphs explanation)
- "keyStrengths": array of objects [{{"strength": "...", "relevance": "..."}}]
- "skillGaps": array of objects [{{"missingSkill": "...", "importance": "high/medium/low", "suggestion": "..."}}]
- "jobRequirements": object {{"jobTitle": "...", "requiredSkills": [...], "experienceLevel": "...", "educationNeeded": "..."}}
- "resumeImprovements": array of 5-8 objects [{{"section": "...", "issue": "...", "recommendation": "...", "example": "..."}}]
Ensure valid JSON structure with NO extra text before or after.
"""
    try:
        result_text = call_gemini_api(prompt=prompt, model=GEMINI_MODEL, temperature=0.2, response_mime_type="application/json")
        # Clean potential markdown backticks
        if result_text.strip().startswith("```json"): result_text = result_text.strip()[7:]
        if result_text.strip().endswith("```"): result_text = result_text.strip()[:-3]
        match_result_obj = json.loads(result_text.strip(), strict=False)
        # Basic Validation (Example - expand as needed)
        match_result_obj.setdefault("matchScore", 0)
        match_result_obj.setdefault("matchAnalysis", "[Analysis not provided]")
        match_result_obj.setdefault("keyStrengths", [])
        match_result_obj.setdefault("skillGaps", [])
        match_result_obj.setdefault("jobRequirements", {})
        match_result_obj.setdefault("resumeImprovements", [])
        print(f"Gemini analysis complete. Match Score: {match_result_obj.get('matchScore')}")
        return match_result_obj
    except json.JSONDecodeError as e:
        print(f"Gemini analysis JSON decoding error: {e}. Response text (partial): {result_text[:1000]}")
        return {"error": "Invalid JSON from Gemini analysis", "matchScore": 0, "matchAnalysis": f"[Error: {e}]", "keyStrengths": [], "skillGaps": [], "jobRequirements": {}, "resumeImprovements": []}
    except Exception as e:
        print(f"Gemini analysis error: {e}")
        traceback.print_exc()
        return {"error": str(e), "matchScore": 0, "matchAnalysis": f"[Error: {e}]", "keyStrengths": [], "skillGaps": [], "jobRequirements": {}, "resumeImprovements": []}


def generate_interview_prep_plan(resume_match_data):
    """Generates a personalized interview prep plan using Claude (no timeline)."""
    print("--- Generating Prep Plan (No Timeline) ---")
    if not CLAUDE_API_KEY: raise ValueError("Claude API Key not configured.")
    # Extract context safely
    match_score = resume_match_data.get("matchScore", 0)
    match_analysis = resume_match_data.get("matchAnalysis", "")
    skill_gaps = resume_match_data.get("skillGaps", [])
    job_requirements = resume_match_data.get("jobRequirements", {})
    parsed_resume = resume_match_data.get("parsedResume", {}) # Assumes parsedResume is added to match_results
    try:
        gaps_str = json.dumps(skill_gaps, indent=2)
        requirements_str = json.dumps(job_requirements, indent=2)
        resume_summary_str = json.dumps({k: parsed_resume.get(k) for k in ['name', 'currentPosition', 'yearsOfExperience', 'technicalSkills']}, indent=2)
    except Exception as json_err:
        print(f"Warning: Could not serialize data for prep plan prompt - {json_err}")
        gaps_str, requirements_str, resume_summary_str = str(skill_gaps), str(job_requirements), str(parsed_resume)

    system_prompt = f"""
You are an expert interview coach creating a prep plan based on analysis.
Candidate Summary: {resume_summary_str}
Job Requirements: {requirements_str}
Identified Skill Gaps: {gaps_str}
Analysis Summary: Match Score: {match_score}/100. {match_analysis}

Create a plan as a JSON object ONLY with these sections (no timeline):
1. "focusAreas": [4-6 specific technical/non-technical topics]
2. "likelyQuestions": [15-20 objects [{{"category": "...", "question": "...", "guidance": "SPECIFIC, tailored advice (1-2 sentences)"}}]]
3. "conceptsToStudy": [Detailed technical concepts/tools based on JD and gaps]
4. "gapStrategies": [For EACH gap: [{{"gap": "...", "strategy": "Concrete advice to address gap in interview", "focus_during_prep": "What to study beforehand"}}]]

Your response MUST be only the valid JSON object. **DO NOT INCLUDE a 'preparationTimeline' section.**
"""
    messages = [{"role": "user", "content": "Generate the detailed interview preparation plan (excluding timeline)."}]
    response_content = ""
    try:
        response_content = call_claude_api(
            messages=messages, system_prompt=system_prompt, model=CLAUDE_MODEL,
            max_tokens=4096, temperature=0.5
        )
        json_start = response_content.find('{')
        json_end = response_content.rfind('}') + 1
        if json_start >= 0 and json_end > json_start:
            json_text = response_content[json_start:json_end].strip()
            prep_plan = json.loads(json_text, strict=False)
            # Basic validation
            prep_plan.setdefault("focusAreas", [])
            prep_plan.setdefault("likelyQuestions", [])
            prep_plan.setdefault("conceptsToStudy", [])
            prep_plan.setdefault("gapStrategies", [])
            if "preparationTimeline" in prep_plan: del prep_plan["preparationTimeline"]
            print("Prep plan (no timeline) generated successfully.")
            return prep_plan
        else:
            raise ValueError(f"Valid JSON object not found in prep plan response: {response_content[:1000]}")
    except json.JSONDecodeError as e:
        print(f"Prep plan JSON decoding error: {e}. Response text: {json_text[:1000]}")
        raise Exception("Claude API returned invalid JSON for prep plan.") from e
    except Exception as e:
        print(f"Error generating interview prep plan (no timeline): {e}")
        traceback.print_exc()
        raise Exception(f"Failed to generate prep plan: {str(e)}") from e

def generate_dynamic_timeline_with_gemini(session_data, days):
    """Generates a dynamic, day-by-day interview prep timeline using Gemini."""
    print(f"--- Generating Dynamic Timeline with Gemini ({days} days) ---")
    if not GEMINI_API_KEY: raise ValueError("Gemini API Key is not configured.")
    if not session_data: raise ValueError("Session data is required to generate timeline.")
    prep_plan = session_data.get('results', {}).get('prep_plan', {})
    match_results = session_data.get('results', {}).get('match_results', {})
    parsed_resume = session_data.get('results', {}).get('parsed_resume', {})
    focus_areas = prep_plan.get('focusAreas', [])
    concepts_to_study = prep_plan.get('conceptsToStudy', [])
    skill_gaps = match_results.get('skillGaps', [])
    job_title = match_results.get('jobRequirements', {}).get('jobTitle', 'the position')
    candidate_name = parsed_resume.get('name', 'Candidate')
    try:
        focus_areas_str = "- " + "\n- ".join(focus_areas) if focus_areas else "N/A"
        if isinstance(concepts_to_study, dict): concepts_str = json.dumps(concepts_to_study, indent=2)
        elif isinstance(concepts_to_study, list): concepts_str = "- " + "\n- ".join(concepts_to_study) if concepts_to_study else "N/A"
        else: concepts_str = str(concepts_to_study)
        gaps_str = json.dumps(skill_gaps, indent=2) if skill_gaps else "None identified."
    except Exception as json_err:
        print(f"Warning: Could not serialize context for timeline prompt - {json_err}")
        focus_areas_str, concepts_str, gaps_str = str(focus_areas), str(concepts_to_study), str(skill_gaps)

    prompt = f"""
Act as an expert interview coach. Create a detailed, day-by-day preparation timeline for {candidate_name} interviewing for a {job_title} position in {days} days.
Context:
* Duration: {days} days
* Key Focus Areas: {focus_areas_str[:1000]}
* Concepts to Study: {concepts_str[:2000]}
* Gaps to Address: {gaps_str[:1000]}

Instructions:
1. Create plan for {days} days + "Interview Day".
2. For each day (1 to {days}): Define `focus` (string), `schedule` (array of objects [{{"time_slot": "Optional time", "task": "Specific task..."}}]), `notes` (string). Tasks should cover concepts, question practice (STAR method), gap strategies, company research. Distribute focus areas/concepts.
3. For "Interview Day": Focus on relaxation, quick review, setup check.
4. Optionally, estimate `estimated_total_hours` (integer).
5. Output ONLY a valid JSON object: {{"timeline": [{{"day": 1/.. /"Interview Day", "focus": "...", "schedule": [...], "notes": "..."}}], "estimated_total_hours": <int, optional>}}
Strictly follow JSON format. No extra text or markdown.
"""
    try:
        result_text = call_gemini_api(prompt=prompt, model=GEMINI_MODEL, temperature=0.5, response_mime_type="application/json")
        if result_text.strip().startswith("```json"): result_text = result_text.strip()[7:]
        if result_text.strip().endswith("```"): result_text = result_text.strip()[:-3]
        timeline_data = json.loads(result_text.strip(), strict=False)
        if "timeline" not in timeline_data or not isinstance(timeline_data.get("timeline"), list):
             print("Warning: 'timeline' key missing or not a list in Gemini response.")
             timeline_data = {"timeline": [], "error": "Generated timeline structure was invalid."}
        else:
            print(f"Dynamic timeline generated successfully ({len(timeline_data['timeline'])} entries).")
        return timeline_data
    except json.JSONDecodeError as e:
        print(f"Gemini timeline JSON decoding error: {e}. Response text (partial): {result_text[:1000]}")
        return {"timeline": [], "error": f"Failed to parse timeline JSON: {e}"}
    except Exception as e:
        print(f"Error generating dynamic timeline with Gemini: {e}")
        traceback.print_exc()
        return {"timeline": [], "error": f"Failed to generate timeline: {str(e)}"}

def create_mock_interviewer_prompt(resume_data, job_data, interview_type="general"):
    """Creates the system prompt for the AI interviewer."""
    job_title = job_data.get("jobRequirements", {}).get("jobTitle", "the position")
    required_skills = job_data.get("jobRequirements", {}).get("requiredSkills", [])
    experience_level = job_data.get("jobRequirements", {}).get("experienceLevel", "")
    candidate_name = resume_data.get("name", "the candidate")
    current_position = resume_data.get("currentPosition", "their background")
    years_experience = resume_data.get("yearsOfExperience", "")
    skills = resume_data.get("technicalSkills", [])
    skills_str = ", ".join(required_skills) if required_skills else "as specified"
    candidate_skills_str = ", ".join(skills) if skills else "listed skills"
    experience_str = f" with {years_experience} of experience" if years_experience else ""

    system_prompt = f"""
You are an AI Interviewer conducting a structured mock interview. You are interviewing {candidate_name} ({current_position}{experience_str}) for a {job_title} role requiring {experience_level} experience and skills in {skills_str}. Candidate mentioned skills: {candidate_skills_str}. The interview type is '{interview_type}'.

**Persona:** Professional, engaging, PATIENT (wait for responses, don't interrupt), adaptive (ask relevant follow-ups), objective, concise.

**Mandatory Structure:** Follow these stages, adapting questions based on the '{interview_type}' focus:
1.  **Intro & Rapport (1-2 Qs):** Greet, state purpose ({job_title} mock), ask "Tell me about yourself" or similar.
2.  **Experience/Foundation:** If technical/general, ask about general experience/core skills. If behavioral, ask about past roles/teams.
3.  **Technical Deep Dive (Focus for 'technical'/'general'):** Ask specific technical questions on {skills_str}, increasing complexity. Present scenarios. Validate resume skills ({candidate_skills_str}). Ask for logic/approach for coding Qs (no live coding). Minimize/skip if purely 'behavioral'.
4.  **Project Discussion (All types):** Ask about 1-2 significant projects: contributions, challenges, tech, outcomes. Relate to {job_title}.
5.  **Behavioral/Situational (Focus for 'behavioral', include in 'general'):** Use STAR prompts ("Tell me about a time..."). Assess teamwork, problem-solving, pressure handling relevant to {job_title}/{experience_level}. Include standards like strengths/weaknesses (with examples), career goals.
6.  **Candidate Questions & Logistics (Brief):** Ask if candidate has Qs (give generic answers about mock process). Maybe one simple logistical Q if relevant (no salary).
7.  **Closing (Final Response):** Signal end. Thank candidate. Brief, neutral closing ("Thank you for sharing..."). State that a detailed analysis report will be available after. End professionally ("That concludes our mock interview...").

**Constraints:** Adhere to flow. BE PATIENT. Be concise. Ask questions, don't answer. Stay in character. No detailed feedback during the interview.
"""
    return system_prompt

def analyze_interview_performance(interview_transcript, job_requirements, resume_data):
    """Analyzes the interview transcript using Claude."""
    print("--- Starting Interview Analysis (Stricter Prompt Version) ---")
    response_content = ""
    json_text_raw = ""
    try:
        job_req_str = json.dumps(job_requirements, indent=2)
        resume_str = json.dumps(resume_data, indent=2)
        transcript_length = len(interview_transcript)
        system_prompt = f"""
You are an expert interview coach providing DETAILED and HONEST analysis of a mock interview transcript based PRIMARILY on the interaction recorded.
Job Requirements: {job_req_str[:2000]}
Candidate Resume (Context ONLY): {resume_str[:5000]}
Interview Transcript (Length: {transcript_length} chars):
--- BEGIN TRANSCRIPT ---
{interview_transcript[:20000]}
--- END TRANSCRIPT ---

**VERY IMPORTANT SCORING:** Base scores (`technicalAssessment`, `communicationAssessment`, `behavioralAssessment`) PRIMARILY on transcript evidence. Do NOT give high scores just based on the resume if the transcript lacks proof. If transcript interaction is minimal, scores MUST be low (0-30 range). State limitations in `overallAssessment` if transcript is short.

Create analysis as a JSON object ONLY with this exact structure (no extra text):
{{
"overallScore": <int 0-100, reflects transcript performance>,
"overallAssessment": "<string assessment, 2-3 paragraphs, *mention transcript limitations if any*>",
"technicalAssessment": {{"score": <int 0-100, *transcript evidence*>, "strengths": ["<string demonstrated *in transcript*>"], "weaknesses": ["<string demonstrated *in transcript*>"], "feedback": "<string feedback on technical aspects *shown in transcript*>"}},
"communicationAssessment": {{"score": <int 0-100, *transcript evidence*>, "strengths": ["<string demonstrated *in transcript*, e.g., clarity>"], "weaknesses": ["<string demonstrated *in transcript*, e.g., vagueness>"], "feedback": "<string feedback on communication *shown in transcript*>"}},
"behavioralAssessment": {{"score": <int 0-100, *transcript evidence*>, "strengths": ["<string demonstrated *in transcript*, e.g., STAR>"], "weaknesses": ["<string demonstrated *in transcript*, e.g., generic>"], "feedback": "<string feedback on behavioral aspects *shown in transcript*>"}},
"specificFeedback": [ // Focus on actual question/answer pairs from transcript
  {{"question": "<interviewer question *from transcript*>", "response": "<candidate response summary *from transcript*>", "assessment": "<feedback on *this* response>", "improvement": "<suggestion for *this* response>"}}
],
"keyImprovementAreas": [ // Derived from weaknesses observed *in transcript*
  {{"area": "<e.g., 'STAR Method Usage'>", "recommendation": "<detailed recommendation>", "practiceExercise": "<specific exercise>"}}
]
}}
"""
        messages = [{"role": "user", "content": "Analyze my interview performance based *primarily* on the provided transcript interaction."}]
        response_content = call_claude_api(
            messages=messages, system_prompt=system_prompt, model=CLAUDE_MODEL,
            max_tokens=4096, temperature=0.4
        )
        json_start = response_content.find('{')
        json_end = response_content.rfind('}') + 1
        if json_start != -1 and json_end != -1 and json_end > json_start:
            json_text_raw = response_content[json_start:json_end].strip()
            analysis = json.loads(json_text_raw, strict=False)
            print("Interview analysis generated successfully.")
            # Basic validation can be added here if needed
            analysis.setdefault("overallScore", 0)
            analysis.setdefault("overallAssessment", "[Analysis Error]")
            analysis.setdefault("technicalAssessment", {"score": 0, "strengths": [], "weaknesses": [], "feedback": ""})
            analysis.setdefault("communicationAssessment", {"score": 0, "strengths": [], "weaknesses": [], "feedback": ""})
            analysis.setdefault("behavioralAssessment", {"score": 0, "strengths": [], "weaknesses": [], "feedback": ""})
            analysis.setdefault("specificFeedback", [])
            analysis.setdefault("keyImprovementAreas", [])
            return analysis
        else:
            raise ValueError(f"Valid JSON object not found in analysis response: {response_content[:1000]}")
    except json.JSONDecodeError as e:
        error_pos = getattr(e, 'pos', '?')
        error_msg = getattr(e, 'msg', 'Unknown JSON error')
        print(f"*** JSON Decode Error during analysis: {error_msg} at position {error_pos}")
        log_text = json_text_raw if json_text_raw else response_content
        print(f"--- Raw Text Failed Parsing (partial) ---\n{log_text[:2000]}\n------------------------------------")
        raise Exception("Failed to parse valid interview analysis JSON.") from e
    except Exception as e:
        print(f"Error during interview analysis generation: {e}")
        traceback.print_exc()
        raise Exception(f"An unexpected error occurred during analysis: {str(e)}") from e

def generate_suggested_answers(transcript, resume_data, job_data):
    """Generates suggested answers for interviewer questions found in the transcript."""
    print("--- Generating Suggested Answers ---")
    if not CLAUDE_API_KEY: raise ValueError("Claude API Key not configured.")
    resume_str = json.dumps(resume_data, indent=2)
    job_req_str = json.dumps(job_data.get("jobRequirements", {}), indent=2)
    skill_gaps_str = json.dumps(job_data.get("skillGaps", []), indent=2)
    system_prompt = f"""
You are an expert interview coach reviewing a mock interview transcript. Provide strong alternative answers the candidate could have given, tailored to their profile.
Candidate Profile: {resume_str[:5000]}
Job Requirements: {job_req_str}
Identified Skill Gaps: {skill_gaps_str}
Interview Transcript:
--- BEGIN TRANSCRIPT ---
{transcript[:20000]}
--- END TRANSCRIPT ---

Instructions:
1. Identify ONLY the questions asked by the 'Interviewer'.
2. For each distinct Interviewer question:
   a. Generate 1-2 distinct, strong example answers *this candidate* could give based on their resume/job reqs.
   b. If addressing a skill gap, frame it positively.
   c. For each answer, provide a brief (1-sentence) 'rationale' (why it's good - e.g., "Uses STAR method," "Highlights relevant skill X," "Quantifies achievement").
3. Format output as a single, valid JSON object ONLY (no extra text):
{{
"suggestedAnswers": [
  {{
    "question": "<Exact Interviewer question>",
    "suggestions": [ {{"answer": "<Example Answer 1>", "rationale": "<Rationale 1>"}}, {{"answer": "<Example Answer 2>", "rationale": "<Rationale 2>"}} ]
  }}
  // ... repeat for each Interviewer question
]
}}
"""
    messages = [{"role": "user", "content": "Analyze the transcript and provide suggested answers for the interviewer questions."}]
    response_content = ""
    try:
        response_content = call_claude_api(
            messages=messages, system_prompt=system_prompt, model=CLAUDE_MODEL,
            max_tokens=4096, temperature=0.6
        )
        json_start = response_content.find('{')
        json_end = response_content.rfind('}') + 1
        if json_start != -1 and json_end != -1 and json_end > json_start:
            json_text_raw = response_content[json_start:json_end].strip()
            suggested_data = json.loads(json_text_raw, strict=False)
            if "suggestedAnswers" not in suggested_data or not isinstance(suggested_data["suggestedAnswers"], list):
                 print("Warning: 'suggestedAnswers' key missing or invalid in Claude response.")
                 suggested_data = {"suggestedAnswers": []}
            print("Suggested answers generated successfully.")
            return suggested_data
        else:
            raise ValueError("Valid JSON object not found for suggested answers.")
    except json.JSONDecodeError as e:
         print(f"*** JSON Decode Error for suggested answers: {e}")
         print(f"--- Raw Text Failed Parsing ---\n{json_text_raw[:2000]}\n---")
         raise Exception("Failed to parse suggested answers JSON.") from e
    except Exception as e:
        print(f"Error generating suggested answers: {e}")
        # print(f"Full Claude response content on error:\n{response_content}") # Uncomment for deep debug
        raise Exception(f"Failed to generate suggestions: {str(e)}") from e


def rewrite_resume_section(resume_data, job_description, section_to_improve):
    """Rewrites a specific section of the resume to better match the job description."""
    if not CLAUDE_API_KEY: raise ValueError("Claude API Key not configured.")
    resume_str = json.dumps(resume_data, indent=2)
    system_prompt = f"""
You are an expert resume writer improving the "{section_to_improve}" section of a resume for a specific job.
Resume Data: {resume_str[:10000]}
Job Description: {job_description[:10000]}
Section to Improve: {section_to_improve}

Rewrite the {section_to_improve} section to be aligned with job requirements, use action verbs, quantify achievements, and be ATS-friendly.
Format response as a JSON object ONLY:
{{
"original": "[current content]",
"improved": "[your rewritten content]",
"explanations": [ {{"change": "[specific change]", "rationale": "[why it improves]"}} ]
}}
No additional explanation.
"""
    messages = [{"role": "user", "content": f"Please rewrite the {section_to_improve} section."}]
    response_content = ""
    try:
        response_content = call_claude_api(messages=messages, system_prompt=system_prompt, model=CLAUDE_MODEL)
        json_start = response_content.find('{')
        json_end = response_content.rfind('}') + 1
        if json_start >= 0 and json_end > json_start:
            json_text = response_content[json_start:json_end]
            rewrite_result = json.loads(json_text)
        else: # Fallback
             rewrite_result = json.loads(response_content)
        print(f"Resume section '{section_to_improve}' rewritten successfully.")
        return rewrite_result
    except json.JSONDecodeError as e:
        print(f"Rewrite JSON decoding error: {e}. Response: {response_content[:500]}")
        raise Exception("Failed to generate valid resume rewrite JSON.") from e
    except Exception as e:
        print(f"Error rewriting resume section: {e}")
        raise

def get_duration(start_time_str, end_time_str):
    """Calculate duration between two ISO format datetime strings."""
    if not start_time_str or not end_time_str: return "N/A"
    try:
        start_time = datetime.fromisoformat(start_time_str)
        end_time = datetime.fromisoformat(end_time_str)
        duration_seconds = (end_time - start_time).total_seconds()
        minutes = int(duration_seconds // 60)
        seconds = int(duration_seconds % 60)
        return f"{minutes}m {seconds}s"
    except Exception: return "N/A"


def get_user_usage(user_id):
    """Retrieves user profile including usage data from Firestore. Ensures default structure exists."""
    if not db or not user_id:
        return None

    try:
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()

        if user_doc.exists:
            user_data = user_doc.to_dict()
            needs_update = False

            # Ensure 'plan' exists, default to 'free'
            if 'plan' not in user_data:
                user_data['plan'] = 'free'
                # Note: We might not want to update the plan here,
                # just use 'free' for limit calculation.
                # Let's assume plan exists or is handled during user creation.

            current_plan = user_data.get('plan', 'free')

            # Ensure 'usage' map exists
            if 'usage' not in user_data:
                user_data['usage'] = {}
                needs_update = True

            # Ensure 'resumeAnalyses' structure exists
            if 'resumeAnalyses' not in user_data['usage']:
                user_data['usage']['resumeAnalyses'] = {'used': 0, 'limit': get_package_limit(current_plan, 'resumeAnalyses')}
                needs_update = True
            elif 'used' not in user_data['usage']['resumeAnalyses'] or 'limit' not in user_data['usage']['resumeAnalyses']:
                # If partially missing, reset it based on current plan
                user_data['usage']['resumeAnalyses'] = {
                    'used': user_data['usage']['resumeAnalyses'].get('used', 0), # Keep existing used count if possible
                    'limit': get_package_limit(current_plan, 'resumeAnalyses')
                }
                needs_update = True

            # Ensure 'mockInterviews' structure exists
            if 'mockInterviews' not in user_data['usage']:
                 user_data['usage']['mockInterviews'] = {'used': 0, 'limit': get_package_limit(current_plan, 'mockInterviews')}
                 needs_update = True
            elif 'used' not in user_data['usage']['mockInterviews'] or 'limit' not in user_data['usage']['mockInterviews']:
                 user_data['usage']['mockInterviews'] = {
                     'used': user_data['usage']['mockInterviews'].get('used', 0),
                     'limit': get_package_limit(current_plan, 'mockInterviews')
                 }
                 needs_update = True

            # If the structure needed fixing, update the document in Firestore
            if needs_update:
                print(f"[{user_id}] Initializing/Fixing usage structure in Firestore.")
                try:
                    user_ref.update({'usage': user_data['usage']})
                except Exception as update_err:
                     print(f"[{user_id}] WARNING: Failed to update usage structure: {update_err}")
                     # Proceed with potentially stale data, or return None?
                     # For now, proceed. The increment might still fail if update failed.

            return user_data
        else:
            print(f"User {user_id} not found in Firestore")
            # If user doc doesn't exist, should we create it? No, auth should handle that.
            return None

    except Exception as e:
        print(f"Error retrieving user usage for {user_id}: {e}")
        traceback.print_exc()
        return None


def get_package_limit(package_name, feature_type):
    """Returns the limit for a specific feature based on package type."""
    limits = {
        'free': {
            'resumeAnalyses': 2,
            'mockInterviews': 0
        },
        'starter': {
            'resumeAnalyses': 5,
            'mockInterviews': 1
        },
        'standard': {
            'resumeAnalyses': 10,
            'mockInterviews': 3
        },
        'pro': {
            'resumeAnalyses': 10,
            'mockInterviews': 5
        }
    }
    
    # Default to free package if not found
    if not package_name or package_name not in limits:
        print(f"Warning: Unknown package '{package_name}', defaulting to free")
        package_name = 'free'
    
    # Return the limit for the feature, or 0 if feature not found
    return limits[package_name].get(feature_type, 0)


def check_feature_access(user_id, feature_type):
    """Checks if a user has access to a specific feature based on their plan."""
    if not db or not user_id:
        return {'allowed': False, 'error': 'Database or user ID not available'}
    
    try:
        user_data = get_user_usage(user_id)
        
        if not user_data:
            return {'allowed': False, 'error': 'User profile not found'}
        
        if 'usage' not in user_data or feature_type not in user_data['usage']:
            return {'allowed': False, 'error': 'Usage data not found'}
        
        usage = user_data['usage'][feature_type]
        currently_used = usage.get('used', 0)
        limit = usage.get('limit', 0)
        
        # Check if user has used all their available resources
        if currently_used >= limit:
            return {
                'allowed': False,
                'error': f"Usage limit reached for {feature_type}",
                'used': currently_used,
                'limit': limit,
                'plan': user_data.get('plan', 'free')
            }
        
        return {
            'allowed': True,
            'used': currently_used,
            'limit': limit,
            'plan': user_data.get('plan', 'free')
        }
        
    except Exception as e:
        print(f"Error checking feature access for {user_id} ({feature_type}): {e}")
        traceback.print_exc()
        return {'allowed': False, 'error': f'Server error: {str(e)}'}


def increment_usage_counter(user_id, feature_type):
    """Increments usage counter for a specific feature."""
    if not db or not user_id:
        return {'success': False, 'error': 'Database or user ID not available'}
    
    try:
        user_ref = db.collection('users').document(user_id)
        
        # Check if user exists
        user_doc = user_ref.get()
        if not user_doc.exists:
            return {'success': False, 'error': 'User profile not found'}
        
        # Increment counter using atomic operation
        update_field = f'usage.{feature_type}.used'
        
        # Perform the increment
        user_ref.update({
            update_field: firestore.Increment(1)
        })
        
        # Get updated count
        updated_user = user_ref.get().to_dict()
        current_usage = updated_user.get('usage', {}).get(feature_type, {}).get('used', 0)
        usage_limit = updated_user.get('usage', {}).get(feature_type, {}).get('limit', 0)
        
        return {
            'success': True,
            'used': current_usage,
            'limit': usage_limit,
            'remaining': max(0, usage_limit - current_usage)
        }
        
    except Exception as e:
        print(f"Error incrementing usage counter for {user_id} ({feature_type}): {e}")
        traceback.print_exc()
        return {'success': False, 'error': f'Server error: {str(e)}'}



# === Flask Routes ===

@app.route('/test', methods=['GET'])
def test_route():
    """Simple health check endpoint."""
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    db_status = "OK" if db else "Unavailable"
    bucket_status = "OK" if bucket else "Unavailable"
    config_status = {
        "firebase_admin_sdk": "OK" if firebase_admin._DEFAULT_APP_NAME in firebase_admin._apps else "Not Initialized",
        "firestore_client": db_status,
        "storage_client": bucket_status,
        "claude_ok": bool(CLAUDE_API_KEY),
        "gemini_ok": bool(GEMINI_API_KEY),
        "openai_ok": bool(OPENAI_API_KEY),
        "mistral_ok": bool(MISTRAL_API_KEY),
        "aws_region_ok": bool(AWS_DEFAULT_REGION)
    }
    return jsonify({
        'status': 'ok',
        'message': f'IRIS backend server running at {now}',
        'config_status': config_status
    })

# Replace this entire route function in backend.py
@app.route('/analyze-resume', methods=['POST'])
def analyze_resume():
    """
    Analyzes resume against JD, enforces usage limits,
    increments usage counter, creates session in Firestore, starts background analysis,
    updates user profile with lastActiveSessionId, AND returns updated usage info.
    """
    session_id = None
    temp_session_dir = None
    temp_resume_path = None
    user_id = None

    try:
        start_time = time.time()

        # --- Validate Request ---
        if 'resumeFile' not in request.files:
            return jsonify({'error': 'No resume file'}), 400

        resume_file = request.files['resumeFile']
        job_description = request.form.get('jobDescription')
        user_id = request.form.get('userId')

        if not job_description:
            return jsonify({'error': 'Job description required'}), 400

        if not resume_file or not resume_file.filename:
            return jsonify({'error': 'Invalid resume file'}), 400

        if not user_id:
            return jsonify({'error': 'User ID required for session tracking'}), 400

        resume_filename = secure_filename(resume_file.filename)
        if not (resume_file.content_type == 'application/pdf' or resume_filename.lower().endswith('.pdf')):
            return jsonify({'error': 'Only PDF resumes supported'}), 400

        if not db:
            return jsonify({'error': 'Database unavailable'}), 503
        # --- End Validation ---

        # --- Check usage limits ---
        access_check = check_feature_access(user_id, 'resumeAnalyses')
        if not access_check.get('allowed', False):
            # Return specific error indicating limit reached
            return jsonify({
                'error': access_check.get('error', 'Usage limit reached'),
                'limitReached': True, # Flag for frontend
                'used': access_check.get('used', 0),
                'limit': access_check.get('limit', 0),
                'plan': access_check.get('plan', 'free')
            }), 403  # Forbidden due to limits
        # --- End usage limit check ---

        session_id = str(uuid.uuid4())
        print(f"[{session_id}] Received /analyze-resume request for file: {resume_filename} from user: {user_id}")

        # === Temporary Local File Handling ===
        try:
            temp_session_dir = os.path.join(BASE_TEMP_DIR, session_id)
            os.makedirs(temp_session_dir, exist_ok=True)
            temp_resume_path = os.path.join(temp_session_dir, resume_filename)
            resume_file.save(temp_resume_path)
            print(f"[{session_id}] Resume temporarily saved locally to: {temp_resume_path}")
        except Exception as file_err:
            print(f"[{session_id}] ERROR: Failed to save temporary resume file: {file_err}")
            traceback.print_exc()
            return jsonify({'error': f'Server file system error: {str(file_err)}'}), 500
        # === End File Handling ===

        # --- Increment Usage Counter (BEFORE creating session, in case of errors) ---
        # This function now returns {'success': True/False, 'used': N, 'limit': M, 'remaining': X}
        increment_result = increment_usage_counter(user_id, 'resumeAnalyses')
        if not increment_result.get('success', False):
            error_msg = increment_result.get('error', 'Failed to update usage counter')
            print(f"[{session_id}] ERROR: {error_msg}")
            # Clean up temp file if usage increment fails
            if temp_session_dir and os.path.exists(temp_session_dir):
                try:
                    shutil.rmtree(temp_session_dir)
                except Exception as cleanup_err:
                    print(f"[{session_id}] Error during cleanup after usage error: {cleanup_err}")
            return jsonify({'error': error_msg}), 500
        # --- End Usage Increment ---

        # --- Initialize session doc in Firestore ---
        session_ref = db.collection('sessions').document(session_id)
        initial_session_data = {
            'status': 'processing',
            'progress': 5,
            'userId': user_id,
            'resume_filename_temp': resume_filename,
            'job_description': job_description,
            'start_time': datetime.now().isoformat(),
            'results': {},
            'errors': [],
            'last_updated': firestore.SERVER_TIMESTAMP,
             # Add usage tracking to session for reference (using data from increment_result)
            'usage_info': {
                'feature': 'resumeAnalyses',
                'used': increment_result.get('used', 0),
                'limit': increment_result.get('limit', 0)
            }
        }
        session_ref.set(initial_session_data)
        print(f"[{session_id}] Initial session created in Firestore for user {user_id}.")
        # --- End Firestore Init ---

        # --- Update User Profile with lastActiveSessionId ---
        try:
            user_ref = db.collection('users').document(user_id)
            user_ref.update({
                'lastActiveSessionId': session_id,
                'lastSessionUpdate': firestore.SERVER_TIMESTAMP
            })
            print(f"[{session_id}] Updated user {user_id} profile with lastActiveSessionId.")
        except Exception as profile_update_err:
            print(f"[{session_id}] WARNING: Failed to update user {user_id} profile with last session ID: {profile_update_err}")
        # --- End User Profile Update ---

        # --- Define background task ---
        # (Keep the existing process_resume_background function definition as is)
        def process_resume_background(current_session_id, resume_local_path, jd, associated_user_id):
            session_status = 'failed'; error_list = []
            try:
                # (Existing background processing logic...)
                print(f"[{current_session_id}] Background task started for local file: {resume_local_path}, User: {associated_user_id}")
                update_session_data(current_session_id, {'progress': 10, 'status_detail': 'Extracting text'})
                resume_text = extract_text_from_pdf(resume_local_path)
                if not resume_text: raise ValueError("Failed to extract text from PDF.")
                update_session_data(current_session_id, {'progress': 30, 'status_detail': 'Parsing resume'})
                parsed_resume = parse_resume_with_claude(resume_text)
                if not parsed_resume or not parsed_resume.get("name"): raise ValueError("Failed to parse resume.")
                update_session_data(current_session_id, {'progress': 50, 'status_detail': 'Matching resume/JD'})
                match_results = match_resume_jd_with_gemini(parsed_resume, jd)
                if match_results.get("error"): raise ValueError(f"JD matching failed: {match_results['error']}")
                match_results['parsedResume'] = parsed_resume # Add parsed data here for context
                update_session_data(current_session_id, {'progress': 80, 'status_detail': 'Generating prep plan'})
                prep_plan = generate_interview_prep_plan(match_results)
                if not prep_plan: raise ValueError("Failed to generate prep plan.")
                final_results = { 'parsed_resume': parsed_resume, 'match_results': match_results, 'prep_plan': prep_plan }
                update_session_data(current_session_id, { 'results': final_results, 'status': 'completed', 'progress': 100, 'status_detail': 'Analysis complete', 'end_time': datetime.now().isoformat() })
                session_status = 'completed'
            except Exception as e:
                # (Existing error handling...)
                error_msg = f"Error in background task for {current_session_id}: {e}"; print(error_msg); traceback.print_exc(); error_list.append(str(e))
                update_session_data(current_session_id, { 'status': 'failed', 'errors': firestore.ArrayUnion([str(e)]), 'status_detail': f'Error: {str(e)[:100]}...', 'end_time': datetime.now().isoformat() })
            finally:
                # (Existing cleanup logic...)
                dir_to_remove = os.path.dirname(resume_local_path)
                try:
                    if os.path.exists(dir_to_remove): print(f"[{current_session_id}] Cleaning up temp dir: {dir_to_remove}"); shutil.rmtree(dir_to_remove)
                except Exception as cleanup_error: print(f"[{current_session_id}] WARNING: Failed to cleanup temp dir {dir_to_remove}: {cleanup_error}")
                print(f"[{current_session_id}] Background processing finished with status: {session_status}")
        # --- End background task definition ---

        # Start background thread
        processing_thread = threading.Thread(target=process_resume_background, args=(session_id, temp_resume_path, job_description, user_id))
        processing_thread.daemon = True
        processing_thread.start()

        print(f"[{session_id}] /analyze-resume request completed in {time.time() - start_time:.2f}s (background running).")

        # *** CORRECTED RETURN VALUE ***
        # Return the latest usage info obtained from increment_result
        return jsonify({
            'sessionId': session_id,
            'status': 'processing',
            'message': 'Resume analysis started',
            'usageInfo': { # Include updated usage info
                'feature': 'resumeAnalyses',
                'used': increment_result.get('used', 0),
                'limit': increment_result.get('limit', 0),
                'remaining': increment_result.get('remaining', 0)
            }
        }), 202 # Accepted

    except Exception as e:
        print(f"Error in /analyze-resume route: {e}")
        traceback.print_exc()
        if session_id and db:
            update_session_data(session_id, {'status': 'failed', 'errors': firestore.ArrayUnion([f'Route level error: {str(e)}'])})
        if temp_resume_path and os.path.exists(os.path.dirname(temp_resume_path)):
            try:
                shutil.rmtree(os.path.dirname(temp_resume_path))
            except Exception as cleanup_err:
                print(f"Error cleaning up temp dir during route exception: {cleanup_err}")
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@app.route('/get-analysis-status/<session_id>', methods=['GET'])
def get_analysis_status(session_id):
    """Returns the current status of the resume analysis from Firestore."""
    session_data = get_session_data(session_id)
    if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404
    try:
        start_time = session_data.get('start_time')
        end_time = session_data.get('end_time')
        last_updated = session_data.get('last_updated')
        response = {
            'sessionId': session_id,
            'status': session_data.get('status', 'unknown'),
            'progress': session_data.get('progress', 0),
            'statusDetail': session_data.get('status_detail', ''), # Add detailed status message
            'startTime': start_time,
            'endTime': end_time,
            'lastUpdated': last_updated.isoformat() if hasattr(last_updated, 'isoformat') else str(last_updated)
        }
        if session_data.get('status') == 'completed':
            results = session_data.get('results', {})
            parsed = results.get('parsed_resume', {})
            matched = results.get('match_results', {})
            response['summary'] = {
                'name': parsed.get('name'),
                'matchScore': matched.get('matchScore'),
                'analysisComplete': True,
                'prepPlanComplete': 'prep_plan' in results
            }
        if session_data.get('status') == 'failed':
            response['errors'] = session_data.get('errors', ['Unknown error occurred'])
        return jsonify(response)
    except Exception as e:
        print(f"Error processing status for {session_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error processing status: {str(e)}'}), 500


@app.route('/get-full-analysis/<session_id>', methods=['GET'])
def get_full_analysis(session_id):
    """Returns the complete analysis results from Firestore."""
    session_data = get_session_data(session_id)
    if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404
    try:
        status = session_data.get('status')
        if status != 'completed':
            return jsonify({
                 'status': status or 'unknown',
                 'progress': session_data.get('progress', 0),
                 'message': 'Analysis not yet completed'
            }), 400 # Bad Request or 202 Accepted might be better if still processing

        results = session_data.get('results', {})
        # Return only the core results needed by the frontend for display
        return jsonify({
             'sessionId': session_id,
             'parsedResume': results.get('parsed_resume'), # Keep for context/potential use
             'matchResults': results.get('match_results'),
             'prepPlan': results.get('prep_plan')
        })
    except Exception as e:
        print(f"Error retrieving full analysis for {session_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error retrieving analysis: {str(e)}'}), 500


@app.route('/generate-dynamic-timeline', methods=['POST'])
def generate_dynamic_timeline_route():
    """Generates a dynamic interview preparation timeline."""
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        session_id = data.get('sessionId')
        days_str = data.get('days')
        if not session_id: return jsonify({'error': 'Session ID required'}), 400
        if not days_str: return jsonify({'error': 'Number of days required'}), 400
        try:
            days = int(days_str)
            if days <= 0 or days > 90: raise ValueError("Invalid number of days.")
        except ValueError: return jsonify({'error': 'Please enter valid days (1-90).'}), 400

        session_data = get_session_data(session_id)
        if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404
        if session_data.get('status') != 'completed' or not session_data.get('results', {}).get('prep_plan'):
             return jsonify({'error': 'Completed analysis with prep plan required first'}), 400

        print(f"[{session_id}] Request received for dynamic timeline: {days} days")
        timeline_result = generate_dynamic_timeline_with_gemini(session_data, days)
        if "error" in timeline_result:
             error_msg = timeline_result.get('error', 'Timeline generation failed.')
             print(f"[{session_id}] Error generating dynamic timeline: {error_msg}")
             return jsonify({'error': error_msg}), 500
        return jsonify(timeline_result)
    except Exception as e:
        print(f"Error in /generate-dynamic-timeline route: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error generating timeline: {str(e)}'}), 500


@app.route('/rewrite-resume-section', methods=['POST'])
def rewrite_resume_section_route():
    """Rewrites a specific section of the resume."""
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        session_id = data.get('sessionId')
        section = data.get('section')
        if not session_id or not section: return jsonify({'error': 'Session ID and section required'}), 400

        session_data = get_session_data(session_id)
        if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404
        if session_data.get('status') != 'completed': return jsonify({'error': 'Analysis not completed'}), 400

        resume_data = session_data.get('results', {}).get('parsed_resume')
        job_description = session_data.get('job_description')
        if not resume_data or not job_description: return jsonify({'error': 'Required data missing from session'}), 500

        rewrite_result = rewrite_resume_section(resume_data, job_description, section)
        return jsonify(rewrite_result)
    except Exception as e:
        print(f"Error in /rewrite-resume-section: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}'}), 500


# Replace this entire route function in backend.py
@app.route('/start-mock-interview', methods=['POST'])
def start_mock_interview():
    """
    Initializes a new mock interview session in Firestore, with usage limit checks,
    increments counter, and returns updated usage info.
    """
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        session_id = data.get('sessionId')
        interview_type = data.get('interviewType', 'general')
        if not session_id: return jsonify({'error': 'Session ID required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503

        # --- Get session data to retrieve user ID ---
        session_data = get_session_data(session_id)
        if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404
        if session_data.get('status') != 'completed': return jsonify({'error': 'Analysis not completed'}), 400

        # Get user ID from session
        user_id = session_data.get('userId')
        if not user_id: return jsonify({'error': 'User ID not found in session'}), 400

        # --- Check usage limits for mock interviews ---
        access_check = check_feature_access(user_id, 'mockInterviews')
        if not access_check.get('allowed', False):
            # Return specific error indicating limit reached
            return jsonify({
                'error': access_check.get('error', 'Usage limit reached for mock interviews'),
                'limitReached': True, # Flag for frontend
                'used': access_check.get('used', 0),
                'limit': access_check.get('limit', 0),
                'plan': access_check.get('plan', 'free')
            }), 403  # Forbidden due to limits

        # --- Fetch data required for the interview ---
        resume_data = session_data.get('results', {}).get('parsed_resume')
        job_data = session_data.get('results', {}).get('match_results')
        if not resume_data or not job_data: return jsonify({'error': 'Required analysis data missing'}), 500

        # --- Increment Usage Counter BEFORE creating interview ---
        # This function now returns {'success': True/False, 'used': N, 'limit': M, 'remaining': X}
        increment_result = increment_usage_counter(user_id, 'mockInterviews')
        if not increment_result.get('success', False):
            error_msg = increment_result.get('error', 'Failed to update usage counter')
            print(f"[{session_id}] ERROR: {error_msg}")
            return jsonify({'error': error_msg}), 500

        # --- Create interview ID and generate system prompt ---
        interview_id = str(uuid.uuid4())
        system_prompt = create_mock_interviewer_prompt(resume_data, job_data, interview_type)

        # --- Generate initial greeting ---
        initial_prompt = f"Start the '{interview_type}' interview with {resume_data.get('name', 'the candidate')}. Give a brief professional greeting and ask your first question."
        try:
            greeting = call_claude_api(
                messages=[{"role": "user", "content": initial_prompt}],
                system_prompt=system_prompt, model=CLAUDE_MODEL
            )
        except Exception as e:
            print(f"[{session_id}] Error generating greeting for interview {interview_id}: {e}")
            greeting = f"Hello {resume_data.get('name', 'there')}. Welcome to your {interview_type} mock interview. Let's begin. Can you start by telling me a bit about yourself and your background?"

        # --- Create interview document in Firestore ---
        interview_doc_ref = db.collection('interviews').document(interview_id)
        interview_data_to_save = {
            'sessionId': session_id,
            'userId': user_id,  # Store user ID directly in interview doc
            'interviewType': interview_type,
            'system_prompt_summary': system_prompt[:1000] + "...",
            'conversation': [{'role': 'assistant', 'content': greeting, 'timestamp': datetime.now().isoformat()}],
            'status': 'active',
            'start_time': datetime.now().isoformat(),
            'last_updated': firestore.SERVER_TIMESTAMP,
            'resume_data_snapshot': resume_data,
            'job_data_snapshot': job_data,
            'analysis_status': 'not_started',
            'analysis': None,
            # Add usage tracking info to interview (using data from increment_result)
            'usage_info': {
                'feature': 'mockInterviews',
                'used': increment_result.get('used', 0),
                'limit': increment_result.get('limit', 0)
            }
        }
        interview_doc_ref.set(interview_data_to_save)
        print(f"[{session_id}] Started interview {interview_id} of type {interview_type} for user {user_id}.")

        # *** CORRECTED RETURN VALUE ***
        # Return the latest usage info obtained from increment_result
        return jsonify({
            'interviewId': interview_id,
            'sessionId': session_id,
            'interviewType': interview_type,
            'greeting': greeting,
            'usageInfo': { # Include updated usage info
                'feature': 'mockInterviews',
                'used': increment_result.get('used', 0),
                'limit': increment_result.get('limit', 0),
                'remaining': increment_result.get('remaining', 0)
            }
        }) # OK (200)

    except Exception as e:
        print(f"Error in /start-mock-interview: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error starting interview: {str(e)}'}), 500


@app.route('/interview-response', methods=['POST'])
def interview_response():
    """Processes user response, gets AI response, updates Firestore conversation."""
    try:
        data = request.get_json()
        interview_id = data.get('interviewId')
        user_response = data.get('userResponse')
        if not interview_id: return jsonify({'error': 'Interview ID required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503

        interview_data = get_interview_data(interview_id)
        if interview_data is None: return jsonify({'error': 'Interview session not found'}), 404
        if interview_data.get('status') != 'active': return jsonify({'error': 'Interview is not active'}), 400

        # Add user response to conversation in Firestore
        if not add_conversation_message(interview_id, 'user', user_response):
             return jsonify({'error': 'Failed to save user response'}), 500

        # Refresh interview_data to get latest conversation for Claude context
        # Note: This reads again, potential race condition if rapid fire. Consider passing conversation directly.
        current_conversation = get_interview_data(interview_id).get('conversation', [])
        system_prompt = interview_data.get('system_prompt', '') # Fetch stored prompt

        # Generate interviewer's next response
        try:
            # Reformat conversation for Claude API if needed (role 'user'/'assistant')
            api_conversation = [{'role': msg['role'], 'content': msg['content']} for msg in current_conversation]

            interviewer_response = call_claude_api(
                messages=api_conversation, system_prompt=system_prompt, model=CLAUDE_MODEL
            )
            # Add AI response to conversation in Firestore
            if not add_conversation_message(interview_id, 'assistant', interviewer_response):
                 # Log error but maybe still return response to user?
                 print(f"[{interview_id}] Failed to save assistant response to Firestore, but proceeding.")

        except Exception as e:
            print(f"[{interview_id}] Error generating interviewer response: {e}")
            interviewer_response = "I seem to be having a technical difficulty. Could you please repeat your last point or perhaps elaborate further?"
            # Attempt to save error message as assistant response
            add_conversation_message(interview_id, 'assistant', interviewer_response)

        return jsonify({'interviewerResponse': interviewer_response})
    except Exception as e:
        print(f"Error in /interview-response route for {interview_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}'}), 500


@app.route('/process-audio', methods=['POST'])
def process_audio():
    """Processes audio, transcribes it, returns transcription."""
    try:
        if 'audio' not in request.files: return jsonify({'error': 'No audio file'}), 400
        audio_file = request.files['audio']
        interview_id = request.form.get('interviewId') # Check if interview ID is needed here
        if not audio_file or not audio_file.filename: return jsonify({'error': 'Invalid audio file'}), 400
        # No check for interview_id needed if just transcribing, but good practice if context matters

        audio_bytes = audio_file.read()
        transcribed_text = transcribe_audio(audio_bytes, audio_file.filename)
        print(f"Audio transcribed (interview: {interview_id if interview_id else 'N/A'}), length: {len(transcribed_text)}")
        return jsonify({'transcription': transcribed_text})
    except Exception as e:
        print(f"Error in /process-audio: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error transcribing audio: {str(e)}'}), 500


@app.route('/generate-tts', methods=['POST'])
def generate_tts():
    """Generates speech from text."""
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        text = data.get('text')
        if not text: return jsonify({'error': 'Text required'}), 400

        audio_content = generate_speech(text)
        audio_base64 = base64.b64encode(audio_content).decode('utf-8')
        return jsonify({'audioBase64': audio_base64})
    except Exception as e:
        print(f"Error in /generate-tts: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error generating speech: {str(e)}'}), 500


@app.route('/end-interview', methods=['POST'])
def end_interview():
    """Ends interview, triggers background analysis, updates Firestore."""
    interview_id = None
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        interview_id = data.get('interviewId')
        if not interview_id: return jsonify({'error': 'Interview ID required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503

        # Fetch latest interview data before updating
        interview_data = get_interview_data(interview_id)
        if interview_data is None: return jsonify({'error': 'Interview session not found'}), 404
        if interview_data.get('status') != 'active':
             # Allow ending again if already completed/failed? Or return error?
             print(f"[{interview_id}] Interview already ended (status: {interview_data.get('status')}).")
             return jsonify({'status': interview_data.get('status'), 'message': 'Interview already ended', 'analysisStatus': interview_data.get('analysis_status', 'N/A')}), 200

        print(f"[{interview_id}] Received request to end interview.")
        # Update status immediately in Firestore
        update_success = update_interview_data(interview_id, {
            'status': 'completed', # Mark as completed (before analysis)
            'end_time': datetime.now().isoformat(),
            'analysis_status': 'processing' # Indicate analysis is starting
        })
        if not update_success: return jsonify({'error': 'Failed to update interview status'}), 500

        # Get necessary data for analysis (use potentially updated data)
        updated_interview_data = get_interview_data(interview_id) # Fetch again to ensure end_time etc. is present?
        conversation = updated_interview_data.get('conversation', [])
        resume_data = updated_interview_data.get('resume_data_snapshot', {})
        job_data = updated_interview_data.get('job_data_snapshot', {}).get('jobRequirements', {}) # Pass only job reqs? Or full match results? Let's pass job_data_snapshot for now
        session_id = updated_interview_data.get('sessionId')

        # Format transcript
        transcript = "\n".join([
            f"{'Interviewer' if msg.get('role') == 'assistant' else 'Candidate'}: {msg.get('content', '')}"
            for msg in conversation
        ])

        # Define background task for analysis
        def analyze_interview_background(current_interview_id, transcript_text, job_reqs, resume_info, linked_session_id):
            analysis_result = None
            analysis_status = 'failed'
            error_msg = None
            try:
                print(f"[{current_interview_id}] Starting background analysis.")
                analysis_result = analyze_interview_performance(transcript_text, job_reqs, resume_info)
                # Store analysis in interview document
                update_interview_data(current_interview_id, {'analysis': analysis_result, 'analysis_status': 'completed'})
                analysis_status = 'completed'
                print(f"[{current_interview_id}] Analysis completed and saved.")

                # --- Track Progress ---
                if linked_session_id and analysis_result:
                    print(f"[{current_interview_id}] Attempting to track progress for session {linked_session_id}.")
                    # We'll store progress directly in the 'sessions' document for simplicity
                    session_data = get_session_data(linked_session_id)
                    if session_data:
                        past_interviews = session_data.get('progress_history', {}).get('interviews', [])
                        metrics = {
                            "date": updated_interview_data.get('end_time', datetime.now().isoformat()), # Use interview end time
                            "interviewId": current_interview_id,
                            "interviewType": updated_interview_data.get('interviewType', 'general'),
                            "overallScore": analysis_result.get("overallScore", 0),
                            "technicalScore": analysis_result.get("technicalAssessment", {}).get("score", 0),
                            "communicationScore": analysis_result.get("communicationAssessment", {}).get("score", 0),
                            "behavioralScore": analysis_result.get("behavioralAssessment", {}).get("score", 0)
                        }
                        past_interviews.append(metrics)
                        past_interviews.sort(key=lambda x: x["date"]) # Sort oldest first

                        trends = {}
                        if len(past_interviews) > 1:
                            first = past_interviews[0]
                            latest = past_interviews[-1]
                            trends = {
                                "totalInterviews": len(past_interviews),
                                "overallImprovement": latest["overallScore"] - first["overallScore"],
                                "technicalImprovement": latest["technicalScore"] - first["technicalScore"],
                                "communicationImprovement": latest["communicationScore"] - first["communicationScore"],
                                "behavioralImprovement": latest["behavioralScore"] - first["behavioralScore"],
                                "timespan": f"{(datetime.fromisoformat(latest['date']) - datetime.fromisoformat(first['date'])).days} days"
                            }

                        progress_update = {
                             'progress_history': {
                                 'interviews': past_interviews,
                                 'trends': trends
                             }
                        }
                        if update_session_data(linked_session_id, progress_update):
                            print(f"[{current_interview_id}] Progress tracked successfully for session {linked_session_id}.")
                        else:
                             print(f"[{current_interview_id}] WARNING: Failed to update progress tracking for session {linked_session_id}.")
                    else:
                         print(f"[{current_interview_id}] WARNING: Could not find session {linked_session_id} to track progress.")
                # --- End Track Progress ---

            except Exception as e:
                error_msg = f"Error analyzing interview {current_interview_id}: {e}"
                print(error_msg)
                traceback.print_exc()
                update_interview_data(current_interview_id, {'analysis_status': 'failed', 'analysis_error': str(e)})
            finally:
                 print(f"[{current_interview_id}] Background analysis finished with status: {analysis_status}")

        # Start analysis thread
        analysis_thread = threading.Thread(target=analyze_interview_background, args=(interview_id, transcript, job_data, resume_data, session_id))
        analysis_thread.daemon = True
        analysis_thread.start()

        return jsonify({'status': 'completed', 'message': 'Interview ended, analysis started', 'analysisStatus': 'processing'})
    except Exception as e:
        print(f"Error in /end-interview route for {interview_id}: {e}")
        traceback.print_exc()
        # Try to mark interview as failed if ID exists
        if interview_id and db: update_interview_data(interview_id, {'status': 'failed', 'analysis_status': 'failed', 'analysis_error': f'Route level error: {str(e)}'})
        return jsonify({'error': f'Server error: {str(e)}'}), 500


@app.route('/get-interview-analysis/<interview_id>', methods=['GET'])
def get_interview_analysis(interview_id):
    """Returns the analysis of the completed interview from Firestore."""
    try:
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        interview_data = get_interview_data(interview_id)
        if interview_data is None: return jsonify({'error': 'Interview session not found'}), 404

        analysis_status = interview_data.get('analysis_status', 'not_started')

        if analysis_status == 'processing':
            return jsonify({'status': 'processing', 'message': 'Analysis is still processing'}), 202
        if analysis_status == 'failed':
            return jsonify({'status': 'failed', 'error': interview_data.get('analysis_error', 'Unknown analysis error')}), 500
        if analysis_status != 'completed' or 'analysis' not in interview_data:
            return jsonify({'status': 'not_available', 'message': 'Analysis not available or not completed'}), 400

        # Format transcript for response
        conversation = interview_data.get('conversation', [])
        formatted_transcript = [
            {'speaker': 'Interviewer' if msg.get('role') == 'assistant' else 'Candidate', 'text': msg.get('content', '')}
            for msg in conversation
        ]
        # Get progress data (might be stored separately or not exist yet)
        # For now, we assume it's fetched via /get-progress-history

        return jsonify({
            'interviewId': interview_id, # Added interview ID to response
            'analysis': interview_data['analysis'],
            'transcript': formatted_transcript,
            'interviewType': interview_data.get('interviewType'),
            'duration': get_duration(interview_data.get('start_time'), interview_data.get('end_time'))
        })
    except Exception as e:
        print(f"Error in /get-interview-analysis for {interview_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error retrieving interview analysis: {str(e)}'}), 500


@app.route('/get-suggested-answers/<interview_id>', methods=['GET'])
def get_suggested_answers_route(interview_id):
    """Generates and returns suggested answers for the interview questions."""
    try:
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        interview_data = get_interview_data(interview_id)
        if interview_data is None: return jsonify({'error': 'Interview session not found'}), 404
        # Require analysis to be complete? Or just need transcript? Let's require completion for now.
        # if interview_data.get('analysis_status') != 'completed':
        #     return jsonify({'error': 'Interview analysis must be completed first'}), 400

        conversation = interview_data.get('conversation', [])
        resume_data = interview_data.get('resume_data_snapshot')
        job_data = interview_data.get('job_data_snapshot') # Contains match results etc.
        if not conversation or not resume_data or not job_data:
             return jsonify({'error': 'Missing required data for generating suggestions'}), 500

        transcript_text = "\n".join([
            f"{'Interviewer' if msg.get('role') == 'assistant' else 'Candidate'}: {msg.get('content', '')}"
            for msg in conversation
        ])
        suggestions = generate_suggested_answers(transcript_text, resume_data, job_data)
        return jsonify(suggestions)
    except Exception as e:
        print(f"Error in /get-suggested-answers for {interview_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error generating suggestions: {str(e)}'}), 500


@app.route('/get-progress-history/<session_id>', methods=['GET'])
def get_progress_history(session_id):
    """Returns the progress history stored within the session document."""
    try:
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        session_data = get_session_data(session_id)
        if session_data is None: return jsonify({'error': 'Session not found or expired'}), 404

        progress_data = session_data.get('progress_history', {'interviews': [], 'trends': {}}) # Default if not found

        # Ensure interviews list exists
        if 'interviews' not in progress_data: progress_data['interviews'] = []
        if 'trends' not in progress_data: progress_data['trends'] = {}

        return jsonify(progress_data)
    except Exception as e:
        print(f"Error in /get-progress-history for {session_id}: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error retrieving progress: {str(e)}'}), 500

@app.route('/check-feature-access', methods=['POST'])
def check_feature_access_route():
    """API endpoint to check if user can access a specific feature based on plan."""
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        
        user_id = data.get('userId')
        feature_type = data.get('feature')
        
        if not user_id: return jsonify({'error': 'User ID required'}), 400
        if not feature_type: return jsonify({'error': 'Feature type required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        
        if feature_type not in ['resumeAnalyses', 'mockInterviews']:
            return jsonify({'error': f'Invalid feature type: {feature_type}'}), 400
            
        # Check access
        access_result = check_feature_access(user_id, feature_type)
        
        # Return the result directly
        return jsonify(access_result)
        
    except Exception as e:
        print(f"Error in /check-feature-access: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}', 'allowed': False}), 500


@app.route('/update-user-plan', methods=['POST'])
def update_user_plan():
    """Updates a user's plan in Firestore."""
    try:
        data = request.get_json()
        if not data: return jsonify({'error': 'Invalid JSON payload'}), 400
        
        user_id = data.get('userId')
        plan_name = data.get('plan')
        
        if not user_id: return jsonify({'error': 'User ID required'}), 400
        if not plan_name: return jsonify({'error': 'Plan name required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        
        # Validate plan name
        valid_plans = ['free', 'starter', 'standard', 'pro']
        if plan_name not in valid_plans:
            return jsonify({'error': f'Invalid plan name: {plan_name}. Valid plans: {", ".join(valid_plans)}'}), 400
            
        # Get user profile to keep current usage 
        user_data = get_user_usage(user_id)
        if not user_data:
            return jsonify({'error': f'User {user_id} not found'}), 404
            
        # Calculate new limits based on plan
        resume_limit = get_package_limit(plan_name, 'resumeAnalyses')
        interview_limit = get_package_limit(plan_name, 'mockInterviews')
        
        # Keep track of current usage (or default to 0)
        current_resume_used = user_data.get('usage', {}).get('resumeAnalyses', {}).get('used', 0)
        current_interview_used = user_data.get('usage', {}).get('mockInterviews', {}).get('used', 0)
        
        # Update user profile
        user_ref = db.collection('users').document(user_id)
        update_data = {
            'plan': plan_name,
            'planPurchasedAt': datetime.now().isoformat(),
            'planExpiresAt': None,  # No expiration for now
            'usage.resumeAnalyses.limit': resume_limit,
            'usage.resumeAnalyses.used': current_resume_used,
            'usage.mockInterviews.limit': interview_limit,
            'usage.mockInterviews.used': current_interview_used,
            'last_updated': firestore.SERVER_TIMESTAMP
        }
        
        user_ref.update(update_data)
        print(f"Updated user {user_id} to plan: {plan_name}")
        
        return jsonify({
            'success': True,
            'plan': plan_name,
            'resumeLimit': resume_limit,
            'interviewLimit': interview_limit,
            'resumeUsed': current_resume_used,
            'interviewUsed': current_interview_used
        })
        
    except Exception as e:
        print(f"Error in /update-user-plan: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}', 'success': False}), 500


@app.route('/get-user-usage/<user_id>', methods=['GET'])
def get_user_usage_route(user_id):
    """Returns usage statistics for a user."""
    try:
        if not user_id: return jsonify({'error': 'User ID required'}), 400
        if not db: return jsonify({'error': 'Database unavailable'}), 503
        
        user_data = get_user_usage(user_id)
        if not user_data:
            return jsonify({'error': f'User {user_id} not found'}), 404
            
        # Extract relevant information only
        usage_data = {
            'userId': user_id,
            'plan': user_data.get('plan', 'free'),
            'planPurchasedAt': user_data.get('planPurchasedAt'),
            'planExpiresAt': user_data.get('planExpiresAt'),
            'resumeAnalyses': user_data.get('usage', {}).get('resumeAnalyses', {'used': 0, 'limit': 0}),
            'mockInterviews': user_data.get('usage', {}).get('mockInterviews', {'used': 0, 'limit': 0})
        }
        
        return jsonify(usage_data)
        
    except Exception as e:
        print(f"Error in /get-user-usage: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}'}), 500


# --- Cleanup Function (Needs Review/Replacement with TTL) ---
# Commenting out for now, as direct deletion based on time is inefficient
# Consider Firestore TTL policy for automatic deletion instead.
"""
def cleanup_old_sessions():
    # ... This logic needs to be adapted for Firestore ...
    # Querying and deleting based on timestamp can be complex/costly.
    # Firestore TTL is generally preferred.
    print("Cleanup function needs reimplementation for Firestore or replacement with TTL.")
    while True:
        time.sleep(3600 * 24) # Sleep for a day
"""

# --- Main Execution ---
if __name__ == '__main__':
    print("-" * 60)
    print(f"Starting IRIS Backend Server (Firestore Integrated)...")
    print(f"Timestamp: {datetime.now().isoformat()}")
    print(f"Flask Port: {PORT}")
    if not db:
        print("!!! WARNING: FIREBASE DB CLIENT NOT INITIALIZED !!!")
    # print(f"Base Temporary Directory: {BASE_TEMP_DIR}") # Still used temporarily
    print("-" * 60)

    # Comment out old cleanup thread start
    # cleanup_thread = threading.Thread(target=cleanup_old_sessions, daemon=True)
    # cleanup_thread.start()

    # Run Flask app using Gunicorn standard (Render's start command will use Gunicorn)
    # The following is for local testing only if needed, Render uses the Start Command.
    # Use `flask run --port=5000` or `gunicorn backend:app` locally.
    # app.run(host='0.0.0.0', port=PORT, debug=False) # debug=False for production-like Gunicorn behavior

styles.css:

/* Main Styles for IRIS - Interview Readiness & Improvement System */

:root {
    --primary-color: #4a6fdc;
    --secondary-color: #6c757d;
    --accent-color: #53b3cb;
    --success-color: #28a745;
    --warning-color: #ffc107;
    --danger-color: #dc3545;
    --light-color: #f8f9fa;
    --dark-color: #343a40;
    --sidebar-width: 260px;
    --gradient-start: #4a6fdc;
    --gradient-end: #53b3cb;
    --transition-speed: 0.3s;
}

/* Base Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f7fa;
    margin: 0;
    padding: 0;
    color: #333;
}

/* ===== Public View Styles ===== */
#public-view {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

#public-navbar {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    padding: 1rem 0;
}

.iris-logo-sm {
    font-size: 1.2rem;
    color: white;
}

.public-tabs-container {
    flex: 1;
}

.public-tab {
    display: none;
}

.public-tab.active {
    display: block;
    animation: fadeIn 0.5s;
}

.public-footer {
    background-color: #2a2f35;
    color: white;
    padding: 40px 0 20px;
}

.public-footer a {
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    transition: color 0.3s;
}

.public-footer a:hover {
    color: white;
}

.public-footer h5 {
    color: white;
    margin-bottom: 15px;
    font-weight: 600;
}

.social-icons {
    display: flex;
    gap: 15px;
}

.social-icons a {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    transition: background-color 0.3s;
}

.social-icons a:hover {
    background-color: rgba(255, 255, 255, 0.2);
}

/* Pricing Cards */
.pricing-card {
    height: 100%;
    transition: transform 0.3s, box-shadow 0.3s;
}

.pricing-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.pricing-card .card-header {
    background-color: #f8f9fa;
    border-bottom: none;
    text-align: center;
    padding: 1.5rem 1rem;
}

.pricing-card-title {
    margin: 1.5rem 0;
    font-size: 2.5rem;
    text-align: center;
    font-weight: 600;
}

.highlight-card {
    border-color: var(--primary-color);
    box-shadow: 0 5px 15px rgba(74, 111, 220, 0.2);
}

.highlight-card .card-header {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    color: white;
}

/* Auth Modals */
#auth-modal .modal-header {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    color: white;
}

.separator {
    display: flex;
    align-items: center;
    text-align: center;
    margin: 10px 0;
}

.separator::before,
.separator::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid #ddd;
}

.separator span {
    padding: 0 10px;
    color: #6c757d;
    font-size: 0.9rem;
}

/* ===== App View Styles ===== */
.app-container {
    display: flex;
    min-height: 100vh;
}

/* Sidebar Styles */
#sidebar {
    width: var(--sidebar-width);
    background: linear-gradient(to bottom, var(--gradient-start), var(--gradient-end));
    color: white;
    position: sticky;
    top: 0;
    height: 100vh;
    overflow-y: auto;
    transition: all var(--transition-speed);
    z-index: 1000;
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
}

.sidebar-header {
    padding: 20px;
    text-align: center;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.sidebar-header h3 {
    margin: 0;
    font-size: 24px;
    font-weight: 700;
}

.sidebar-header p {
    font-size: 12px;
    margin: 5px 0 0;
    opacity: 0.8;
}

.nav-items {
    list-style-type: none;
    padding: 0;
    margin: 20px 0;
    flex-grow: 1;
}

.nav-item {
    padding: 15px 20px;
    cursor: pointer;
    transition: background-color var(--transition-speed);
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-left: 3px solid transparent;
}

.nav-item i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

.nav-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.nav-item.active {
    background-color: rgba(255, 255, 255, 0.2);
    border-left: 3px solid white;
}

.status-indicator {
    font-size: 12px;
    border-radius: 50%;
    width: 22px;
    height: 22px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.status-indicator.locked {
    background-color: rgba(0, 0, 0, 0.3);
}

.status-indicator.unlocked {
    background-color: var(--success-color);
}

/* User Info in Sidebar */
.sidebar-user-info {
    padding: 15px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
    display: flex;
    flex-direction: column;
    align-items: center;
}

.user-avatar-container {
    position: relative;
    margin-bottom: 10px;
}

.user-avatar {
    width: 64px;
    height: 64px;
    object-fit: cover;
    border: 2px solid white;
}

.user-plan-badge {
    position: absolute;
    bottom: -5px;
    right: -5px;
    background: var(--warning-color);
    color: #333;
    font-size: 10px;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 10px;
    text-transform: uppercase;
}

.user-details {
    text-align: center;
    margin-bottom: 10px;
}

.user-display-name {
    display: block;
    font-weight: bold;
    font-size: 14px;
}

.user-email {
    display: block;
    opacity: 0.8;
    font-size: 12px;
}

.sidebar-footer {
    padding: 20px;
    text-align: center;
    font-size: 12px;
    opacity: 0.7;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

/* Main Content Area */
#content {
    flex: 1;
    padding: 0;
    overflow-x: hidden;
    transition: all var(--transition-speed);
}

.content-section {
    display: none;
    padding: 30px 20px;
    min-height: 100vh;
}

.content-section.active {
    display: block;
    animation: fadeIn 0.5s;
}

.section-description {
    color: #6c757d;
    margin-bottom: 30px;
}

h2 {
    color: var(--dark-color);
    margin-bottom: 20px;
    position: relative;
    display: inline-block;
}

h2:after {
    content: '';
    position: absolute;
    width: 50%;
    height: 3px;
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    bottom: -10px;
    left: 0;
    border-radius: 3px;
}

/* User Profile Styles */
.subscription-details h4,
.subscription-details h5 {
    margin-bottom: 15px;
    font-weight: 600;
}

.subscription-details .badge {
    font-size: 0.875rem;
}

.usage-section .progress {
    height: 8px;
    border-radius: 4px;
    background-color: #eee;
}

.usage-section .progress-bar {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
}

.plan-upgrade {
    border-top: 1px solid #eee;
    padding-top: 20px;
    margin-top: 20px;
}

.plan-upgrade ul li {
    margin-bottom: 8px;
}

#profileViewMode .row {
    padding: 10px 0;
    border-bottom: 1px solid #f0f0f0;
}

#profileViewMode .row:last-child {
    border-bottom: none;
}

/* Landing Page Styles */
.hero-section {
    padding: 60px 0;
    text-align: center;
}

.logo-container {
    margin-bottom: 30px;
}

.iris-logo {
    font-size: 80px;
    color: var(--primary-color);
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    background-clip: text;
    -webkit-text-fill-color: transparent;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
    margin: 50px 0;
}

.feature-card {
    background: white;
    border-radius: 10px;
    padding: 30px 20px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s, box-shadow 0.3s;
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.feature-card i {
    font-size: 40px;
    color: var(--primary-color);
    margin-bottom: 20px;
}

.get-started-btn {
    padding: 12px 30px;
    font-size: 18px;
    font-weight: 600;
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    border: none;
    transition: transform 0.3s, box-shadow 0.3s;
}

.get-started-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(74, 111, 220, 0.2);
}

/* Upload Page Styles */
.progress-container {
    margin-top: 30px;
    padding: 20px;
    border-radius: 10px;
    background-color: white;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.progress {
    height: 10px;
    margin: 15px 0;
}

/* Analysis Results Styles */
.match-score-circle {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: conic-gradient(var(--primary-color) 0% var(--percentage, 0%), #eee var(--percentage, 0%) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 30px auto;
    position: relative;
}

.match-score-circle::before {
    content: '';
    position: absolute;
    width: 130px;
    height: 130px;
    border-radius: 50%;
    background: white;
}

.match-score-circle span {
    position: relative;
    font-size: 36px;
    font-weight: bold;
    color: var(--primary-color);
}

.match-score-circle span:nth-child(2) {
    font-size: 20px;
    margin-left: 2px;
}

/* Prep Plan Styles */
.focus-areas-list {
    list-style-type: none;
    padding: 0;
}

.focus-areas-list li {
    padding: 15px;
    margin-bottom: 10px;
    background-color: #f8f9fa;
    border-left: 4px solid var(--primary-color);
    border-radius: 5px;
}

.timeline {
    position: relative;
    padding: 20px 0;
}

.timeline::before {
    content: '';
    position: absolute;
    width: 4px;
    background-color: #f1f1f1;
    top: 0;
    bottom: 0;
    left: 20px;
    margin-left: -2px;
}

.timeline-item {
    padding: 10px 40px;
    position: relative;
    background-color: inherit;
    width: 100%;
    margin-bottom: 20px;
}

.timeline-item::before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    left: 15px;
    background-color: white;
    border: 4px solid var(--primary-color);
    top: 15px;
    border-radius: 50%;
    z-index: 1;
}

.timeline-content {
    padding: 15px;
    background-color: white;
    position: relative;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.timeline-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: var(--primary-color);
}

/* Mock Interview Styles */
.interview-type-selector {
    display: flex;
    justify-content: center;
    margin-bottom: 30px;
}

.interview-type-selector button {
    margin: 0 10px;
    padding: 10px 20px;
    font-weight: 600;
}

.interview-container {
    background-color: white;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.video-card, .avatar-card {
    height: 400px;
    margin-bottom: 20px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    border: none;
    border-radius: 10px;
    overflow: hidden;
}

.video-container {
    width: 100%;
    height: 350px;
    background-color: #292929;
    position: relative;
    overflow: hidden;
}

video {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.video-controls {
    position: absolute;
    bottom: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
}

.avatar-container {
    width: 100%;
    height: 350px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    background-color: #f5f7fa;
}

.avatar-circle {
    width: 150px;
    height: 150px;
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 10px 20px rgba(74, 111, 220, 0.2);
    z-index: 2;
}

.avatar-circle i {
    font-size: 80px;
    color: white;
}

.avatar-pulse-rings {
    position: absolute;
    width: 150px;
    height: 150px;
}

.pulse-ring {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: var(--primary-color);
    opacity: 0;
    transform: scale(1);
    animation: pulse 2s infinite;
}

.pulse-ring:nth-child(2) {
    animation-delay: 0.5s;
}

.pulse-ring:nth-child(3) {
    animation-delay: 1s;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        opacity: 0.7;
    }
    100% {
        transform: scale(2);
        opacity: 0;
    }
}

.audio-waves {
    display: flex;
    align-items: center;
    height: 20px;
    width: 30px;
    margin-right: 10px;
}

.audio-waves span {
    display: inline-block;
    width: 4px;
    height: 5px;
    margin: 0 2px;
    background-color: #ccc;
    border-radius: 1px;
    animation: none;
}

.audio-waves.active span {
    animation: soundWave 1s infinite;
}

.audio-waves.active span:nth-child(1) {
    animation-delay: 0.1s;
    height: 10px;
}

.audio-waves.active span:nth-child(2) {
    animation-delay: 0.2s;
    height: 15px;
}

.audio-waves.active span:nth-child(3) {
    animation-delay: 0.3s;
    height: 10px;
}

.audio-waves.active span:nth-child(4) {
    animation-delay: 0.4s;
    height: 5px;
}

@keyframes soundWave {
    0%, 100% {
        transform: scaleY(1);
    }
    50% {
        transform: scaleY(1.5);
    }
}

.candidate-speaking-indicator, .interviewer-speaking-indicator {
    display: flex;
    align-items: center;
}

.conversation-card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.conversation-container {
    height: 300px;
    overflow-y: auto;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 10px;
}

.message {
    padding: 12px 15px;
    margin-bottom: 15px;
    border-radius: 10px;
    max-width: 80%;
    position: relative;
}

.message.interviewer {
    background-color: #ebf5fe;
    color: #333;
    margin-right: auto;
    border-top-left-radius: 0;
}

.message.candidate {
    background-color: var(--primary-color);
    color: white;
    margin-left: auto;
    border-top-right-radius: 0;
}

.message.system {
    background-color: #f0f0f0;
    color: #666;
    margin: 0 auto;
    font-style: italic;
    font-size: 0.9rem;
    text-align: center;
    border-radius: 5px;
}

.message .sender {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 14px;
}

.recording-indicator {
    display: none;
    margin-top: 15px;
    background-color: #fef8f8;
    color: var(--danger-color);
    padding: 10px;
    border-radius: 5px;
    text-align: center;
}

/* Performance Analysis Styles */
.performance-score-circle {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: conic-gradient(var(--primary-color) 0% var(--percentage, 0%), #eee var(--percentage, 0%) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 30px auto;
    position: relative;
}

.performance-score-circle::before {
    content: '';
    position: absolute;
    width: 130px;
    height: 130px;
    border-radius: 50%;
    background: white;
}

.performance-score-circle span {
    position: relative;
    font-size: 36px;
    font-weight: bold;
    color: var(--primary-color);
}

.performance-score-circle span:nth-child(2) {
    font-size: 20px;
    margin-left: 2px;
}

.score-card {
    height: 100%;
}

.score-indicator {
    text-align: center;
    margin-bottom: 20px;
}

.score-value {
    font-size: 32px;
    font-weight: bold;
    color: var(--primary-color);
}

.score-bar {
    height: 8px;
    background-color: #eee;
    border-radius: 4px;
    margin-top: 10px;
    overflow: hidden;
}

.score-progress {
    height: 100%;
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    width: 0%;
    transition: width 1.5s;
}

.score-details h5 {
    font-size: 16px;
    margin-bottom: 10px;
}

.score-details ul {
    padding-left: 20px;
    margin-bottom: 15px;
}

.score-details li {
    margin-bottom: 5px;
}

.interview-transcript {
    max-height: 400px;
    overflow-y: auto;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 10px;
}

.transcript-message {
    padding: 10px 15px;
    margin-bottom: 10px;
    border-left: 3px solid;
}

.transcript-message.interviewer {
    border-left-color: var(--primary-color);
    background-color: #f0f7ff;
}

.transcript-message.candidate {
    border-left-color: var(--secondary-color);
    background-color: #f8f9fa;
}

.transcript-speaker {
    font-weight: bold;
    margin-bottom: 5px;
}

/* Progress History Styles */
.chart-container {
    position: relative;
    height: 300px;
    margin-bottom: 20px;
}

.past-interviews-list {
    max-height: 300px;
    overflow-y: auto;
}

.past-interview-item {
    padding: 15px;
    margin-bottom: 10px;
    background-color: #f8f9fa;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.past-interview-item:hover {
    background-color: #f0f0f0;
}

.past-interview-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.past-interview-type {
    background-color: #e9ecef;
    padding: 2px 8px;
    border-radius: 3px;
    font-size: 12px;
}

.past-interview-score {
    font-weight: bold;
    color: var(--primary-color);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* Error Messages */
#error-messages {
    max-width: 400px;
}

/* Responsive Styles */
@media (max-width: 992px) {
    #sidebar {
        width: 220px;
    }
    
    .pricing-card-title {
        font-size: 2rem;
    }
}

@media (max-width: 768px) {
    .app-container {
        flex-direction: column;
    }
    
    #sidebar {
        width: 100%;
        height: auto;
        position: relative;
    }
    
    .nav-item {
        padding: 10px 15px;
    }
    
    .vi
deo-card, .avatar-card {
        height: 300px;
    }
    
    .video-container, .avatar-container {
        height: 250px;
    }
    
    .features-grid {
        grid-template-columns: 1fr;
    }
    
    .sidebar-user-info {
        flex-direction: row;
        justify-content: space-between;
    }
    
    .user-avatar {
        width: 40px;
        height: 40px;
    }
    
    .user-plan-badge {
        font-size: 8px;
    }
}

/* Utilities */
.text-center {
    text-align: center;
}

.mt-3 {
    margin-top: 15px;
}

.mt-4 {
    margin-top: 20px;
}

.mb-4 {
    margin-bottom: 20px;
}

.hero-section {
    padding-bottom: 0; /* Reduce bottom padding if sections follow directly */
}

.features-grid {
    margin-bottom: 3rem; /* Add space below features grid */
}

/* Style for the numbered steps */
.step-number {
    display: inline-block;
    width: 40px;
    height: 40px;
    line-height: 40px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    font-weight: bold;
    font-size: 1.2rem;
    text-align: center;
    margin-bottom: 15px;
}

/* Spacing between new sections */
#welcome-tab > .container.py-5,
#welcome-tab > .bg-light.py-5 {
    margin-bottom: 3rem; /* Add space between content blocks */
}

/* Ensure consistent icon colors if needed */
.text-primary {
    color: var(--primary-color) !important;
}
.text-success {
     color: var(--success-color) !important;
}
.text-danger {
    color: var(--danger-color) !important;
}

/* Add some padding to new text sections */
.container.py-5 h2 + p {
    margin-top: 1rem;
}
.container.py-5 ul {
    margin-top: 1.5rem;
    padding-left: 1rem; /* Adjust bullet point indentation */
}
.container.py-5 ul li {
    margin-bottom: 0.75rem;
}

/* ==== CSS Updates for Package-Based Implementation ==== */

/* Subscription Card Enhancements */
.subscription-details {
    position: relative;
}

.current-plan {
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
    margin-bottom: 15px;
}

.plan-description {
    color: #666;
    font-size: 0.9rem;
}

.user-plan {
    font-size: 0.875rem;
    font-weight: 600;
}

.usage-section .progress {
    height: 8px;
    border-radius: 4px;
    background-color: #eee;
}

.usage-section .progress-bar {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    transition: width 0.5s ease-in-out;
}

.usage-section .progress-bar.bg-warning {
    background: linear-gradient(to right, #ffc107, #ffb838);
}

.usage-section .progress-bar.bg-danger {
    background: linear-gradient(to right, #dc3545, #f56565);
}

/* Plan upgrade section */
.plan-upgrade {
    border-top: 1px solid #eee;
    padding-top: 15px;
    margin-top: 15px;
}

.plan-upgrade ul li {
    margin-bottom: 8px;
}

.plan-upgrade .btn-success:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
}

.plan-upgrade .btn-danger:hover,
.plan-upgrade .btn-warning:hover {
    transform: translateY(-2px);
}

/* ==== Upgrade Modal Styling ==== */
.modal-dialog.modal-lg {
    max-width: 900px;
}

.modal .pricing-card {
    transition: transform 0.3s, box-shadow 0.3s;
}

.modal .pricing-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.modal .pricing-card.border-primary {
    border-width: 2px !important;
    box-shadow: 0 5px 15px rgba(74, 111, 220, 0.2);
}

.badge.position-absolute {
    z-index: 2;
}

/* Payment Success Modal Styling */
.checkmark-circle {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #28a745;
    margin: 0 auto;
    color: white;
    font-size: 50px;
    margin-top: 1rem;
}

/* ==== Feature Lock/Unlock Indicators ==== */
.status-indicator.locked,
.status-indicator.unlocked {
    transition: all 0.3s ease;
}

.status-indicator.locked {
    background-color: rgba(0, 0, 0, 0.3);
    color: rgba(255, 255, 255, 0.7);
}

.status-indicator.unlocked {
    background-color: var(--success-color);
    animation: pulse-success 2s;
}

@keyframes pulse-success {
    0% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(40, 167, 69, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
    }
}

/* Feature Card Modifications */
.feature-card.locked {
    opacity: 0.7;
    position: relative;
}

.feature-card.locked::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.1);
    z-index: 1;
}

.feature-card.locked .lock-icon {
    position: absolute;
    top: 10px;
    right: 10px;
    color: #dc3545;
    font-size: 1.25rem;
    z-index: 2;
}

/* Limit Modal */
#limitReachedModal .modal-header.bg-warning {
    color: #212529;
}

#limitReachedModal .btn-primary {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
    border: none;
}

/* Payment Processing Modal */
#paymentProcessingModal .progress {
    height: 10px;
    border-radius: 5px;
}

#paymentProcessingModal .progress-bar {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
}
